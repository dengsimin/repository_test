A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE     1


MACRO ASSEMBLER A51 V8.02c
OBJECT MODULE PLACED IN .\Bin\Fe2p_API.OBJ
ASSEMBLER INVOKED BY: D:\Keil_v5\C51\BIN\A51.EXE .\Bin\Fe2p_API.src PR(.\Lst\Fe2p_API.ls1) EP

LOC  OBJ            LINE     SOURCE

                       1     ; .\Bin\Fe2p_API.SRC generated from: Lib\NT68810 Series\Fe2p_API.c
                       2     ; COMPILER INVOKED BY:
                       3     ;        D:\Keil_v5\C51\BIN\C51.EXE Lib\NT68810 Series\Fe2p_API.c LARGE OPTIMIZE(9,SPEED) B
                             ROWSE INCDIR(.\App;.\App\OSD;.\App\User;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Pa
                             nel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\Phy\SI\NVT\Keypad;.\Sys;.\Sys\SI\NVT;.\Phy\
                             SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_MODULE,LVIEW_2560X1
                             440,FLASH_BANK=8) PRINT(.\Lst\Fe2p_API.lst) TABS(2) SRC(.\Bin\Fe2p_API.SRC)
                       4     
                       5     $nomod51 
                       6     
                       7     NAME    FE2P_API
                       8     
  0080                 9     P0      DATA    080H
  0090                10     P1      DATA    090H
  00A0                11     P2      DATA    0A0H
  00B0                12     P3      DATA    0B0H
  00D6                13     AC      BIT     0D0H.6
  00AF                14     EA      BIT     0A8H.7
  00A8                15     IE      DATA    0A8H
  00CE                16     EXF2    BIT     0C8H.6
  00AC                17     ES      BIT     0A8H.4
  00B8                18     IP      DATA    0B8H
  0098                19     RI      BIT     098H.0
  00D7                20     CY      BIT     0D0H.7
  0099                21     TI      BIT     098H.1
  00CB                22     RCAP2H  DATA    0CBH
  00BC                23     PS      BIT     0B8H.4
  0081                24     SP      DATA    081H
  00D2                25     OV      BIT     0D0H.2
  00CA                26     RCAP2L  DATA    0CAH
  00CD                27     RCLK    BIT     0C8H.5
  00CC                28     TCLK    BIT     0C8H.4
  0080                29     P00     BIT     080H.0
  0090                30     P10     BIT     090H.0
  0081                31     P01     BIT     080H.1
  0099                32     SBUF    DATA    099H
  0087                33     PCON    DATA    087H
  00A0                34     P20     BIT     0A0H.0
  0091                35     P11     BIT     090H.1
  0082                36     P02     BIT     080H.2
  00B0                37     P30     BIT     0B0H.0
  00A1                38     P21     BIT     0A0H.1
  0092                39     P12     BIT     090H.2
  0083                40     P03     BIT     080H.3
  00B1                41     P31     BIT     0B0H.1
  00A2                42     P22     BIT     0A0H.2
  0093                43     P13     BIT     090H.3
  0084                44     P04     BIT     080H.4
  0098                45     SCON    DATA    098H
  00B2                46     P32     BIT     0B0H.2
  00A3                47     P23     BIT     0A0H.3
  0094                48     P14     BIT     090H.4
  0085                49     P05     BIT     080H.5
  0089                50     TMOD    DATA    089H
  0088                51     TCON    DATA    088H
  00B3                52     P33     BIT     0B0H.3
  00A4                53     P24     BIT     0A0H.4
  0095                54     P15     BIT     090H.5
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE     2

  0086                55     P06     BIT     080H.6
  00B4                56     P34     BIT     0B0H.4
  00A5                57     P25     BIT     0A0H.5
  0096                58     P16     BIT     090H.6
  0087                59     P07     BIT     080H.7
  00B5                60     P35     BIT     0B0H.5
  00A6                61     P26     BIT     0A0H.6
  0097                62     P17     BIT     090H.7
  00B6                63     P36     BIT     0B0H.6
  00A7                64     P27     BIT     0A0H.7
  00B7                65     P37     BIT     0B0H.7
  0089                66     IE0     BIT     088H.1
  008B                67     IE1     BIT     088H.3
  00F0                68     B       DATA    0F0H
  00E0                69     ACC     DATA    0E0H
  00A9                70     ET0     BIT     0A8H.1
  00C9                71     CT2     BIT     0C8H.1
  00AB                72     ET1     BIT     0A8H.3
  008D                73     TF0     BIT     088H.5
  00AD                74     ET2     BIT     0A8H.5
  008F                75     TF1     BIT     088H.7
  009A                76     RB8     BIT     098H.2
  00CF                77     TF2     BIT     0C8H.7
  008C                78     TH0     DATA    08CH
  00A8                79     EX0     BIT     0A8H.0
  0088                80     IT0     BIT     088H.0
  008D                81     TH1     DATA    08DH
  00AA                82     EX1     BIT     0A8H.2
  009B                83     TB8     BIT     098H.3
  008A                84     IT1     BIT     088H.2
  00CD                85     TH2     DATA    0CDH
  00D0                86     P       BIT     0D0H.0
  009F                87     SM0     BIT     098H.7
  008A                88     TL0     DATA    08AH
  009E                89     SM1     BIT     098H.6
  008B                90     TL1     DATA    08BH
  009D                91     SM2     BIT     098H.5
  00CC                92     TL2     DATA    0CCH
  00B9                93     PT0     BIT     0B8H.1
  00BB                94     PT1     BIT     0B8H.3
  00D3                95     RS0     BIT     0D0H.3
  00BD                96     PT2     BIT     0B8H.5
  008C                97     TR0     BIT     088H.4
  00D4                98     RS1     BIT     0D0H.4
  008E                99     TR1     BIT     088H.6
  00B8               100     PX0     BIT     0B8H.0
  00CA               101     TR2     BIT     0C8H.2
  00BA               102     PX1     BIT     0B8H.2
  0083               103     DPH     DATA    083H
  0082               104     DPL     DATA    082H
  00CB               105     EXEN2   BIT     0C8H.3
  00C8               106     CPRL2   BIT     0C8H.0
  009C               107     REN     BIT     098H.4
  00C8               108     T2CON   DATA    0C8H
  00D5               109     F0      BIT     0D0H.5
  00D0               110     PSW     DATA    0D0H
                     111     ?PR?FLASH_InitProtection?FE2P_API        SEGMENT CODE 
                     112     ?PR?_FLASH_ProtectOff?FE2P_API           SEGMENT CODE 
                     113     ?XD?_FLASH_ProtectOff?FE2P_API           SEGMENT XDATA OVERLAYABLE 
                     114     ?PR?FLASH_ProtectOn?FE2P_API             SEGMENT CODE 
                     115     ?PR?FE2P_RamInitialize?FE2P_API          SEGMENT CODE 
                     116     ?PR?FE2P_CheckValidBlock?FE2P_API        SEGMENT CODE 
                     117     ?XD?FE2P_CheckValidBlock?FE2P_API        SEGMENT XDATA OVERLAYABLE 
                     118     ?PR?_FE2P_NvramWrite?FE2P_API            SEGMENT CODE 
                     119     ?XD?_FE2P_NvramWrite?FE2P_API            SEGMENT XDATA OVERLAYABLE 
                     120     ?PR?_FE2P_NvramRead?FE2P_API             SEGMENT CODE 
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE     3

                     121     ?XD?_FE2P_NvramRead?FE2P_API             SEGMENT XDATA OVERLAYABLE 
                     122     ?PR?FE2P_SaveToFlash?FE2P_API            SEGMENT CODE 
                     123     ?XD?FE2P_SaveToFlash?FE2P_API            SEGMENT XDATA OVERLAYABLE 
                     124     ?PR?FLASH_WP_ON?FE2P_API                 SEGMENT CODE 
                     125     ?PR?FLASH_WP_OFF?FE2P_API                SEGMENT CODE 
                     126     ?PR?RecordTimeScale?FE2P_API             SEGMENT CODE 
                     127     ?XD?RecordTimeScale?FE2P_API             SEGMENT XDATA OVERLAYABLE 
                     128     ?PR?EraseTimeScale?FE2P_API              SEGMENT CODE 
                     129     ?PR?DecodeTimeScale?FE2P_API             SEGMENT CODE 
                     130     ?XD?DecodeTimeScale?FE2P_API             SEGMENT XDATA OVERLAYABLE 
                     131     ?C_INITSEG           SEGMENT CODE 
                     132     ?CO?FE2P_API         SEGMENT CODE 
                     133     ?XD?FE2P_API         SEGMENT XDATA 
                     134     ?BI?FE2P_API         SEGMENT BIT 
                     135     ?PR?FE2P_API         SEGMENT CODE 
                     136             EXTRN   CODE (_PMC_Sector_Unlock)
                     137             EXTRN   XDATA (SystemData)
                     138             EXTRN   CODE (Fe2p_WriteEnable)
                     139             EXTRN   CODE (_McuSetIOBit)
                     140             EXTRN   CODE (_Fe2p_SectorErase)
                     141             EXTRN   CODE (PMC_Sector_Lock)
                     142             EXTRN   CODE (_NvramInitialize)
                     143             EXTRN   CODE (_Fe2p_PageRead)
                     144             EXTRN   XDATA (?_Fe2p_PageRead?BYTE)
                     145             EXTRN   XDATA (CLR_WDT)
                     146             EXTRN   CODE (_Fe2p_Set_SPI_CMD_buffer_addr)
                     147             EXTRN   CODE (_Fe2p_PageWrite)
                     148             EXTRN   XDATA (?_Fe2p_PageWrite?BYTE)
                     149             EXTRN   CODE (_Fe2p_SetProtect)
                     150             EXTRN   CODE (_Fe2p_ByteRead)
                     151             EXTRN   CODE (_Fe2p_Init)
                     152             EXTRN   CODE (_Fe2p_SetOffset)
                     153             EXTRN   CODE (_Fe2p_ByteWrite)
                     154             EXTRN   CODE (Fe2p_Get_Lib_Ver)
                     155             EXTRN   CODE (Fe2p_RDSR)
                     156             EXTRN   CODE (?C?CLDPTR)
                     157             EXTRN   CODE (?C?IILDX)
                     158             EXTRN   CODE (?C?CSTPTR)
                     159             EXTRN   CODE (?C?LIMUL)
                     160             EXTRN   CODE (?C?LSTXDATA)
                     161             EXTRN   CODE (?C?ULCMP)
                     162             EXTRN   CODE (?C?ULDIV)
                     163             EXTRN   CODE (?C?LMUL)
                     164             PUBLIC  DecodeTimeScale
                     165             PUBLIC  EraseTimeScale
                     166             PUBLIC  RecordTimeScale
                     167             PUBLIC  FE2P_SaveToFlash
                     168             PUBLIC  _FE2P_NvramRead
                     169             PUBLIC  _FE2P_NvramWrite
                     170             PUBLIC  FE2P_CheckValidBlock
                     171             PUBLIC  FE2P_RamInitialize
                     172     
----                 173             XSEG  AT  0A800H
A800                 174       ucFE2P_Buffer:   DS   2048
                     175     
----                 176             RSEG  ?XD?_FE2P_NvramWrite?FE2P_API
0000                 177     ?_FE2P_NvramWrite?BYTE:
0000                 178            Addr?545:   DS   2
0002                 179             ORG  2
0002                 180          Length?546:   DS   2
0004                 181             ORG  4
0004                 182             Ptr?547:   DS   3
0007                 183             ORG  7
0007                 184               i?548:   DS   2
                     185     
----                 186             RSEG  ?XD?FE2P_CheckValidBlock?FE2P_API
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE     4

0000                 187     ?FE2P_CheckValidBlock?BYTE:
0000                 188             Dat?444:   DS   1
                     189     
----                 190             RSEG  ?XD?FE2P_SaveToFlash?FE2P_API
0000                 191     ?FE2P_SaveToFlash?BYTE:
0000                 192          offset?753:   DS   2
0002                 193             ORG  2
0002                 194      old_offset?754:   DS   2
0004                 195             ORG  4
0004                 196               i?755:   DS   2
                     197     
----                 198             RSEG  ?XD?DecodeTimeScale?FE2P_API
0000                 199     ?DecodeTimeScale?BYTE:
0000                 200           temp?1261:   DS   4
0004                 201             ORG  4
0004                 202         offset?1262:   DS   2
0006                 203             ORG  6
0006                 204             ch?1263:   DS   1
                     205     
----                 206             RSEG  ?XD?_FLASH_ProtectOff?FE2P_API
0000                 207     ?_FLASH_ProtectOff?BYTE:
0000                 208          offset?141:   DS   2
0002                 209             ORG  2
0002                 210     ucFe2p_RDSR?142:   DS   1
                     211     
----                 212             RSEG  ?XD?RecordTimeScale?FE2P_API
0000                 213     ?RecordTimeScale?BYTE:
0000                 214         offset?1057:   DS   2
0002                 215             ORG  2
0002                 216             ch?1059:   DS   1
0003                 217             ORG  3
0003                 218           temp?1060:   DS   4
                     219     
----                 220             RSEG  ?XD?_FE2P_NvramRead?FE2P_API
0000                 221     ?_FE2P_NvramRead?BYTE:
0000                 222            Addr?649:   DS   2
0002                 223             ORG  2
0002                 224          Length?650:   DS   2
0004                 225             ORG  4
0004                 226               i?652:   DS   2
                     227     
----                 228             RSEG  ?XD?FE2P_API
0000                 229     ucFE2P_Valid_Block:   DS   1
0001                 230           ucFlashID:   DS   1
                     231     
----                 232             RSEG  ?BI?FE2P_API
0000                 233          bFE2P_Save:   DBIT   1
                     234     
----                 235             RSEG  ?CO?FE2P_API
0000                 236     ucFE2PAutoDetectInfo:
0000 55              237             DB      055H
0001 AA              238             DB      0AAH
0002 66              239             DB      066H
0003 99              240             DB      099H
0004 44              241             DB      044H
0005 4C              242             DB      04CH
0006 45              243             DB      045H
0007 4E              244             DB      04EH
0008 04              245             DB      004H
0009 57              246             DB      057H
000A 50              247             DB      050H
000B 04              248             DB      004H
000C 04              249             DB      004H
000D 00              250             DB      000H
                     251     
000E                 252     scaleTab?1056:
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE     5

000E FE              253             DB      0FEH
000F FC              254             DB      0FCH
0010 F8              255             DB      0F8H
0011 F0              256             DB      0F0H
0012 E0              257             DB      0E0H
0013 C0              258             DB      0C0H
0014 80              259             DB      080H
0015 00              260             DB      000H
                     261     
                     262     
----                 263             RSEG  ?C_INITSEG
0000 41              264             DB      041H
0001 0000     F      265             DW      ucFlashID
0003 00              266             DB      000H
                     267     
                     268     ; /******************************************************************************/
                     269     ; /*                       Novatek MicroElectronics Corp.                       */
                     270     ; /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
                     271     ; /*                         HsinChu 300, Taiwan, R.O.C.                        */
                     272     ; /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
                     273     ; /*                            All Rights Reserved                             */
                     274     ; /******************************************************************************/
                     275     ; 
                     276     ; //******************************************************************************
                     277     ; // I N C L U D E   F I L E S
                     278     ; //******************************************************************************
                     279     ; #include "Include.h"
                     280     ; 
                     281     ; #if ENABLE_FE2P == ON
                     282     ; 
                     283     ; //******************************************************************************
                     284     ; // M A C R O   D E F I N I T I O N S
                     285     ; //******************************************************************************
                     286     ; #define FE2P_BUFFER_ADDR FE2P_SRAM_ADDR  /*!< The base address of FE2P buffer in the sram
                             . */
                     287     ; #define VALID_FLAG_ADDR  0x7FF           /*!< Mask for the address */
                     288     ; #define BLOCK0           0x0000          /*!< The address of block 0 */
                     289     ; #define BLOCK1           0x1800          /*!< The address of block 1 */
                     290     ; #define BLOCK2           0x0800          /*!< The address of block 2 */
                     291     ; #define BLOCK3           0x2000          /*!< The address of block 3 */
                     292     ; #define BLOCK4           0x1000          /*!< The address of block 4 */
                     293     ; #define BLOCK5           0x2800          /*!< The address of block 5 */
                     294     ; #define BLOCK6           0x3000          /*!< The address of block 6 */
                     295     ; #define BLOCK7           0x3800          /*!< The address of block 7 */
                     296     ; #define FE2P_SAVE_TIME   100             /*!< Delay time to save data from sram to flash.
                              Current setting is 1s(100x10ms). */
                     297     ; #define MAXBLOCK         5               /*!<
                     298     ;                                           *   The max number of valid blocks.
                     299     ;                                           *   If flash is 2banks, the number is 1.
                     300     ;                                           *   If flash is 4banks, the number is 5.
                     301     ;                                           *   The block 6 and block 7 are used for POT wh
                             en flash is 4banks.
                     302     ;                                           */
                     303     ; #define TIMEBLOCK        BLOCK6          /*!< POT block. The block can be 0/2/4/6. So far
                             , we use 6 as default. */
                     304     ; #define TIME_FLAG_ADDR   0x0FFF          /*!< The valid tag for POT block */
                     305     ; 
                     306     ; //******************************************************************************
                     307     ; // G L O B A L   V A R I A B L E S
                     308     ; //******************************************************************************
                     309     ; 
                     310     ; //******************************************************************************
                     311     ; // S T A T I C   V A R I A B L E S
                     312     ; //******************************************************************************
                     313     ; static BOOL  bFE2P_Save;                 /*!<
                     314     ;                                           * The flag of "save the data from sram to flash
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE     6

                             ".
                     315     ;                                           * The flag will be raised after system perform 
                             FE2P_NvramWrite.
                     316     ;                                           * The flag will be cleared after system perform
                              FE2P_SaveToFlash.
                     317     ;                                           */
                     318     ; static xdata UCHAR ucFE2P_Valid_Block;   /*!<
                     319     ;                                           * This is the id of current valid block.
                     320     ;                                           * After FE2P_SaveToFlash, the id will be assign
                             ed as the id of next valid block.
                     321     ;                                           */
                     322     ; static xdata UCHAR ucFE2P_Buffer[2048] _at_ FE2P_BUFFER_ADDR; /*!< The FE2P buffer in the
                              sram. The buffer is located at FE2P_BUFFER_ADDR */
                     323     ; static xdata UCHAR ucFlashID = UNKNOWN_FLASH; /*!< Flash ID after system performs Fe2p_In
                             it. */
                     324     ; 
                     325     ; /*!
                     326     ;  * The start address of a block which we choose under directly FE2P mode. The unit is 4KB
                             .
                     327     ;  */
                     328     ; #define DAOF (FE2P_DIRECTMODE_OFFSET/4096)
                     329     ; #define DLEN (FE2P_DIRECTMODE_LEN/4)
                     330     ; 
                     331     ; #if ENABLE_DIRECT_FE2P == ON
                     332     ; /*!
                     333     ;  * The key words for FE2P mode identification.
                     334     ;  * EasyWrite will search the key words in the HEX code(or binary code) and turn on/off di
                             rect FE2P protection.
                     335     ;  */
                     336     ; static code UCHAR ucFE2PDirectModeOffset[] = {0x55, 0xaa, 0x66, 0x99, 'D', 'A', 'O', 'F',
                              DAOF, 0x54};
                     337     ; #endif
                     338     ; /*!
                     339     ;  * Fe2p information for easyWrite tool auto detect function.
                     340     ;  */
                     341     ; static code UCHAR ucFE2PAutoDetectInfo[] = {0x55, 0xaa, 0x66, 0x99, 'D', 'L', 'E', 'N', D
                             LEN,'W','P',FLASH_WP_PORT,FLASH_WP_BIT,FLASH_WP_ACTIVE};
                     342     ; 
                     343     ; //******************************************************************************
                     344     ; // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
                     345     ; //******************************************************************************
                     346     ; 
                     347     ; //******************************************************************************
                     348     ; // S T A T I C   F U N C T I O N   P R O T O T Y P E S
                     349     ; //******************************************************************************
                     350     ; static UCHAR FE2P_CheckValidBlock(void);
                     351     ; static void FLASH_WP_ON(void);
                     352     ; static void FLASH_WP_OFF(void);
                     353     ; static void FLASH_InitProtection(void);
                     354     ; static void FLASH_ProtectOff(USHRT offset);
                     355     ; static void FLASH_ProtectOn(void);
                     356     ; 
                     357     ; //******************************************************************************
                     358     ; // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
                     359     ; //******************************************************************************
                     360     ; 
                     361     ; //******************************************************************************
                     362     ; // F U N C T I O N   B O D Y S
                     363     ; //******************************************************************************
                     364     ; 
                     365     ; /**************************************************************************//**
                     366     ;  * Initialize the Flash protection (set status register and address).
                     367     ;  ******************************************************************************/
                     368     
----                 369             RSEG  ?PR?FE2P_API
0000                 370     Com008B:
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE     7

0000                 371     L?0140:
                     372             USING   0
0000 7B3C            373             MOV     R3,#03CH
0002 900000   F      374             MOV     DPTR,#temp?1261
0005                 375     L?0141:
0005 E4              376             CLR     A
0006 FA              377             MOV     R2,A
0007 F9              378             MOV     R1,A
0008 F8              379             MOV     R0,A
0009                 380     L?0142:
0009 E0              381             MOVX    A,@DPTR
000A FC              382             MOV     R4,A
000B A3              383             INC     DPTR
000C E0              384             MOVX    A,@DPTR
000D FD              385             MOV     R5,A
000E A3              386             INC     DPTR
000F E0              387             MOVX    A,@DPTR
0010 FE              388             MOV     R6,A
0011 A3              389             INC     DPTR
0012 E0              390             MOVX    A,@DPTR
0013 22              391             RET     
0014                 392     L?0144:
                     393             USING   0
0014                 394     L?0145:
0014 7B01            395             MOV     R3,#01H
0016 7AA8            396             MOV     R2,#HIGH (ucFE2P_Buffer)
0018 7900            397             MOV     R1,#LOW (ucFE2P_Buffer)
001A 900000   F      398             MOV     DPTR,#?_Fe2p_PageRead?BYTE+05H
001D                 399     L?0146:
001D 7408            400             MOV     A,#08H
001F F0              401             MOVX    @DPTR,A
0020 A3              402             INC     DPTR
0021 E4              403             CLR     A
0022 F0              404             MOVX    @DPTR,A
0023 FF              405             MOV     R7,A
0024 22              406             RET     
0025                 407     L?0149:
                     408             USING   0
0025 900000   F      409             MOV     DPTR,#offset?753
0028 F0              410             MOVX    @DPTR,A
0029 A3              411             INC     DPTR
002A E4              412             CLR     A
002B F0              413             MOVX    @DPTR,A
002C A3              414             INC     DPTR
002D 22              415             RET     
002E                 416     L?0150:
                     417             USING   0
002E A804            418             MOV     R0,AR4
0030 A905            419             MOV     R1,AR5
0032 AA06            420             MOV     R2,AR6
0034 AB07            421             MOV     R3,AR7
0036 E0              422             MOVX    A,@DPTR
0037 FF              423             MOV     R7,A
0038 E4              424             CLR     A
0039 FC              425             MOV     R4,A
003A FD              426             MOV     R5,A
003B FE              427             MOV     R6,A
003C EB              428             MOV     A,R3
003D 2F              429             ADD     A,R7
003E FF              430             MOV     R7,A
003F EE              431             MOV     A,R6
0040 3A              432             ADDC    A,R2
0041                 433     L?0151:
0041 FE              434             MOV     R6,A
0042 ED              435             MOV     A,R5
0043 39              436             ADDC    A,R1
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE     8

0044 FD              437             MOV     R5,A
0045 EC              438             MOV     A,R4
0046 38              439             ADDC    A,R0
0047 FC              440             MOV     R4,A
0048 22              441             RET     
0049                 442     L?0152:
                     443             USING   0
0049 900000   F      444             MOV     DPTR,#offset?753
004C F0              445             MOVX    @DPTR,A
004D A3              446             INC     DPTR
004E E4              447             CLR     A
004F F0              448             MOVX    @DPTR,A
0050 A3              449             INC     DPTR
0051 22              450             RET     
0052                 451     L?0153:
                     452             USING   0
0052                 453     L?0154:
0052 900000   F      454             MOV     DPTR,#CLR_WDT
0055 7455            455             MOV     A,#055H
0057 F0              456             MOVX    @DPTR,A
0058 22              457             RET     
0059                 458     L?0157:
                     459             USING   0
0059 900000   F      460             MOV     DPTR,#offset?753
005C F0              461             MOVX    @DPTR,A
005D A3              462             INC     DPTR
005E E4              463             CLR     A
005F F0              464             MOVX    @DPTR,A
0060 A3              465             INC     DPTR
0061 22              466             RET     
0062                 467     L?0158:
                     468             USING   0
0062                 469     L?0159:
0062 900000   F      470             MOV     DPTR,#temp?1261
0065 020000   F      471             LJMP    ?C?LSTXDATA
0068                 472     L?0160:
                     473             USING   0
0068 EE              474             MOV     A,R6
0069 F0              475             MOVX    @DPTR,A
006A A3              476             INC     DPTR
006B EF              477             MOV     A,R7
006C F0              478             MOVX    @DPTR,A
006D A3              479             INC     DPTR
006E EC              480             MOV     A,R4
006F F0              481             MOVX    @DPTR,A
0070 A3              482             INC     DPTR
0071 ED              483             MOV     A,R5
0072 F0              484             MOVX    @DPTR,A
0073 22              485             RET     
0074                 486     L?0161:
                     487             USING   0
0074 E0              488             MOVX    A,@DPTR
0075 F8              489             MOV     R0,A
0076 A3              490             INC     DPTR
0077 E0              491             MOVX    A,@DPTR
0078 F9              492             MOV     R1,A
0079 A3              493             INC     DPTR
007A E0              494             MOVX    A,@DPTR
007B FA              495             MOV     R2,A
007C A3              496             INC     DPTR
007D E0              497             MOVX    A,@DPTR
007E FB              498             MOV     R3,A
007F 22              499             RET     
0080                 500     L?0162:
                     501             USING   0
0080 FC              502             MOV     R4,A
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE     9

0081                 503     L?0163:
0081 900000   F      504             MOV     DPTR,#temp?1060
0084 020000   F      505             LJMP    ?C?LSTXDATA
0087                 506     L?0164:
                     507             USING   0
0087 FF              508             MOV     R7,A
0088                 509     L?0165:
0088 E4              510             CLR     A
0089 7B1E            511             MOV     R3,#01EH
008B FA              512             MOV     R2,A
008C F9              513             MOV     R1,A
008D F8              514             MOV     R0,A
008E 22              515             RET     
008F                 516     L?0166:
                     517             USING   0
008F                 518     L?0167:
008F E0              519             MOVX    A,@DPTR
0090 FE              520             MOV     R6,A
0091 A3              521             INC     DPTR
0092 E0              522             MOVX    A,@DPTR
0093 FF              523             MOV     R7,A
0094 C3              524             CLR     C
0095 22              525             RET     
0096                 526     L?0168:
                     527             USING   0
0096 24FF            528             ADD     A,#0FFH
0098 FF              529             MOV     R7,A
0099 E0              530             MOVX    A,@DPTR
009A 3407            531             ADDC    A,#07H
009C FE              532             MOV     R6,A
009D E4              533             CLR     A
009E FB              534             MOV     R3,A
009F 22              535             RET     
                     536     ; END OF Com008B
                     537     
                     538     ; static void FLASH_InitProtection(void)
                     539     
----                 540             RSEG  ?PR?FLASH_InitProtection?FE2P_API
0000                 541     FLASH_InitProtection:
                     542             USING   0
                     543                             ; SOURCE LINE # 101
                     544     ; {
                     545                             ; SOURCE LINE # 102
                     546     ;     // Use the follow coding way to avoid compile warning when ENABLE_DIRECT_FE2P is OFF
                     547     ;     UCHAR opt = ENABLE_DIRECT_FE2P;
                     548                             ; SOURCE LINE # 104
                     549     ;---- Variable 'opt?040' assigned to Register 'R7' ----
0000 E4              550             CLR     A
0001 FF              551             MOV     R7,A
                     552     ; 
                     553     ;     if (opt == ON) {
                     554                             ; SOURCE LINE # 106
0002 B40108          555             CJNE    A,#01H,?C0001
                     556     ;         Fe2p_SetOffset(FE2P_DIRECTMODE_OFFSET);
                     557                             ; SOURCE LINE # 107
0005 7EC0            558             MOV     R6,#0C0H
0007 7D03            559             MOV     R5,#03H
0009 FC              560             MOV     R4,A
000A 120000   F      561             LCALL   _Fe2p_SetOffset
                     562     ;     }
                     563                             ; SOURCE LINE # 108
000D                 564     ?C0001:
                     565     ; 
                     566     ;     FLASH_ProtectOn();
                     567                             ; SOURCE LINE # 110
000D 020000   F      568             LJMP    FLASH_ProtectOn
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    10

                     569     ; END OF FLASH_InitProtection
                     570     
                     571     ; }
                     572     ; 
                     573     ; /**************************************************************************//**
                     574     ;  * Turn off Flash protection.
                     575     ;  * Pull low the protection control pin and disable SR protection.
                     576     ;  * @param offset The offset of blocks to be protected off.
                     577     ;  ******************************************************************************/
                     578     ; static void FLASH_ProtectOff(USHRT offset)
                     579     
----                 580             RSEG  ?PR?_FLASH_ProtectOff?FE2P_API
0000                 581     _FLASH_ProtectOff:
                     582             USING   0
                     583                             ; SOURCE LINE # 118
0000 900000   F      584             MOV     DPTR,#offset?141
0003 EE              585             MOV     A,R6
0004 F0              586             MOVX    @DPTR,A
0005 A3              587             INC     DPTR
0006 EF              588             MOV     A,R7
0007 F0              589             MOVX    @DPTR,A
                     590     ; {
                     591                             ; SOURCE LINE # 119
                     592     ;     UCHAR ucFe2p_RDSR = Fe2p_RDSR();
                     593                             ; SOURCE LINE # 120
0008 120000   F      594             LCALL   Fe2p_RDSR
000B 900000   F      595             MOV     DPTR,#ucFe2p_RDSR?142
000E EF              596             MOV     A,R7
000F F0              597             MOVX    @DPTR,A
                     598     ; 
                     599     ;     switch (ucFlashID) {
                     600                             ; SOURCE LINE # 122
0010 900000   F      601             MOV     DPTR,#ucFlashID
0013 E0              602             MOVX    A,@DPTR
0014 24EB            603             ADD     A,#0EBH
0016 600C            604             JZ      ?C0005
0018 24E2            605             ADD     A,#0E2H
001A 6018            606             JZ      ?C0006
001C 24E6            607             ADD     A,#0E6H
001E 6017            608             JZ      ?C0007
0020 2439            609             ADD     A,#039H
0022 7027            610             JNZ     ?C0009
                     611     ;         case PMC_LD1M:
                     612                             ; SOURCE LINE # 123
                     613     ;         case PMC_LD2M:
                     614                             ; SOURCE LINE # 124
0024                 615     ?C0005:
                     616     ;             PMC_Sector_Lock();
                     617                             ; SOURCE LINE # 125
0024 120000   F      618             LCALL   PMC_Sector_Lock
                     619     ;             PMC_Sector_Unlock(offset & 0xF000);
                     620                             ; SOURCE LINE # 126
0027 900000   F      621             MOV     DPTR,#offset?141
002A E0              622             MOVX    A,@DPTR
002B 54F0            623             ANL     A,#0F0H
002D FE              624             MOV     R6,A
002E A3              625             INC     DPTR
002F 7F00            626             MOV     R7,#00H
0031 020000   F      627             LJMP    _PMC_Sector_Unlock
                     628     ;             break;
                     629                             ; SOURCE LINE # 127
                     630     ; #if ENABLE_DIRECT_FE2P == ON
                     631     ;         case AMIC_2M:
                     632     ;             if ((ucFe2p_RDSR & BIT7) != 0x00) {
                     633     ;                 FLASH_WP_OFF();
                     634     ;             }
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    11

                     635     ; 
                     636     ;             Fe2p_SetProtect(0x64);
                     637     ;             break;
                     638     ; #endif
                     639     ;         case MXIC_2M_2026:
                     640                             ; SOURCE LINE # 137
0034                 641     ?C0006:
                     642     ;             //if ((Fe2p_RDSR() & BIT7) != 0x00) {//v03_120317_1358_SYS#1
                     643     ;                 FLASH_WP_OFF();
                     644                             ; SOURCE LINE # 139
0034 020000   F      645             LJMP    FLASH_WP_OFF
                     646     ;            // }
                     647     ;             break;
                     648                             ; SOURCE LINE # 141
                     649     ;         case WINB_4M_W25X41CL:
                     650                             ; SOURCE LINE # 142
0037                 651     ?C0007:
                     652     ;             if ((ucFe2p_RDSR & BIT7) != 0x00) {
                     653                             ; SOURCE LINE # 143
0037 900000   F      654             MOV     DPTR,#ucFe2p_RDSR?142
003A E0              655             MOVX    A,@DPTR
003B 30E703          656             JNB     ACC.7,?C0008
                     657     ;                 FLASH_WP_OFF();
                     658                             ; SOURCE LINE # 144
003E 120000   F      659             LCALL   FLASH_WP_OFF
                     660     ;             }
                     661                             ; SOURCE LINE # 145
0041                 662     ?C0008:
                     663     ;             ucFe2p_RDSR &= ~(BIT4|BIT3|BIT2); 
                     664                             ; SOURCE LINE # 146
0041 900000   F      665             MOV     DPTR,#ucFe2p_RDSR?142
0044 E0              666             MOVX    A,@DPTR
0045 54E3            667             ANL     A,#0E3H
0047 FF              668             MOV     R7,A
0048 F0              669             MOVX    @DPTR,A
                     670     ;             Fe2p_SetProtect(ucFe2p_RDSR);          
                     671                             ; SOURCE LINE # 147
                     672     ;             break;           
                     673                             ; SOURCE LINE # 148
0049 800C            674             SJMP    ?C0118
                     675     ;         default:
                     676                             ; SOURCE LINE # 149
004B                 677     ?C0009:
                     678     ;             if ((ucFe2p_RDSR & BIT7) != 0x00) {
                     679                             ; SOURCE LINE # 150
004B 900000   F      680             MOV     DPTR,#ucFe2p_RDSR?142
004E E0              681             MOVX    A,@DPTR
004F 30E703          682             JNB     ACC.7,?C0010
                     683     ;                 FLASH_WP_OFF();
                     684                             ; SOURCE LINE # 151
0052 120000   F      685             LCALL   FLASH_WP_OFF
                     686     ;             }
                     687                             ; SOURCE LINE # 152
0055                 688     ?C0010:
                     689     ; 
                     690     ;             Fe2p_SetProtect(0x00); //Samuel-2010-03-29: For flash data protection
                     691                             ; SOURCE LINE # 154
0055 E4              692             CLR     A
0056 FF              693             MOV     R7,A
0057                 694     ?C0118:
0057 120000   F      695             LCALL   _Fe2p_SetProtect
                     696     ;             break;
                     697                             ; SOURCE LINE # 155
                     698     ;     }
                     699                             ; SOURCE LINE # 156
                     700     ; }
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    12

                     701                             ; SOURCE LINE # 157
005A                 702     ?C0011:
005A 22              703             RET     
                     704     ; END OF _FLASH_ProtectOff
                     705     
                     706     ; 
                     707     ; /**************************************************************************//**
                     708     ;  * Turn on the Flash protection.
                     709     ;  * Pull up the protection control pin and enable SR protection.
                     710     ;  ******************************************************************************/
                     711     ; static void FLASH_ProtectOn(void)
                     712     
----                 713             RSEG  ?PR?FLASH_ProtectOn?FE2P_API
0000                 714     FLASH_ProtectOn:
                     715             USING   0
                     716                             ; SOURCE LINE # 163
                     717     ; {
                     718                             ; SOURCE LINE # 164
                     719     ;     switch (ucFlashID) {
                     720                             ; SOURCE LINE # 165
0000 900000   F      721             MOV     DPTR,#ucFlashID
0003 E0              722             MOVX    A,@DPTR
0004 24EB            723             ADD     A,#0EBH
0006 600C            724             JZ      ?C0014
0008 24E2            725             ADD     A,#0E2H
000A 602A            726             JZ      ?C0012
000C 24E6            727             ADD     A,#0E6H
000E 6009            728             JZ      ?C0016
0010 2439            729             ADD     A,#039H
0012 7013            730             JNZ     ?C0019
                     731     ;         case PMC_LD1M:
                     732                             ; SOURCE LINE # 166
                     733     ;         case PMC_LD2M:
                     734                             ; SOURCE LINE # 167
0014                 735     ?C0014:
                     736     ;             PMC_Sector_Lock();
                     737                             ; SOURCE LINE # 168
0014 120000   F      738             LCALL   PMC_Sector_Lock
                     739     ;             break;
                     740                             ; SOURCE LINE # 169
0017 801D            741             SJMP    ?C0012
                     742     ;         case MXIC_2M_2026:
                     743                             ; SOURCE LINE # 170
                     744     ;             break;
                     745                             ; SOURCE LINE # 171
                     746     ;         case WINB_4M_W25X41CL:
                     747                             ; SOURCE LINE # 172
0019                 748     ?C0016:
                     749     ;             if ((Fe2p_RDSR() & BIT7) != 0x00) {
                     750                             ; SOURCE LINE # 173
0019 120000   F      751             LCALL   Fe2p_RDSR
001C EF              752             MOV     A,R7
001D 30E703          753             JNB     ACC.7,?C0017
                     754     ;                 FLASH_WP_OFF();
                     755                             ; SOURCE LINE # 174
0020 120000   F      756             LCALL   FLASH_WP_OFF
                     757     ;             }
                     758                             ; SOURCE LINE # 175
0023                 759     ?C0017:
                     760     ;             Fe2p_SetProtect(0xFC);
                     761                             ; SOURCE LINE # 176
0023 7FFC            762             MOV     R7,#0FCH
                     763     ;             break;
                     764                             ; SOURCE LINE # 177
0025 800C            765             SJMP    ?C0119
                     766     ;         case AMIC_2M:
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    13

                     767                             ; SOURCE LINE # 178
                     768     ;         default:
                     769                             ; SOURCE LINE # 179
0027                 770     ?C0019:
                     771     ;             if ((Fe2p_RDSR() & BIT7) != 0x00) {
                     772                             ; SOURCE LINE # 180
0027 120000   F      773             LCALL   Fe2p_RDSR
002A EF              774             MOV     A,R7
002B 30E703          775             JNB     ACC.7,?C0020
                     776     ;                 FLASH_WP_OFF();
                     777                             ; SOURCE LINE # 181
002E 120000   F      778             LCALL   FLASH_WP_OFF
                     779     ;             }
                     780                             ; SOURCE LINE # 182
0031                 781     ?C0020:
                     782     ;             Fe2p_SetProtect(0x9C); //Samuel-2010-03-29: For flash data protection
                     783                             ; SOURCE LINE # 183
0031 7F9C            784             MOV     R7,#09CH
0033                 785     ?C0119:
0033 120000   F      786             LCALL   _Fe2p_SetProtect
                     787     ;             break;
                     788                             ; SOURCE LINE # 184
                     789     ;     }
                     790                             ; SOURCE LINE # 185
0036                 791     ?C0012:
                     792     ;     FLASH_WP_ON(); //Samuel-2008-08-14: Enable Flash Write Protection After FE2P Write
                     793                             ; SOURCE LINE # 186
0036 020000   F      794             LJMP    FLASH_WP_ON
                     795     ; END OF FLASH_ProtectOn
                     796     
                     797     ; }
                     798     ; 
                     799     ; /**************************************************************************//**
                     800     ;  * Initialize FE2P variables and load whole configurations from flash to sram.
                     801     ;  ******************************************************************************/
                     802     ; void FE2P_RamInitialize(void)
                     803     
----                 804             RSEG  ?PR?FE2P_RamInitialize?FE2P_API
0000                 805     FE2P_RamInitialize:
                     806             USING   0
                     807                             ; SOURCE LINE # 192
                     808     ; {
                     809                             ; SOURCE LINE # 193
                     810     ;     USHRT i;
                     811     ;     //Fe2p Initial value
                     812     ;     bFE2P_Save = FALSE;
                     813                             ; SOURCE LINE # 196
0000 C200     F      814             CLR     bFE2P_Save
                     815     ;     ucFE2P_Valid_Block = 0;
                     816                             ; SOURCE LINE # 197
0002 E4              817             CLR     A
0003 900000   F      818             MOV     DPTR,#ucFE2P_Valid_Block
0006 F0              819             MOVX    @DPTR,A
                     820     ;     for (i = 0; i < 2048; i++) {
                     821                             ; SOURCE LINE # 198
                     822     ;---- Variable 'i?343' assigned to Register 'R6/R7' ----
0007                 823     ?C0022:
                     824     ;         ucFE2P_Buffer[i] = 0xFF;
                     825                             ; SOURCE LINE # 199
0007 7E08            826             MOV     R6,#08H
0009 7F00            827             MOV     R7,#00H
000B 90A800          828             MOV     DPTR,#ucFE2P_Buffer
000E 74FF            829             MOV     A,#0FFH
0010                 830     ?C0112:
0010 F0              831             MOVX    @DPTR,A
0011 A3              832             INC     DPTR
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    14

0012 DFFC            833             DJNZ    R7,?C0112
0014 DEFA            834             DJNZ    R6,?C0112
                     835     ;     }
                     836                             ; SOURCE LINE # 200
0016                 837     ?C0023:
                     838     ; 
                     839     ;     ResetWDTimer();
                     840                             ; SOURCE LINE # 202
0016 120000   F      841             LCALL   L?0153
                     842     ;     Fe2p_Set_SPI_CMD_buffer_addr(FE2P_CMD_BUFFER_ADDR);
                     843                             ; SOURCE LINE # 203
0019 7F80            844             MOV     R7,#080H
001B 7EF8            845             MOV     R6,#0F8H
001D 120000   F      846             LCALL   _Fe2p_Set_SPI_CMD_buffer_addr
                     847     ; 
                     848     ;     ucFlashID = Fe2p_Init(2);
                     849                             ; SOURCE LINE # 205
0020 7F02            850             MOV     R7,#02H
0022 120000   F      851             LCALL   _Fe2p_Init
0025 900000   F      852             MOV     DPTR,#ucFlashID
0028 EF              853             MOV     A,R7
0029 F0              854             MOVX    @DPTR,A
                     855     ;     if (ucFlashID == UNKNOWN_FLASH) { //Samuel-2010-03-29: For flash data protection
                     856                             ; SOURCE LINE # 206
002A 7003            857             JNZ     ?C0025
002C                 858     ?C0026:
                     859     ;         //If we found an unknown flash, force WDT happened.
                     860     ;         while (bFE2P_Save == 0) {};
                     861                             ; SOURCE LINE # 208
002C 3000FD   F      862             JNB     bFE2P_Save,?C0026
002F                 863     ?C0027:
                     864     ;     }
                     865                             ; SOURCE LINE # 209
002F                 866     ?C0025:
                     867     ; 
                     868     ;     FLASH_InitProtection();
                     869                             ; SOURCE LINE # 211
002F 120000   F      870             LCALL   FLASH_InitProtection
                     871     ;     Fe2p_Get_Lib_Ver();
                     872                             ; SOURCE LINE # 212
0032 120000   F      873             LCALL   Fe2p_Get_Lib_Ver
                     874     ; 
                     875     ;     ucFE2P_Valid_Block = FE2P_CheckValidBlock();
                     876                             ; SOURCE LINE # 214
0035 120000   F      877             LCALL   FE2P_CheckValidBlock
0038 900000   F      878             MOV     DPTR,#ucFE2P_Valid_Block
003B EF              879             MOV     A,R7
003C F0              880             MOVX    @DPTR,A
                     881     ;     if (ucFE2P_Valid_Block > MAXBLOCK) {
                     882                             ; SOURCE LINE # 215
003D D3              883             SETB    C
003E 9405            884             SUBB    A,#05H
0040 4007            885             JC      ?C0028
                     886     ;         ucFE2P_Valid_Block = 0;
                     887                             ; SOURCE LINE # 216
0042 E4              888             CLR     A
0043 F0              889             MOVX    @DPTR,A
                     890     ;         NvramInitialize(NVRAM_UPDATE_ALL);
                     891                             ; SOURCE LINE # 217
0044 7F01            892             MOV     R7,#01H
0046 020000   F      893             LJMP    _NvramInitialize
                     894     ;     }
                     895                             ; SOURCE LINE # 218
0049                 896     ?C0028:
                     897     ;     else {
                     898                             ; SOURCE LINE # 219
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    15

                     899     ;         if (ucFE2P_Valid_Block == 0) {
                     900                             ; SOURCE LINE # 220
0049 900000   F      901             MOV     DPTR,#ucFE2P_Valid_Block
004C E0              902             MOVX    A,@DPTR
004D 7007            903             JNZ     ?C0030
                     904     ;             Fe2p_PageRead(BLOCK0, ucFE2P_Buffer, 2048); //block0 first 2k
                     905                             ; SOURCE LINE # 221
004F 120000   F      906             LCALL   L?0144
0052 FE              907             MOV     R6,A
                     908     ;         }
                     909                             ; SOURCE LINE # 222
0053 020000   F      910             LJMP    ?C0126
0056                 911     ?C0030:
                     912     ;         else if (ucFE2P_Valid_Block == 1) {
                     913                             ; SOURCE LINE # 223
0056 900000   F      914             MOV     DPTR,#ucFE2P_Valid_Block
0059 E0              915             MOVX    A,@DPTR
005A B40108          916             CJNE    A,#01H,?C0032
                     917     ;             Fe2p_PageRead(BLOCK1, ucFE2P_Buffer, 2048); //block1 first 2k
                     918                             ; SOURCE LINE # 224
005D 120000   F      919             LCALL   L?0144
0060 7E18            920             MOV     R6,#018H
0062                 921     ?C0120:
                     922     ;         }
                     923                             ; SOURCE LINE # 225
0062 020000   F      924             LJMP    ?C0126
0065                 925     ?C0032:
                     926     ;         else if (ucFE2P_Valid_Block == 2) {
                     927                             ; SOURCE LINE # 226
0065 900000   F      928             MOV     DPTR,#ucFE2P_Valid_Block
0068 E0              929             MOVX    A,@DPTR
0069 B40207          930             CJNE    A,#02H,?C0034
                     931     ;             Fe2p_PageRead(BLOCK2, ucFE2P_Buffer, 2048); //block0 second 2k
                     932                             ; SOURCE LINE # 227
006C 120000   F      933             LCALL   L?0145
006F 7E08            934             MOV     R6,#08H
0071                 935     ?C0121:
                     936     ;         }
                     937                             ; SOURCE LINE # 228
0071 8046            938             SJMP    ?C0126
0073                 939     ?C0034:
                     940     ;         else if (ucFE2P_Valid_Block == 3) {
                     941                             ; SOURCE LINE # 229
0073 900000   F      942             MOV     DPTR,#ucFE2P_Valid_Block
0076 E0              943             MOVX    A,@DPTR
0077 B40307          944             CJNE    A,#03H,?C0036
                     945     ;             Fe2p_PageRead(BLOCK3, ucFE2P_Buffer, 2048); //block0 second 2k
                     946                             ; SOURCE LINE # 230
007A 120000   F      947             LCALL   L?0145
007D 7E20            948             MOV     R6,#020H
007F                 949     ?C0122:
                     950     ;         }
                     951                             ; SOURCE LINE # 231
007F 8038            952             SJMP    ?C0126
0081                 953     ?C0036:
                     954     ;         else if (ucFE2P_Valid_Block == 4) {
                     955                             ; SOURCE LINE # 232
0081 900000   F      956             MOV     DPTR,#ucFE2P_Valid_Block
0084 E0              957             MOVX    A,@DPTR
0085 B40407          958             CJNE    A,#04H,?C0038
                     959     ;             Fe2p_PageRead(BLOCK4, ucFE2P_Buffer, 2048); //block0 second 2k
                     960                             ; SOURCE LINE # 233
0088 120000   F      961             LCALL   L?0145
008B 7E10            962             MOV     R6,#010H
008D                 963     ?C0123:
                     964     ;         }
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    16

                     965                             ; SOURCE LINE # 234
008D 802A            966             SJMP    ?C0126
008F                 967     ?C0038:
                     968     ;         else if (ucFE2P_Valid_Block == 5) {
                     969                             ; SOURCE LINE # 235
008F 900000   F      970             MOV     DPTR,#ucFE2P_Valid_Block
0092 E0              971             MOVX    A,@DPTR
0093 B40507          972             CJNE    A,#05H,?C0040
                     973     ;             Fe2p_PageRead(BLOCK5, ucFE2P_Buffer, 2048); //block0 second 2k
                     974                             ; SOURCE LINE # 236
0096 120000   F      975             LCALL   L?0145
0099 7E28            976             MOV     R6,#028H
009B                 977     ?C0124:
                     978     ;         }
                     979                             ; SOURCE LINE # 237
009B 801C            980             SJMP    ?C0126
009D                 981     ?C0040:
                     982     ;         else if (ucFE2P_Valid_Block == 6) {
                     983                             ; SOURCE LINE # 238
009D 900000   F      984             MOV     DPTR,#ucFE2P_Valid_Block
00A0 E0              985             MOVX    A,@DPTR
00A1 7B01            986             MOV     R3,#01H
00A3 7AA8            987             MOV     R2,#HIGH (ucFE2P_Buffer)
00A5 7900            988             MOV     R1,#LOW (ucFE2P_Buffer)
00A7 900000   F      989             MOV     DPTR,#?_Fe2p_PageRead?BYTE+05H
00AA B40607          990             CJNE    A,#06H,?C0042
                     991     ;             Fe2p_PageRead(BLOCK6, ucFE2P_Buffer, 2048); //block0 second 2k
                     992                             ; SOURCE LINE # 239
00AD 120000   F      993             LCALL   L?0146
00B0 7E30            994             MOV     R6,#030H
00B2                 995     ?C0125:
                     996     ;         }
                     997                             ; SOURCE LINE # 240
00B2 8005            998             SJMP    ?C0126
00B4                 999     ?C0042:
                    1000     ;         else {
                    1001                             ; SOURCE LINE # 241
                    1002     ;             Fe2p_PageRead(BLOCK7, ucFE2P_Buffer, 2048); //block1 second 2k
                    1003                             ; SOURCE LINE # 242
00B4 120000   F     1004             LCALL   L?0146
00B7 7E38           1005             MOV     R6,#038H
00B9                1006     ?C0126:
00B9 120000   F     1007             LCALL   _Fe2p_PageRead
                    1008     ;         }
                    1009                             ; SOURCE LINE # 243
                    1010     ;     }
                    1011                             ; SOURCE LINE # 244
                    1012     ; }
                    1013                             ; SOURCE LINE # 245
00BC                1014     ?C0044:
00BC 22             1015             RET     
                    1016     ; END OF FE2P_RamInitialize
                    1017     
                    1018     ; 
                    1019     ; #if ENABLE_FE2P == ON && USE_INTERNAL_EDID == 1
                    1020     ; #if MD_ENABLE_AO_DETECT == ON
                    1021     ; void FE2P_LoadDDC(void)
                    1022     ; {
                    1023     ; //    USHRT i;
                    1024     ;     //Fe2p Initial value
                    1025     ;     bFE2P_Save = FALSE;
                    1026     ;     ucFE2P_Valid_Block = 0;
                    1027     ; //    for (i = 0; i < 768; i++) {
                    1028     ; //        ucFE2P_Buffer[i] = 0xFF;
                    1029     ; //    }
                    1030     ; 
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    17

                    1031     ;     ResetWDTimer();
                    1032     ;     Fe2p_Set_SPI_CMD_buffer_addr(FE2P_CMD_BUFFER_ADDR);
                    1033     ; 
                    1034     ;     ucFlashID = PMC_2M;//Fe2p_Init(2);
                    1035     ; /*
                    1036     ;     if (ucFlashID == UNKNOWN_FLASH) { //Samuel-2010-03-29: For flash data protection
                    1037     ;         //If we found an unknown flash, force WDT happened.
                    1038     ;         while (bFE2P_Save == 0) {};
                    1039     ;     }
                    1040     ; */
                    1041     ;     //FLASH_InitProtection();
                    1042     ; #if ENABLE_DIRECT_FE2P == ON
                    1043     ;     Fe2p_SetOffset(FE2P_DIRECTMODE_OFFSET);
                    1044     ; #endif
                    1045     ;     Fe2p_Get_Lib_Ver();
                    1046     ; 
                    1047     ;     ucFE2P_Valid_Block = FE2P_CheckValidBlock();
                    1048     ; //    ucFE2P_Valid_Block = 0;
                    1049     ;     if (ucFE2P_Valid_Block > MAXBLOCK) {
                    1050     ;         ucFE2P_Valid_Block = 0;
                    1051     ;         NvramInitialize(NVRAM_UPDATE_ALL);
                    1052     ;     }
                    1053     ;     else {
                    1054     ; //        McuSetIOBit(MCU_PORT_C, BIT6, LOW);
                    1055     ;         if (ucFE2P_Valid_Block == 0) {
                    1056     ; //            Fe2p_PageRead(BLOCK0+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDID_A
                             REA); //block0 VGA
                    1057     ; //            Fe2p_PageRead(BLOCK0+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDID_A
                             REA); //block0 DVI
                    1058     ; //            Fe2p_PageRead(BLOCK0+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_EDID
                             _AREA); //block0 HDMI
                    1059     ;             Fe2p_CustomCmdRead(BLOCK0+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDI
                             D_AREA); //block0 VGA
                    1060     ;             Fe2p_CustomCmdRead(BLOCK0+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDI
                             D_AREA); //block0 DVI
                    1061     ;             Fe2p_CustomCmdRead(BLOCK0+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_E
                             DID_AREA); //block0 HDMI
                    1062     ;         }
                    1063     ;         else if (ucFE2P_Valid_Block == 1) {
                    1064     ; //            Fe2p_PageRead(BLOCK1+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDID_A
                             REA); //block0 VGA
                    1065     ; //            Fe2p_PageRead(BLOCK1+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDID_A
                             REA); //block0 DVI
                    1066     ; //            Fe2p_PageRead(BLOCK1+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_EDID
                             _AREA); //block0 HDMI
                    1067     ;             Fe2p_CustomCmdRead(BLOCK1+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDI
                             D_AREA); //block0 VGA
                    1068     ;             Fe2p_CustomCmdRead(BLOCK1+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDI
                             D_AREA); //block0 DVI
                    1069     ;             Fe2p_CustomCmdRead(BLOCK1+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_E
                             DID_AREA); //block0 HDMI
                    1070     ;         }
                    1071     ;         else if (ucFE2P_Valid_Block == 2) {
                    1072     ; //            Fe2p_PageRead(BLOCK2+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDID_A
                             REA); //block0 VGA
                    1073     ; //            Fe2p_PageRead(BLOCK2+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDID_A
                             REA); //block0 DVI
                    1074     ; //            Fe2p_PageRead(BLOCK2+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_EDID
                             _AREA); //block0 HDMI
                    1075     ;             Fe2p_CustomCmdRead(BLOCK2+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDI
                             D_AREA); //block0 VGA
                    1076     ;             Fe2p_CustomCmdRead(BLOCK2+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDI
                             D_AREA); //block0 DVI
                    1077     ;             Fe2p_CustomCmdRead(BLOCK2+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_E
                             DID_AREA); //block0 HDMI
                    1078     ;         }
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    18

                    1079     ;         else if (ucFE2P_Valid_Block == 3) {
                    1080     ; //            Fe2p_PageRead(BLOCK3+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDID_A
                             REA); //block0 VGA
                    1081     ; //            Fe2p_PageRead(BLOCK3+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDID_A
                             REA); //block0 DVI
                    1082     ; //            Fe2p_PageRead(BLOCK3+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_EDID
                             _AREA); //block0 HDMI
                    1083     ;             Fe2p_CustomCmdRead(BLOCK3+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDI
                             D_AREA); //block0 VGA
                    1084     ;             Fe2p_CustomCmdRead(BLOCK3+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDI
                             D_AREA); //block0 DVI
                    1085     ;             Fe2p_CustomCmdRead(BLOCK3+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_E
                             DID_AREA); //block0 HDMI
                    1086     ;         }
                    1087     ;         else if (ucFE2P_Valid_Block == 4) {
                    1088     ; //            Fe2p_PageRead(BLOCK4+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDID_A
                             REA); //block0 VGA
                    1089     ; //            Fe2p_PageRead(BLOCK4+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDID_A
                             REA); //block0 DVI
                    1090     ; //            Fe2p_PageRead(BLOCK4+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_EDID
                             _AREA); //block0 HDMI
                    1091     ;             Fe2p_CustomCmdRead(BLOCK4+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDI
                             D_AREA); //block0 VGA
                    1092     ;             Fe2p_CustomCmdRead(BLOCK4+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDI
                             D_AREA); //block0 DVI
                    1093     ;             Fe2p_CustomCmdRead(BLOCK4+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_E
                             DID_AREA); //block0 HDMI
                    1094     ;         }
                    1095     ;         else if (ucFE2P_Valid_Block == 5) {
                    1096     ; //            Fe2p_PageRead(BLOCK5+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDID_A
                             REA); //block0 VGA
                    1097     ; //            Fe2p_PageRead(BLOCK5+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDID_A
                             REA); //block0 DVI
                    1098     ; //            Fe2p_PageRead(BLOCK5+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_EDID
                             _AREA); //block0 HDMI
                    1099     ;             Fe2p_CustomCmdRead(BLOCK5+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDI
                             D_AREA); //block0 VGA
                    1100     ;             Fe2p_CustomCmdRead(BLOCK5+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDI
                             D_AREA); //block0 DVI
                    1101     ;             Fe2p_CustomCmdRead(BLOCK5+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_E
                             DID_AREA); //block0 HDMI
                    1102     ;         }
                    1103     ;         else if (ucFE2P_Valid_Block == 6) {
                    1104     ; //            Fe2p_PageRead(BLOCK6+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDID_A
                             REA); //block0 VGA
                    1105     ; //            Fe2p_PageRead(BLOCK6+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDID_A
                             REA); //block0 DVI
                    1106     ; //            Fe2p_PageRead(BLOCK6+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_EDID
                             _AREA); //block0 HDMI
                    1107     ;             Fe2p_CustomCmdRead(BLOCK6+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDI
                             D_AREA); //block0 VGA
                    1108     ;             Fe2p_CustomCmdRead(BLOCK6+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDI
                             D_AREA); //block0 DVI
                    1109     ;             Fe2p_CustomCmdRead(BLOCK6+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_E
                             DID_AREA); //block0 HDMI
                    1110     ;         }
                    1111     ;         else {
                    1112     ; //            Fe2p_PageRead(BLOCK7+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDID_A
                             REA); //block0 VGA
                    1113     ; //            Fe2p_PageRead(BLOCK7+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDID_A
                             REA); //block0 DVI
                    1114     ; //            Fe2p_PageRead(BLOCK7+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_EDID
                             _AREA); //block0 HDMI
                    1115     ;             Fe2p_CustomCmdRead(BLOCK7+NVRAM_VGA_EDID_ADDR, EDID_SRAM_BUFF0, NVRAM_VGA_EDI
                             D_AREA); //block0 VGA
                    1116     ;             Fe2p_CustomCmdRead(BLOCK7+NVRAM_DVI_EDID_ADDR, EDID_SRAM_BUFF1, NVRAM_DVI_EDI
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    19

                             D_AREA); //block0 DVI
                    1117     ;             Fe2p_CustomCmdRead(BLOCK7+NVRAM_HDMI_EDID_ADDR, EDID_SRAM_BUFF3, NVRAM_HDMI_E
                             DID_AREA); //block0 HDMI
                    1118     ;         }
                    1119     ; //        McuSetIOBit(MCU_PORT_C, BIT6, HIGH);
                    1120     ;     }
                    1121     ; }
                    1122     ; #endif
                    1123     ; #endif
                    1124     ; /**************************************************************************//**
                    1125     ;  * Check FE2P blocks is valid or not.
                    1126     ;  * @return The first valid block (The value is one of 0 to 7). If there is no valid block
                             , the value will be 0xFF.
                    1127     ;  ******************************************************************************/
                    1128     ; UCHAR FE2P_CheckValidBlock(void)
                    1129     
----                1130             RSEG  ?PR?FE2P_CheckValidBlock?FE2P_API
0000                1131     FE2P_CheckValidBlock:
                    1132             USING   0
                    1133                             ; SOURCE LINE # 356
                    1134     ; {
                    1135                             ; SOURCE LINE # 357
                    1136     ;     UCHAR Dat;
                    1137     ;     Fe2p_ByteRead(VALID_FLAG_ADDR, &Dat);
                    1138                             ; SOURCE LINE # 359
0000 7E07           1139             MOV     R6,#07H
                    1140     ;     if (Dat == 0x55) {
                    1141                             ; SOURCE LINE # 360
0002 120000   F     1142             LCALL   L?0143
0005 B45503         1143             CJNE    A,#055H,?C0045
                    1144     ;         return 0;
                    1145                             ; SOURCE LINE # 361
0008 7F00           1146             MOV     R7,#00H
000A 22             1147             RET     
                    1148     ;     }
                    1149                             ; SOURCE LINE # 362
000B                1150     ?C0045:
                    1151     ; 
                    1152     ;     Fe2p_ByteRead(VALID_FLAG_ADDR + BLOCK1, &Dat);
                    1153                             ; SOURCE LINE # 364
000B 7E1F           1154             MOV     R6,#01FH
                    1155     ;     if (Dat == 0x55) {
                    1156                             ; SOURCE LINE # 365
000D 120000   F     1157             LCALL   L?0143
0010 B45503         1158             CJNE    A,#055H,?C0047
                    1159     ;         return 1;
                    1160                             ; SOURCE LINE # 366
0013 7F01           1161             MOV     R7,#01H
0015 22             1162             RET     
                    1163     ;     }
                    1164                             ; SOURCE LINE # 367
0016                1165     ?C0047:
                    1166     ; 
                    1167     ;     Fe2p_ByteRead(VALID_FLAG_ADDR + BLOCK2, &Dat);
                    1168                             ; SOURCE LINE # 369
0016 7E0F           1169             MOV     R6,#0FH
                    1170     ;     if (Dat == 0x55) {
                    1171                             ; SOURCE LINE # 370
0018 120000   F     1172             LCALL   L?0147
001B B45503         1173             CJNE    A,#055H,?C0048
                    1174     ;         return 2;
                    1175                             ; SOURCE LINE # 371
001E 7F02           1176             MOV     R7,#02H
0020 22             1177             RET     
                    1178     ;     }
                    1179                             ; SOURCE LINE # 372
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    20

0021                1180     ?C0048:
                    1181     ; 
                    1182     ;     Fe2p_ByteRead(VALID_FLAG_ADDR + BLOCK3, &Dat);
                    1183                             ; SOURCE LINE # 374
0021 7E27           1184             MOV     R6,#027H
                    1185     ;     if (Dat == 0x55) {
                    1186                             ; SOURCE LINE # 375
0023 120000   F     1187             LCALL   L?0147
0026 B45503         1188             CJNE    A,#055H,?C0049
                    1189     ;         return 3;
                    1190                             ; SOURCE LINE # 376
0029 7F03           1191             MOV     R7,#03H
002B 22             1192             RET     
                    1193     ;     }
                    1194                             ; SOURCE LINE # 377
002C                1195     ?C0049:
                    1196     ; 
                    1197     ;     Fe2p_ByteRead(VALID_FLAG_ADDR + BLOCK4, &Dat);
                    1198                             ; SOURCE LINE # 379
002C 7E17           1199             MOV     R6,#017H
                    1200     ;     if (Dat == 0x55) {
                    1201                             ; SOURCE LINE # 380
002E 120000   F     1202             LCALL   L?0148
0031 B45503         1203             CJNE    A,#055H,?C0050
                    1204     ;         return 4;
                    1205                             ; SOURCE LINE # 381
0034 7F04           1206             MOV     R7,#04H
0036 22             1207             RET     
                    1208     ;     }
                    1209                             ; SOURCE LINE # 382
0037                1210     ?C0050:
                    1211     ; 
                    1212     ;     Fe2p_ByteRead(VALID_FLAG_ADDR + BLOCK5, &Dat);
                    1213                             ; SOURCE LINE # 384
0037 7E2F           1214             MOV     R6,#02FH
                    1215     ;     if (Dat == 0x55) {
                    1216                             ; SOURCE LINE # 385
0039 120000   F     1217             LCALL   L?0148
003C B45503         1218             CJNE    A,#055H,?C0051
                    1219     ;         return 5;
                    1220                             ; SOURCE LINE # 386
003F 7F05           1221             MOV     R7,#05H
0041 22             1222             RET     
                    1223     ;     }
                    1224                             ; SOURCE LINE # 387
0042                1225     ?C0051:
                    1226     ; 
                    1227     ;     Fe2p_ByteRead(VALID_FLAG_ADDR + BLOCK6, &Dat);
                    1228                             ; SOURCE LINE # 389
0042 7E37           1229             MOV     R6,#037H
                    1230     ;     if (Dat == 0x55) {
                    1231                             ; SOURCE LINE # 390
0044 120000   F     1232             LCALL   L?0156
0047 B45503         1233             CJNE    A,#055H,?C0052
                    1234     ;         return 6;
                    1235                             ; SOURCE LINE # 391
004A 7F06           1236             MOV     R7,#06H
004C 22             1237             RET     
                    1238     ;     }
                    1239                             ; SOURCE LINE # 392
004D                1240     ?C0052:
                    1241     ; 
                    1242     ;     Fe2p_ByteRead(VALID_FLAG_ADDR + BLOCK7, &Dat);
                    1243                             ; SOURCE LINE # 394
004D 7E3F           1244             MOV     R6,#03FH
                    1245     ;     if (Dat == 0x55) {
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    21

                    1246                             ; SOURCE LINE # 395
004F 120000   F     1247             LCALL   L?0156
0052 B45503         1248             CJNE    A,#055H,?C0053
                    1249     ;         return 7;
                    1250                             ; SOURCE LINE # 396
0055 7F07           1251             MOV     R7,#07H
0057 22             1252             RET     
                    1253     ;     }
                    1254                             ; SOURCE LINE # 397
0058                1255     ?C0053:
                    1256     ;     return 0xFF; //FE2P block damage
                    1257                             ; SOURCE LINE # 398
0058 7FFF           1258             MOV     R7,#0FFH
                    1259     ; }
                    1260                             ; SOURCE LINE # 399
005A                1261     ?C0046:
005A 22             1262             RET     
005B                1263     L?0143:
005B 7B01           1264             MOV     R3,#01H
005D 7A00     F     1265             MOV     R2,#HIGH (Dat?444)
005F 7900     F     1266             MOV     R1,#LOW (Dat?444)
0061 7FFF           1267             MOV     R7,#0FFH
0063 120000   F     1268             LCALL   _Fe2p_ByteRead
0066 900000   F     1269             MOV     DPTR,#Dat?444
0069 E0             1270             MOVX    A,@DPTR
006A 22             1271             RET     
006B                1272     L?0147:
006B 7B01           1273             MOV     R3,#01H
006D 7A00     F     1274             MOV     R2,#HIGH (Dat?444)
006F 7900     F     1275             MOV     R1,#LOW (Dat?444)
0071 7FFF           1276             MOV     R7,#0FFH
0073 120000   F     1277             LCALL   _Fe2p_ByteRead
0076 900000   F     1278             MOV     DPTR,#Dat?444
0079 E0             1279             MOVX    A,@DPTR
007A 22             1280             RET     
007B                1281     L?0148:
007B 7B01           1282             MOV     R3,#01H
007D 7A00     F     1283             MOV     R2,#HIGH (Dat?444)
007F 7900     F     1284             MOV     R1,#LOW (Dat?444)
0081 7FFF           1285             MOV     R7,#0FFH
0083 120000   F     1286             LCALL   _Fe2p_ByteRead
0086 900000   F     1287             MOV     DPTR,#Dat?444
0089 E0             1288             MOVX    A,@DPTR
008A 22             1289             RET     
008B                1290     L?0156:
008B 7B01           1291             MOV     R3,#01H
008D 7A00     F     1292             MOV     R2,#HIGH (Dat?444)
008F 7900     F     1293             MOV     R1,#LOW (Dat?444)
0091 7FFF           1294             MOV     R7,#0FFH
0093 120000   F     1295             LCALL   _Fe2p_ByteRead
0096 900000   F     1296             MOV     DPTR,#Dat?444
0099 E0             1297             MOVX    A,@DPTR
009A 22             1298             RET     
                    1299     ; END OF FE2P_CheckValidBlock
                    1300     
                    1301     ; 
                    1302     ; /**************************************************************************//**
                    1303     ;  * Write data to FE2P sram
                    1304     ;  * @param Addr   The address where the data is stored.
                    1305     ;  * @param Length Number of data to be written.
                    1306     ;  * @param Ptr    The pointer to data
                    1307     ;  ******************************************************************************/
                    1308     ; void FE2P_NvramWrite(USHRT Addr, USHRT Length, UCHAR *Ptr)
                    1309     
----                1310             RSEG  ?PR?_FE2P_NvramWrite?FE2P_API
0000                1311     _FE2P_NvramWrite:
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    22

                    1312             USING   0
                    1313                             ; SOURCE LINE # 407
0000 900000   F     1314             MOV     DPTR,#Addr?545
0003 120000   F     1315             LCALL   L?0160
0006 A3             1316             INC     DPTR
0007 EB             1317             MOV     A,R3
0008 F0             1318             MOVX    @DPTR,A
0009 A3             1319             INC     DPTR
000A EA             1320             MOV     A,R2
000B F0             1321             MOVX    @DPTR,A
000C A3             1322             INC     DPTR
000D E9             1323             MOV     A,R1
000E F0             1324             MOVX    @DPTR,A
                    1325     ; {
                    1326                             ; SOURCE LINE # 408
                    1327     ;     USHRT i;
                    1328     ;     for (i = 0; i < Length; i++) {
                    1329                             ; SOURCE LINE # 410
000F E4             1330             CLR     A
0010 A3             1331             INC     DPTR
0011 F0             1332             MOVX    @DPTR,A
0012 A3             1333             INC     DPTR
0013 F0             1334             MOVX    @DPTR,A
0014                1335     ?C0054:
0014 900000   F     1336             MOV     DPTR,#Length?546
0017 E0             1337             MOVX    A,@DPTR
0018 FE             1338             MOV     R6,A
0019 A3             1339             INC     DPTR
001A E0             1340             MOVX    A,@DPTR
001B FF             1341             MOV     R7,A
001C 900000   F     1342             MOV     DPTR,#i?548
001F E0             1343             MOVX    A,@DPTR
0020 FC             1344             MOV     R4,A
0021 A3             1345             INC     DPTR
0022 E0             1346             MOVX    A,@DPTR
0023 FD             1347             MOV     R5,A
0024 C3             1348             CLR     C
0025 9F             1349             SUBB    A,R7
0026 EC             1350             MOV     A,R4
0027 9E             1351             SUBB    A,R6
0028 5041           1352             JNC     ?C0055
                    1353     ;         ucFE2P_Buffer[Addr + i] = *Ptr;
                    1354                             ; SOURCE LINE # 411
002A 900000   F     1355             MOV     DPTR,#Ptr?547
002D E0             1356             MOVX    A,@DPTR
002E FB             1357             MOV     R3,A
002F A3             1358             INC     DPTR
0030 E0             1359             MOVX    A,@DPTR
0031 FA             1360             MOV     R2,A
0032 A3             1361             INC     DPTR
0033 E0             1362             MOVX    A,@DPTR
0034 F9             1363             MOV     R1,A
0035 120000   F     1364             LCALL   ?C?CLDPTR
0038 FF             1365             MOV     R7,A
0039 900000   F     1366             MOV     DPTR,#Addr?545+01H
003C E0             1367             MOVX    A,@DPTR
003D 2D             1368             ADD     A,R5
003E FD             1369             MOV     R5,A
003F 900000   F     1370             MOV     DPTR,#Addr?545
0042 E0             1371             MOVX    A,@DPTR
0043 3C             1372             ADDC    A,R4
0044 FC             1373             MOV     R4,A
0045 7400           1374             MOV     A,#LOW (ucFE2P_Buffer)
0047 2D             1375             ADD     A,R5
0048 F582           1376             MOV     DPL,A
004A 74A8           1377             MOV     A,#HIGH (ucFE2P_Buffer)
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    23

004C 3C             1378             ADDC    A,R4
004D F583           1379             MOV     DPH,A
004F EF             1380             MOV     A,R7
0050 F0             1381             MOVX    @DPTR,A
                    1382     ;         Ptr++;
                    1383                             ; SOURCE LINE # 412
0051 900000   F     1384             MOV     DPTR,#Ptr?547+01H
0054 E4             1385             CLR     A
0055 75F001         1386             MOV     B,#01H
0058 120000   F     1387             LCALL   ?C?IILDX
                    1388     ;     }
                    1389                             ; SOURCE LINE # 413
005B 900000   F     1390             MOV     DPTR,#i?548+01H
005E E0             1391             MOVX    A,@DPTR
005F 04             1392             INC     A
0060 F0             1393             MOVX    @DPTR,A
0061 70B1           1394             JNZ     ?C0054
0063 900000   F     1395             MOV     DPTR,#i?548
0066 E0             1396             MOVX    A,@DPTR
0067 04             1397             INC     A
0068 F0             1398             MOVX    @DPTR,A
0069                1399     ?C0113:
0069 80A9           1400             SJMP    ?C0054
006B                1401     ?C0055:
                    1402     ;     bFE2P_Save = 1;
                    1403                             ; SOURCE LINE # 414
006B D200     F     1404             SETB    bFE2P_Save
                    1405     ; }
                    1406                             ; SOURCE LINE # 415
006D 22             1407             RET     
                    1408     ; END OF _FE2P_NvramWrite
                    1409     
                    1410     ; 
                    1411     ; /**************************************************************************//**
                    1412     ;  * Read data from FE2P sram
                    1413     ;  * @param Addr     The address where the data is stored.
                    1414     ;  * @param Length   Number of data to be read.
                    1415     ;  * @param[out] Ptr The pointer to buffer
                    1416     ;  ******************************************************************************/
                    1417     ; void FE2P_NvramRead(USHRT Addr, USHRT Length, UCHAR *Ptr)
                    1418     
----                1419             RSEG  ?PR?_FE2P_NvramRead?FE2P_API
0000                1420     _FE2P_NvramRead:
                    1421             USING   0
                    1422                             ; SOURCE LINE # 423
0000 900000   F     1423             MOV     DPTR,#Addr?649
0003 120000   F     1424             LCALL   L?0160
                    1425     ;---- Variable 'Ptr?651' assigned to Register 'R1/R2/R3' ----
                    1426     ; {
                    1427                             ; SOURCE LINE # 424
                    1428     ;     USHRT i;
                    1429     ;     for (i = 0; i < Length; i++) {
                    1430                             ; SOURCE LINE # 426
0006 E4             1431             CLR     A
0007 A3             1432             INC     DPTR
0008 F0             1433             MOVX    @DPTR,A
0009 A3             1434             INC     DPTR
000A F0             1435             MOVX    @DPTR,A
000B                1436     ?C0058:
000B 900000   F     1437             MOV     DPTR,#Length?650
000E 120000   F     1438             LCALL   L?0166
0011 900000   F     1439             MOV     DPTR,#i?652+01H
0014 E0             1440             MOVX    A,@DPTR
0015 9F             1441             SUBB    A,R7
0016 900000   F     1442             MOV     DPTR,#i?652
0019 E0             1443             MOVX    A,@DPTR
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    24

001A 9E             1444             SUBB    A,R6
001B 5036           1445             JNC     ?C0061
                    1446     ;         *Ptr = ucFE2P_Buffer[Addr + i];
                    1447                             ; SOURCE LINE # 427
001D E0             1448             MOVX    A,@DPTR
001E FE             1449             MOV     R6,A
001F A3             1450             INC     DPTR
0020 E0             1451             MOVX    A,@DPTR
0021 FF             1452             MOV     R7,A
0022 900000   F     1453             MOV     DPTR,#Addr?649+01H
0025 E0             1454             MOVX    A,@DPTR
0026 2F             1455             ADD     A,R7
0027 FF             1456             MOV     R7,A
0028 900000   F     1457             MOV     DPTR,#Addr?649
002B E0             1458             MOVX    A,@DPTR
002C 3E             1459             ADDC    A,R6
002D FE             1460             MOV     R6,A
002E 7400           1461             MOV     A,#LOW (ucFE2P_Buffer)
0030 2F             1462             ADD     A,R7
0031 F582           1463             MOV     DPL,A
0033 74A8           1464             MOV     A,#HIGH (ucFE2P_Buffer)
0035 3E             1465             ADDC    A,R6
0036 F583           1466             MOV     DPH,A
0038 E0             1467             MOVX    A,@DPTR
0039 120000   F     1468             LCALL   ?C?CSTPTR
                    1469     ;         Ptr++;
                    1470                             ; SOURCE LINE # 428
003C 7401           1471             MOV     A,#01H
003E 29             1472             ADD     A,R1
003F F9             1473             MOV     R1,A
0040 E4             1474             CLR     A
0041 3A             1475             ADDC    A,R2
0042 FA             1476             MOV     R2,A
                    1477     ;     }
                    1478                             ; SOURCE LINE # 429
0043 900000   F     1479             MOV     DPTR,#i?652+01H
0046 E0             1480             MOVX    A,@DPTR
0047 04             1481             INC     A
0048 F0             1482             MOVX    @DPTR,A
0049 70C0           1483             JNZ     ?C0058
004B 900000   F     1484             MOV     DPTR,#i?652
004E E0             1485             MOVX    A,@DPTR
004F 04             1486             INC     A
0050 F0             1487             MOVX    @DPTR,A
0051                1488     ?C0114:
0051 80B8           1489             SJMP    ?C0058
                    1490     ; }
                    1491                             ; SOURCE LINE # 430
0053                1492     ?C0061:
0053 22             1493             RET     
                    1494     ; END OF _FE2P_NvramRead
                    1495     
                    1496     ; 
                    1497     ; /**************************************************************************//**
                    1498     ;  * Dump all the user configurations from sram to flash.
                    1499     ;  ******************************************************************************/
                    1500     ; void FE2P_SaveToFlash(void)
                    1501     
----                1502             RSEG  ?PR?FE2P_SaveToFlash?FE2P_API
0000                1503     FE2P_SaveToFlash:
                    1504             USING   0
                    1505                             ; SOURCE LINE # 435
                    1506     ; {
                    1507                             ; SOURCE LINE # 436
                    1508     ;     USHRT offset, old_offset, i;
                    1509     ; 
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    25

                    1510     ;     if (bFE2P_Save == 0) {
                    1511                             ; SOURCE LINE # 439
0000 200003   F     1512             JB      bFE2P_Save,$ + 6H
0003 020000   F     1513             LJMP    ?C0063
                    1514     ;         return;
                    1515     ;     }
                    1516                             ; SOURCE LINE # 441
0006                1517     ?C0062:
                    1518     ;     bFE2P_Save = 0;
                    1519                             ; SOURCE LINE # 442
0006 C200     F     1520             CLR     bFE2P_Save
                    1521     ; #if MD_ENABLE_STRESS_TEST_KEY == ON
                    1522     ;     return;
                    1523     ; #endif
                    1524     ;     if (ucFE2P_Valid_Block > MAXBLOCK) {
                    1525                             ; SOURCE LINE # 446
0008 900000   F     1526             MOV     DPTR,#ucFE2P_Valid_Block
000B E0             1527             MOVX    A,@DPTR
000C D3             1528             SETB    C
000D 9405           1529             SUBB    A,#05H
000F 4003           1530             JC      ?C0064
                    1531     ;         ucFE2P_Valid_Block = MAXBLOCK;
                    1532                             ; SOURCE LINE # 447
0011 7405           1533             MOV     A,#05H
0013 F0             1534             MOVX    @DPTR,A
                    1535     ;     }
                    1536                             ; SOURCE LINE # 448
0014                1537     ?C0064:
                    1538     ;     if (ucFE2P_Valid_Block == 0) {
                    1539                             ; SOURCE LINE # 449
0014 900000   F     1540             MOV     DPTR,#ucFE2P_Valid_Block
0017 E0             1541             MOVX    A,@DPTR
0018 FF             1542             MOV     R7,A
0019 700A           1543             JNZ     ?C0065
                    1544     ;         offset = BLOCK1; //Save to block 1
                    1545                             ; SOURCE LINE # 450
001B 7418           1546             MOV     A,#018H
                    1547     ;         old_offset = BLOCK0;
                    1548                             ; SOURCE LINE # 451
001D 120000   F     1549             LCALL   L?0149
0020 F0             1550             MOVX    @DPTR,A
0021 A3             1551             INC     DPTR
0022 F0             1552             MOVX    @DPTR,A
                    1553     ;     }
                    1554                             ; SOURCE LINE # 452
0023 8061           1555             SJMP    ?C0066
0025                1556     ?C0065:
                    1557     ;     else if (ucFE2P_Valid_Block == 1) {
                    1558                             ; SOURCE LINE # 453
0025 EF             1559             MOV     A,R7
0026 B40109         1560             CJNE    A,#01H,?C0067
                    1561     ;         offset = BLOCK2; //Save to block 2
                    1562                             ; SOURCE LINE # 454
0029 7408           1563             MOV     A,#08H
                    1564     ;         old_offset = BLOCK1;
                    1565                             ; SOURCE LINE # 455
002B 120000   F     1566             LCALL   L?0149
002E 7418           1567             MOV     A,#018H
                    1568     ;     }
                    1569                             ; SOURCE LINE # 456
0030 8050           1570             SJMP    ?C0129
0032                1571     ?C0067:
                    1572     ;     else if (ucFE2P_Valid_Block == 2) {
                    1573                             ; SOURCE LINE # 457
0032 EF             1574             MOV     A,R7
0033 B40209         1575             CJNE    A,#02H,?C0069
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    26

                    1576     ;         offset = BLOCK3; //Save to block 3
                    1577                             ; SOURCE LINE # 458
0036 7420           1578             MOV     A,#020H
                    1579     ;         old_offset = BLOCK2;
                    1580                             ; SOURCE LINE # 459
0038 120000   F     1581             LCALL   L?0152
003B 7408           1582             MOV     A,#08H
003D                1583     ?C0128:
                    1584     ;     }
                    1585                             ; SOURCE LINE # 460
003D 8043           1586             SJMP    ?C0129
003F                1587     ?C0069:
                    1588     ;     else if (ucFE2P_Valid_Block == 3) {
                    1589                             ; SOURCE LINE # 461
003F EF             1590             MOV     A,R7
0040 B40309         1591             CJNE    A,#03H,?C0071
                    1592     ;         offset = BLOCK4; //Save to block 4
                    1593                             ; SOURCE LINE # 462
0043 7410           1594             MOV     A,#010H
                    1595     ;         old_offset = BLOCK3;
                    1596                             ; SOURCE LINE # 463
0045 120000   F     1597             LCALL   L?0152
0048 7420           1598             MOV     A,#020H
                    1599     ;     }
                    1600                             ; SOURCE LINE # 464
004A 8036           1601             SJMP    ?C0131
004C                1602     ?C0071:
                    1603     ;     else if (ucFE2P_Valid_Block == 4) {
                    1604                             ; SOURCE LINE # 465
004C EF             1605             MOV     A,R7
004D B40409         1606             CJNE    A,#04H,?C0073
                    1607     ;         offset = BLOCK5; //Save to block 5
                    1608                             ; SOURCE LINE # 466
0050 7428           1609             MOV     A,#028H
                    1610     ;         old_offset = BLOCK4;
                    1611                             ; SOURCE LINE # 467
0052 120000   F     1612             LCALL   L?0157
0055 7410           1613             MOV     A,#010H
0057                1614     ?C0130:
                    1615     ;     }
                    1616                             ; SOURCE LINE # 468
0057 8029           1617             SJMP    ?C0131
0059                1618     ?C0073:
                    1619     ;     else if (ucFE2P_Valid_Block == 5) {
                    1620                             ; SOURCE LINE # 469
0059 EF             1621             MOV     A,R7
005A B40509         1622             CJNE    A,#05H,?C0075
                    1623     ;         offset = BLOCK6; //Save to block 6
                    1624                             ; SOURCE LINE # 470
005D 7430           1625             MOV     A,#030H
                    1626     ;         old_offset = BLOCK5;
                    1627                             ; SOURCE LINE # 471
005F 120000   F     1628             LCALL   L?0157
0062 7428           1629             MOV     A,#028H
                    1630     ;     }
                    1631                             ; SOURCE LINE # 472
0064 801C           1632             SJMP    ?C0132
0066                1633     ?C0075:
                    1634     ;     else if (ucFE2P_Valid_Block == 6) {
                    1635                             ; SOURCE LINE # 473
0066 EF             1636             MOV     A,R7
0067 B4060E         1637             CJNE    A,#06H,?C0077
                    1638     ;         offset = BLOCK7; //Save to block 7
                    1639                             ; SOURCE LINE # 474
006A 900000   F     1640             MOV     DPTR,#offset?753
006D 7438           1641             MOV     A,#038H
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    27

006F F0             1642             MOVX    @DPTR,A
0070 A3             1643             INC     DPTR
0071 E4             1644             CLR     A
0072 F0             1645             MOVX    @DPTR,A
                    1646     ;         old_offset = BLOCK6;
                    1647                             ; SOURCE LINE # 475
0073 A3             1648             INC     DPTR
0074 7430           1649             MOV     A,#030H
                    1650     ;     }
                    1651                             ; SOURCE LINE # 476
0076 800A           1652             SJMP    ?C0127
0078                1653     ?C0077:
                    1654     ;     else {
                    1655                             ; SOURCE LINE # 477
                    1656     ;         offset = BLOCK0; //Save to block 0
                    1657                             ; SOURCE LINE # 478
0078 E4             1658             CLR     A
0079 900000   F     1659             MOV     DPTR,#offset?753
007C F0             1660             MOVX    @DPTR,A
007D A3             1661             INC     DPTR
007E F0             1662             MOVX    @DPTR,A
                    1663     ;         old_offset = BLOCK7;
                    1664                             ; SOURCE LINE # 479
007F A3             1665             INC     DPTR
0080 7438           1666             MOV     A,#038H
0082                1667     ?C0127:
0082                1668     ?C0129:
0082                1669     ?C0131:
0082                1670     ?C0132:
0082 F0             1671             MOVX    @DPTR,A
0083 A3             1672             INC     DPTR
0084 E4             1673             CLR     A
0085 F0             1674             MOVX    @DPTR,A
                    1675     ;     }
                    1676                             ; SOURCE LINE # 480
0086                1677     ?C0066:
                    1678     ; 
                    1679     ;     if (ucFE2P_Valid_Block == MAXBLOCK) {
                    1680                             ; SOURCE LINE # 482
0086 EF             1681             MOV     A,R7
0087 B40507         1682             CJNE    A,#05H,?C0079
                    1683     ;         offset = BLOCK0; //Save to block 0
                    1684                             ; SOURCE LINE # 483
008A E4             1685             CLR     A
008B 900000   F     1686             MOV     DPTR,#offset?753
008E F0             1687             MOVX    @DPTR,A
008F A3             1688             INC     DPTR
0090 F0             1689             MOVX    @DPTR,A
                    1690     ;     }
                    1691                             ; SOURCE LINE # 484
0091                1692     ?C0079:
                    1693     ; 
                    1694     ;     ResetWDTimer();
                    1695                             ; SOURCE LINE # 486
0091 120000   F     1696             LCALL   L?0153
                    1697     ; 
                    1698     ;     FLASH_ProtectOff(offset);
                    1699                             ; SOURCE LINE # 488
0094 900000   F     1700             MOV     DPTR,#offset?753
0097 E0             1701             MOVX    A,@DPTR
0098 FE             1702             MOV     R6,A
0099 A3             1703             INC     DPTR
009A E0             1704             MOVX    A,@DPTR
009B FF             1705             MOV     R7,A
009C 120000   F     1706             LCALL   _FLASH_ProtectOff
                    1707     ; 
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    28

                    1708     ;     if ((offset & 0x0FFF) == 0x0000) {
                    1709                             ; SOURCE LINE # 490
009F 900000   F     1710             MOV     DPTR,#offset?753
00A2 E0             1711             MOVX    A,@DPTR
00A3 540F           1712             ANL     A,#0FH
00A5 FE             1713             MOV     R6,A
00A6 A3             1714             INC     DPTR
00A7 E0             1715             MOVX    A,@DPTR
00A8 4E             1716             ORL     A,R6
00A9 7008           1717             JNZ     ?C0080
                    1718     ;         Fe2p_WriteEnable();
                    1719                             ; SOURCE LINE # 491
                    1720     ;         Fe2p_SectorErase(offset, 0); //100~150ms
                    1721                             ; SOURCE LINE # 492
00AB 120000   F     1722             LCALL   L?0155
00AE E4             1723             CLR     A
00AF FD             1724             MOV     R5,A
00B0 120000   F     1725             LCALL   _Fe2p_SectorErase
                    1726     ;     }
                    1727                             ; SOURCE LINE # 493
00B3                1728     ?C0080:
                    1729     ;     for (i = 0; i < 2048; i += 0x100) {
                    1730                             ; SOURCE LINE # 494
00B3 E4             1731             CLR     A
00B4 900000   F     1732             MOV     DPTR,#i?755
00B7 F0             1733             MOVX    @DPTR,A
00B8 A3             1734             INC     DPTR
00B9 F0             1735             MOVX    @DPTR,A
00BA                1736     ?C0081:
00BA C3             1737             CLR     C
00BB 900000   F     1738             MOV     DPTR,#i?755
00BE E0             1739             MOVX    A,@DPTR
00BF 9408           1740             SUBB    A,#08H
00C1 5033           1741             JNC     ?C0082
                    1742     ;         ResetWDTimer();
                    1743                             ; SOURCE LINE # 495
00C3 120000   F     1744             LCALL   L?0154
                    1745     ;         Fe2p_WriteEnable();
                    1746                             ; SOURCE LINE # 496
                    1747     ;         Fe2p_PageWrite(i + offset, FE2P_BUFFER_ADDR + i, 0x100, 0); //256bytes 3~4.5ms
                    1748                             ; SOURCE LINE # 497
00C6 120000   F     1749             LCALL   L?0155
00C9 900000   F     1750             MOV     DPTR,#i?755
00CC E0             1751             MOVX    A,@DPTR
00CD FC             1752             MOV     R4,A
00CE A3             1753             INC     DPTR
00CF E0             1754             MOVX    A,@DPTR
00D0 FD             1755             MOV     R5,A
00D1 2F             1756             ADD     A,R7
00D2 FF             1757             MOV     R7,A
00D3 EC             1758             MOV     A,R4
00D4 3E             1759             ADDC    A,R6
00D5 FE             1760             MOV     R6,A
00D6 E4             1761             CLR     A
00D7 2D             1762             ADD     A,R5
00D8 FD             1763             MOV     R5,A
00D9 EC             1764             MOV     A,R4
00DA 34A8           1765             ADDC    A,#0A8H
00DC FC             1766             MOV     R4,A
00DD E4             1767             CLR     A
00DE 900000   F     1768             MOV     DPTR,#?_Fe2p_PageWrite?BYTE+05H
00E1 F0             1769             MOVX    @DPTR,A
00E2 FB             1770             MOV     R3,A
00E3 120000   F     1771             LCALL   _Fe2p_PageWrite
                    1772     ;     }
                    1773                             ; SOURCE LINE # 498
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    29

00E6 900000   F     1774             MOV     DPTR,#i?755+01H
00E9 E0             1775             MOVX    A,@DPTR
00EA 2400           1776             ADD     A,#00H
00EC F0             1777             MOVX    @DPTR,A
00ED 900000   F     1778             MOV     DPTR,#i?755
00F0 E0             1779             MOVX    A,@DPTR
00F1 3401           1780             ADDC    A,#01H
00F3 F0             1781             MOVX    @DPTR,A
00F4 80C4           1782             SJMP    ?C0081
00F6                1783     ?C0082:
                    1784     ;     Fe2p_WriteEnable();
                    1785                             ; SOURCE LINE # 499
00F6 120000   F     1786             LCALL   Fe2p_WriteEnable
                    1787     ;     Fe2p_ByteWrite(VALID_FLAG_ADDR + offset, 0x55, 0); //Set new valid flag
                    1788                             ; SOURCE LINE # 500
00F9 900000   F     1789             MOV     DPTR,#offset?753+01H
00FC E0             1790             MOVX    A,@DPTR
00FD 900000   F     1791             MOV     DPTR,#offset?753
0100 120000   F     1792             LCALL   L?0168
0103 7D55           1793             MOV     R5,#055H
0105 120000   F     1794             LCALL   _Fe2p_ByteWrite
                    1795     ; 
                    1796     ;     FLASH_ProtectOff(old_offset);
                    1797                             ; SOURCE LINE # 502
0108 900000   F     1798             MOV     DPTR,#old_offset?754
010B E0             1799             MOVX    A,@DPTR
010C FE             1800             MOV     R6,A
010D A3             1801             INC     DPTR
010E E0             1802             MOVX    A,@DPTR
010F FF             1803             MOV     R7,A
0110 120000   F     1804             LCALL   _FLASH_ProtectOff
                    1805     ; 
                    1806     ;     Fe2p_WriteEnable();
                    1807                             ; SOURCE LINE # 504
0113 120000   F     1808             LCALL   Fe2p_WriteEnable
                    1809     ;     Fe2p_ByteWrite(VALID_FLAG_ADDR + old_offset, 0x00, 0); //Clear old valid flag
                    1810                             ; SOURCE LINE # 505
0116 900000   F     1811             MOV     DPTR,#old_offset?754+01H
0119 E0             1812             MOVX    A,@DPTR
011A 900000   F     1813             MOV     DPTR,#old_offset?754
011D 120000   F     1814             LCALL   L?0168
0120 FD             1815             MOV     R5,A
0121 120000   F     1816             LCALL   _Fe2p_ByteWrite
                    1817     ;     //ucFE2P_Valid_Block = (ucFE2P_Valid_Block+1) % 4;
                    1818     ;     if (ucFE2P_Valid_Block++ >= MAXBLOCK) {
                    1819                             ; SOURCE LINE # 507
0124 900000   F     1820             MOV     DPTR,#ucFE2P_Valid_Block
0127 E0             1821             MOVX    A,@DPTR
0128 FF             1822             MOV     R7,A
0129 04             1823             INC     A
012A F0             1824             MOVX    @DPTR,A
012B EF             1825             MOV     A,R7
012C C3             1826             CLR     C
012D 9405           1827             SUBB    A,#05H
012F 4002           1828             JC      ?C0084
                    1829     ;         ucFE2P_Valid_Block = 0;
                    1830                             ; SOURCE LINE # 508
0131 E4             1831             CLR     A
0132 F0             1832             MOVX    @DPTR,A
                    1833     ;     }
                    1834                             ; SOURCE LINE # 509
0133                1835     ?C0084:
                    1836     ; 
                    1837     ;     FLASH_ProtectOn();
                    1838                             ; SOURCE LINE # 511
0133 120000   F     1839             LCALL   FLASH_ProtectOn
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    30

                    1840     ; 
                    1841     ;     ResetWDTimer();
                    1842                             ; SOURCE LINE # 513
0136 120000   F     1843             LCALL   L?0154
                    1844     ; }
                    1845                             ; SOURCE LINE # 514
0139                1846     ?C0063:
0139 22             1847             RET     
013A                1848     L?0155:
013A 120000   F     1849             LCALL   Fe2p_WriteEnable
013D 900000   F     1850             MOV     DPTR,#offset?753
0140 E0             1851             MOVX    A,@DPTR
0141 FE             1852             MOV     R6,A
0142 A3             1853             INC     DPTR
0143 E0             1854             MOVX    A,@DPTR
0144 FF             1855             MOV     R7,A
0145 22             1856             RET     
                    1857     ; END OF FE2P_SaveToFlash
                    1858     
                    1859     ; 
                    1860     ; /**************************************************************************//**
                    1861     ;  * Activate the write protection.
                    1862     ;  * Control the Flash protection I/O pin.
                    1863     ;  ******************************************************************************/
                    1864     ; static void FLASH_WP_ON(void)
                    1865     
----                1866             RSEG  ?PR?FLASH_WP_ON?FE2P_API
0000                1867     FLASH_WP_ON:
                    1868             USING   0
                    1869                             ; SOURCE LINE # 520
                    1870     ; {
                    1871                             ; SOURCE LINE # 521
                    1872     ;     McuSetIOBit(FLASH_WP_PORT, FLASH_WP_BIT, FLASH_WP_ACTIVE);
                    1873                             ; SOURCE LINE # 522
0000 E4             1874             CLR     A
0001 FB             1875             MOV     R3,A
0002 7D04           1876             MOV     R5,#04H
0004 7F04           1877             MOV     R7,#04H
0006 020000   F     1878             LJMP    _McuSetIOBit
                    1879     ; END OF FLASH_WP_ON
                    1880     
                    1881     ; }
                    1882     ; 
                    1883     ; /**************************************************************************//**
                    1884     ;  * Inactivate the write protection.
                    1885     ;  * Control the Flash protection I/O pin.
                    1886     ;  ******************************************************************************/
                    1887     ; static void FLASH_WP_OFF(void)
                    1888     
----                1889             RSEG  ?PR?FLASH_WP_OFF?FE2P_API
0000                1890     FLASH_WP_OFF:
                    1891             USING   0
                    1892                             ; SOURCE LINE # 529
                    1893     ; {
                    1894                             ; SOURCE LINE # 530
                    1895     ;     McuSetIOBit(FLASH_WP_PORT, FLASH_WP_BIT, ~FLASH_WP_ACTIVE);
                    1896                             ; SOURCE LINE # 531
0000 7BFF           1897             MOV     R3,#0FFH
0002 7D04           1898             MOV     R5,#04H
0004 7F04           1899             MOV     R7,#04H
0006 020000   F     1900             LJMP    _McuSetIOBit
                    1901     ; END OF FLASH_WP_OFF
                    1902     
                    1903     ; }
                    1904     ; 
                    1905     ; /**************************************************************************//**
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    31

                    1906     ;  * Save POT counter in the Flash. (Write to flash directly.)
                    1907     ;  ******************************************************************************/
                    1908     ; void RecordTimeScale(void)
                    1909     
----                1910             RSEG  ?PR?RecordTimeScale?FE2P_API
0000                1911     RecordTimeScale:
                    1912             USING   0
                    1913                             ; SOURCE LINE # 537
                    1914     ; {
                    1915                             ; SOURCE LINE # 538
                    1916     ;     code UCHAR scaleTab[] = {0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00};
                    1917     ;     USHRT offset;
                    1918     ;     UCHAR scale, ch;
                    1919     ;     ULONG temp;
                    1920     ; 
                    1921     ;     if ((SystemData.ucPowerOnTimerM % POT_SAVE_COUNT) != 0) {//record time scale every 10
                              min
                    1922                             ; SOURCE LINE # 544
0000 900000   F     1923             MOV     DPTR,#SystemData+016H
0003 E0             1924             MOVX    A,@DPTR
0004 FF             1925             MOV     R7,A
0005 75F01E         1926             MOV     B,#01EH
0008 84             1927             DIV     AB
0009 E5F0           1928             MOV     A,B
000B 6003           1929             JZ      $ + 5H
000D 020000   F     1930             LJMP    ?C0088
                    1931     ;         return;
                    1932     ;     }
                    1933                             ; SOURCE LINE # 546
0010                1934     ?C0087:
                    1935     ; 
                    1936     ;     //Erase if first write
                    1937     ;     if ((SystemData.ucPowerOnTimerM == POT_SAVE_COUNT) && (SystemData.usPowerOnTimerH == 
                             0)) {
                    1938                             ; SOURCE LINE # 549
0010 EF             1939             MOV     A,R7
0011 B41E0D         1940             CJNE    A,#01EH,?C0089
0014 900000   F     1941             MOV     DPTR,#SystemData+017H
0017 E0             1942             MOVX    A,@DPTR
0018 7002           1943             JNZ     ?C0115
001A A3             1944             INC     DPTR
001B E0             1945             MOVX    A,@DPTR
001C                1946     ?C0115:
001C 7003           1947             JNZ     ?C0089
                    1948     ;         EraseTimeScale();
                    1949                             ; SOURCE LINE # 550
001E 120000   F     1950             LCALL   EraseTimeScale
                    1951     ;     }
                    1952                             ; SOURCE LINE # 551
0021                1953     ?C0089:
                    1954     ; 
                    1955     ;     //Erase again if erase fail
                    1956     ;     Fe2p_ByteRead(TIME_FLAG_ADDR + TIMEBLOCK, &ch);
                    1957                             ; SOURCE LINE # 554
0021 7B01           1958             MOV     R3,#01H
0023 7A00     F     1959             MOV     R2,#HIGH (ch?1059)
0025 7900     F     1960             MOV     R1,#LOW (ch?1059)
0027 7FFF           1961             MOV     R7,#0FFH
0029 7E3F           1962             MOV     R6,#03FH
002B 120000   F     1963             LCALL   _Fe2p_ByteRead
                    1964     ;     if (ch != 0xFF) {
                    1965                             ; SOURCE LINE # 555
002E 900000   F     1966             MOV     DPTR,#ch?1059
0031 E0             1967             MOVX    A,@DPTR
0032 F4             1968             CPL     A
0033 6003           1969             JZ      ?C0090
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    32

                    1970     ;         EraseTimeScale();
                    1971                             ; SOURCE LINE # 556
0035 120000   F     1972             LCALL   EraseTimeScale
                    1973     ;     }
                    1974                             ; SOURCE LINE # 557
0038                1975     ?C0090:
                    1976     ; 
                    1977     ;     //write enable
                    1978     ;     FLASH_ProtectOff(TIMEBLOCK);
                    1979                             ; SOURCE LINE # 560
0038 7F00           1980             MOV     R7,#00H
003A 7E30           1981             MOV     R6,#030H
003C 120000   F     1982             LCALL   _FLASH_ProtectOff
                    1983     ; 
                    1984     ;     //write
                    1985     ;     temp = (ULONG)(SystemData.usPowerOnTimerH - SystemData.usPOTimerH_FE2P) * 60 + System
                             Data.ucPowerOnTimerM - SystemData.ucPOTimerM_FE2P;
                    1986                             ; SOURCE LINE # 563
003F 900000   F     1987             MOV     DPTR,#SystemData+01DH
0042 120000   F     1988             LCALL   L?0166
0045 900000   F     1989             MOV     DPTR,#SystemData+018H
0048 E0             1990             MOVX    A,@DPTR
0049 9F             1991             SUBB    A,R7
004A FF             1992             MOV     R7,A
004B 900000   F     1993             MOV     DPTR,#SystemData+017H
004E E0             1994             MOVX    A,@DPTR
004F 9E             1995             SUBB    A,R6
0050 FE             1996             MOV     R6,A
0051 7C00           1997             MOV     R4,#00H
0053 7D3C           1998             MOV     R5,#03CH
0055 120000   F     1999             LCALL   ?C?LIMUL
0058 900000   F     2000             MOV     DPTR,#SystemData+016H
005B 120000   F     2001             LCALL   L?0150
005E C007           2002             PUSH    AR7
0060 900000   F     2003             MOV     DPTR,#SystemData+01CH
0063 E0             2004             MOVX    A,@DPTR
0064 FB             2005             MOV     R3,A
0065 D007           2006             POP     AR7
0067 C3             2007             CLR     C
0068 EF             2008             MOV     A,R7
0069 9B             2009             SUBB    A,R3
006A FF             2010             MOV     R7,A
006B EE             2011             MOV     A,R6
006C 9400           2012             SUBB    A,#00H
006E FE             2013             MOV     R6,A
006F ED             2014             MOV     A,R5
0070 9400           2015             SUBB    A,#00H
0072 FD             2016             MOV     R5,A
0073 EC             2017             MOV     A,R4
0074 9400           2018             SUBB    A,#00H
0076 120000   F     2019             LCALL   L?0162
                    2020     ;     if (temp != 0) {
                    2021                             ; SOURCE LINE # 564
0079 E4             2022             CLR     A
007A FF             2023             MOV     R7,A
007B FE             2024             MOV     R6,A
007C FD             2025             MOV     R5,A
007D FC             2026             MOV     R4,A
007E 900000   F     2027             MOV     DPTR,#temp?1060
0081 120000   F     2028             LCALL   L?0161
0084 C3             2029             CLR     C
0085 120000   F     2030             LCALL   ?C?ULCMP
0088 6017           2031             JZ      ?C0091
                    2032     ;         temp = temp - 1;
                    2033                             ; SOURCE LINE # 565
008A 900000   F     2034             MOV     DPTR,#temp?1060
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    33

008D 120000   F     2035             LCALL   L?0142
0090 24FF           2036             ADD     A,#0FFH
0092 FF             2037             MOV     R7,A
0093 EE             2038             MOV     A,R6
0094 34FF           2039             ADDC    A,#0FFH
0096 FE             2040             MOV     R6,A
0097 ED             2041             MOV     A,R5
0098 34FF           2042             ADDC    A,#0FFH
009A FD             2043             MOV     R5,A
009B EC             2044             MOV     A,R4
009C 34FF           2045             ADDC    A,#0FFH
009E 120000   F     2046             LCALL   L?0162
                    2047     ;     }
                    2048                             ; SOURCE LINE # 566
00A1                2049     ?C0091:
                    2050     ;     temp = temp / POT_SAVE_COUNT;
                    2051                             ; SOURCE LINE # 567
00A1 900000   F     2052             MOV     DPTR,#temp?1060
00A4 120000   F     2053             LCALL   L?0142
00A7 120000   F     2054             LCALL   L?0164
00AA 120000   F     2055             LCALL   ?C?ULDIV
00AD 120000   F     2056             LCALL   L?0163
                    2057     ;     offset = temp / 8;
                    2058                             ; SOURCE LINE # 568
00B0 7B08           2059             MOV     R3,#08H
00B2 900000   F     2060             MOV     DPTR,#temp?1060
00B5 120000   F     2061             LCALL   L?0141
00B8 FF             2062             MOV     R7,A
00B9 120000   F     2063             LCALL   ?C?ULDIV
00BC 900000   F     2064             MOV     DPTR,#offset?1057
00BF EE             2065             MOV     A,R6
00C0 F0             2066             MOVX    @DPTR,A
00C1 A3             2067             INC     DPTR
00C2 EF             2068             MOV     A,R7
00C3 F0             2069             MOVX    @DPTR,A
                    2070     ;     offset &= 0x0FFF;
                    2071                             ; SOURCE LINE # 569
00C4 EE             2072             MOV     A,R6
00C5 540F           2073             ANL     A,#0FH
00C7 900000   F     2074             MOV     DPTR,#offset?1057
00CA F0             2075             MOVX    @DPTR,A
00CB A3             2076             INC     DPTR
00CC EF             2077             MOV     A,R7
00CD F0             2078             MOVX    @DPTR,A
                    2079     ;     scale = temp % 8;
                    2080                             ; SOURCE LINE # 570
00CE 900000   F     2081             MOV     DPTR,#temp?1060
00D1 120000   F     2082             LCALL   L?0142
00D4 5407           2083             ANL     A,#07H
00D6 FF             2084             MOV     R7,A
00D7 E4             2085             CLR     A
                    2086     ;---- Variable 'scale?1058' assigned to Register 'R7' ----
                    2087     ;     ch = scaleTab[scale];
                    2088                             ; SOURCE LINE # 571
00D8 EF             2089             MOV     A,R7
00D9 900000   F     2090             MOV     DPTR,#scaleTab?1056
00DC 93             2091             MOVC    A,@A+DPTR
00DD 900000   F     2092             MOV     DPTR,#ch?1059
00E0 F0             2093             MOVX    @DPTR,A
                    2094     ;     Fe2p_WriteEnable();
                    2095                             ; SOURCE LINE # 572
00E1 120000   F     2096             LCALL   Fe2p_WriteEnable
                    2097     ;     Fe2p_ByteWrite(TIMEBLOCK + offset, ch, 0); //Set new valid flag
                    2098                             ; SOURCE LINE # 573
00E4 900000   F     2099             MOV     DPTR,#offset?1057+01H
00E7 E0             2100             MOVX    A,@DPTR
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    34

00E8 2400           2101             ADD     A,#00H
00EA FF             2102             MOV     R7,A
00EB 900000   F     2103             MOV     DPTR,#offset?1057
00EE E0             2104             MOVX    A,@DPTR
00EF 3430           2105             ADDC    A,#030H
00F1 FE             2106             MOV     R6,A
00F2 900000   F     2107             MOV     DPTR,#ch?1059
00F5 E0             2108             MOVX    A,@DPTR
00F6 FD             2109             MOV     R5,A
00F7 E4             2110             CLR     A
00F8 FB             2111             MOV     R3,A
00F9 120000   F     2112             LCALL   _Fe2p_ByteWrite
                    2113     ; 
                    2114     ;     //write protect
                    2115     ;     FLASH_ProtectOn();
                    2116                             ; SOURCE LINE # 576
00FC 120000   F     2117             LCALL   FLASH_ProtectOn
                    2118     ; }
                    2119                             ; SOURCE LINE # 577
00FF                2120     ?C0088:
00FF 22             2121             RET     
                    2122     ; END OF RecordTimeScale
                    2123     
                    2124     ; 
                    2125     ; /**************************************************************************//**
                    2126     ;  * Erase the POT block. (Erase the flash block directly)
                    2127     ;  ******************************************************************************/
                    2128     ; void EraseTimeScale(void)
                    2129     
----                2130             RSEG  ?PR?EraseTimeScale?FE2P_API
0000                2131     EraseTimeScale:
                    2132             USING   0
                    2133                             ; SOURCE LINE # 582
                    2134     ; {
                    2135                             ; SOURCE LINE # 583
                    2136     ;     if (FE2P_CheckValidBlock() == 0xFF) {
                    2137                             ; SOURCE LINE # 584
0000 120000   F     2138             LCALL   FE2P_CheckValidBlock
0003 BFFF0A         2139             CJNE    R7,#0FFH,?C0092
                    2140     ;         SystemData.ucPowerOnTimerM = 0;
                    2141                             ; SOURCE LINE # 585
0006 E4             2142             CLR     A
0007 900000   F     2143             MOV     DPTR,#SystemData+016H
000A F0             2144             MOVX    @DPTR,A
                    2145     ;         SystemData.usPowerOnTimerH = 0;
                    2146                             ; SOURCE LINE # 586
000B A3             2147             INC     DPTR
000C F0             2148             MOVX    @DPTR,A
000D A3             2149             INC     DPTR
000E F0             2150             MOVX    @DPTR,A
000F 22             2151             RET     
                    2152     ;         return;
                    2153     ;     }
                    2154                             ; SOURCE LINE # 588
0010                2155     ?C0092:
                    2156     ; 
                    2157     ;     ResetWDTimer();
                    2158                             ; SOURCE LINE # 590
0010 120000   F     2159             LCALL   L?0154
                    2160     ; 
                    2161     ;     //write enable
                    2162     ;     FLASH_ProtectOff(TIMEBLOCK);
                    2163                             ; SOURCE LINE # 593
0013 7F00           2164             MOV     R7,#00H
0015 7E30           2165             MOV     R6,#030H
0017 120000   F     2166             LCALL   _FLASH_ProtectOff
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    35

                    2167     ; 
                    2168     ;     Fe2p_WriteEnable();
                    2169                             ; SOURCE LINE # 595
001A 120000   F     2170             LCALL   Fe2p_WriteEnable
                    2171     ;     Fe2p_ByteWrite(TIMEBLOCK + TIME_FLAG_ADDR, 0x00, 0); //Set new valid flag
                    2172                             ; SOURCE LINE # 596
001D E4             2173             CLR     A
001E FB             2174             MOV     R3,A
001F FD             2175             MOV     R5,A
0020 7FFF           2176             MOV     R7,#0FFH
0022 7E3F           2177             MOV     R6,#03FH
0024 120000   F     2178             LCALL   _Fe2p_ByteWrite
                    2179     ; 
                    2180     ;     //erase
                    2181     ;     Fe2p_WriteEnable();
                    2182                             ; SOURCE LINE # 599
0027 120000   F     2183             LCALL   Fe2p_WriteEnable
                    2184     ;     Fe2p_SectorErase(TIMEBLOCK, 0); //100~150ms
                    2185                             ; SOURCE LINE # 600
002A E4             2186             CLR     A
002B FD             2187             MOV     R5,A
002C FF             2188             MOV     R7,A
002D 7E30           2189             MOV     R6,#030H
002F 120000   F     2190             LCALL   _Fe2p_SectorErase
                    2191     ; 
                    2192     ;     //write protect
                    2193     ;     FLASH_ProtectOn();
                    2194                             ; SOURCE LINE # 603
0032 120000   F     2195             LCALL   FLASH_ProtectOn
                    2196     ; 
                    2197     ;     ResetWDTimer();
                    2198                             ; SOURCE LINE # 605
0035 120000   F     2199             LCALL   L?0154
                    2200     ; }
                    2201                             ; SOURCE LINE # 606
0038                2202     ?C0093:
0038 22             2203             RET     
                    2204     ; END OF EraseTimeScale
                    2205     
                    2206     ; 
                    2207     ; /**************************************************************************//**
                    2208     ;  * Decode the POT from flash.
                    2209     ;  ******************************************************************************/
                    2210     ; void DecodeTimeScale(void)
                    2211     
----                2212             RSEG  ?PR?DecodeTimeScale?FE2P_API
0000                2213     DecodeTimeScale:
                    2214             USING   0
                    2215                             ; SOURCE LINE # 611
                    2216     ; {
                    2217                             ; SOURCE LINE # 612
                    2218     ;     ULONG temp;
                    2219     ;     USHRT offset;
                    2220     ;     UCHAR ch;
                    2221     ; 
                    2222     ;     temp = ((ULONG)SystemData.usPOTimerH_FE2P * 60 + SystemData.ucPOTimerM_FE2P) / POT_SA
                             VE_COUNT;
                    2223                             ; SOURCE LINE # 617
0000 900000   F     2224             MOV     DPTR,#SystemData+01DH
0003 E0             2225             MOVX    A,@DPTR
0004 FE             2226             MOV     R6,A
0005 A3             2227             INC     DPTR
0006 E0             2228             MOVX    A,@DPTR
0007 FF             2229             MOV     R7,A
0008 7C00           2230             MOV     R4,#00H
000A 7D3C           2231             MOV     R5,#03CH
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    36

000C 120000   F     2232             LCALL   ?C?LIMUL
000F 900000   F     2233             MOV     DPTR,#SystemData+01CH
0012 120000   F     2234             LCALL   L?0150
0015 120000   F     2235             LCALL   L?0165
0018 120000   F     2236             LCALL   ?C?ULDIV
001B 120000   F     2237             LCALL   L?0158
                    2238     ;     for (offset = 0; offset < 4095; offset++) {
                    2239                             ; SOURCE LINE # 618
001E E4             2240             CLR     A
001F 900000   F     2241             MOV     DPTR,#offset?1262
0022 F0             2242             MOVX    @DPTR,A
0023 A3             2243             INC     DPTR
0024 F0             2244             MOVX    @DPTR,A
0025                2245     ?C0094:
0025 900000   F     2246             MOV     DPTR,#offset?1262
0028 120000   F     2247             LCALL   L?0167
002B 94FF           2248             SUBB    A,#0FFH
002D EE             2249             MOV     A,R6
002E 940F           2250             SUBB    A,#0FH
0030 5026           2251             JNC     ?C0095
                    2252     ;         Fe2p_ByteRead(offset + TIMEBLOCK, &ch);
                    2253                             ; SOURCE LINE # 619
0032 E4             2254             CLR     A
0033 2F             2255             ADD     A,R7
0034 FF             2256             MOV     R7,A
0035 EE             2257             MOV     A,R6
0036 3430           2258             ADDC    A,#030H
0038 FE             2259             MOV     R6,A
0039 7B01           2260             MOV     R3,#01H
003B 7A00     F     2261             MOV     R2,#HIGH (ch?1263)
003D 7900     F     2262             MOV     R1,#LOW (ch?1263)
003F 120000   F     2263             LCALL   _Fe2p_ByteRead
                    2264     ;         if (ch != 0) {
                    2265                             ; SOURCE LINE # 620
0042 900000   F     2266             MOV     DPTR,#ch?1263
0045 E0             2267             MOVX    A,@DPTR
0046 7010           2268             JNZ     ?C0095
                    2269     ;             break;
                    2270                             ; SOURCE LINE # 621
                    2271     ;         }
                    2272                             ; SOURCE LINE # 622
0048                2273     ?C0097:
                    2274     ;     }
                    2275                             ; SOURCE LINE # 623
0048                2276     ?C0096:
0048 900000   F     2277             MOV     DPTR,#offset?1262+01H
004B E0             2278             MOVX    A,@DPTR
004C 04             2279             INC     A
004D F0             2280             MOVX    @DPTR,A
004E 70D5           2281             JNZ     ?C0094
0050 900000   F     2282             MOV     DPTR,#offset?1262
0053 E0             2283             MOVX    A,@DPTR
0054 04             2284             INC     A
0055 F0             2285             MOVX    @DPTR,A
0056                2286     ?C0116:
0056 80CD           2287             SJMP    ?C0094
0058                2288     ?C0095:
                    2289     ;     temp += (offset * 8);
                    2290                             ; SOURCE LINE # 624
0058 900000   F     2291             MOV     DPTR,#temp?1261
005B 120000   F     2292             LCALL   L?0161
005E C000           2293             PUSH    AR0
0060 C001           2294             PUSH    AR1
0062 C002           2295             PUSH    AR2
0064 C003           2296             PUSH    AR3
0066 A3             2297             INC     DPTR
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    37

0067 E0             2298             MOVX    A,@DPTR
0068 FE             2299             MOV     R6,A
0069 A3             2300             INC     DPTR
006A E0             2301             MOVX    A,@DPTR
006B 7803           2302             MOV     R0,#03H
006D                2303     ?C0117:
006D C3             2304             CLR     C
006E 33             2305             RLC     A
006F CE             2306             XCH     A,R6
0070 33             2307             RLC     A
0071 CE             2308             XCH     A,R6
0072 D8F9           2309             DJNZ    R0,?C0117
0074 FF             2310             MOV     R7,A
0075 E4             2311             CLR     A
0076 FC             2312             MOV     R4,A
0077 FD             2313             MOV     R5,A
0078 D003           2314             POP     AR3
007A D002           2315             POP     AR2
007C D001           2316             POP     AR1
007E D000           2317             POP     AR0
0080 EB             2318             MOV     A,R3
0081 2F             2319             ADD     A,R7
0082 FF             2320             MOV     R7,A
0083 EA             2321             MOV     A,R2
0084 3E             2322             ADDC    A,R6
0085 120000   F     2323             LCALL   L?0151
0088 120000   F     2324             LCALL   L?0158
                    2325     ;     if (ch == 0xFE) {
                    2326                             ; SOURCE LINE # 625
008B 900000   F     2327             MOV     DPTR,#ch?1263
008E E0             2328             MOVX    A,@DPTR
008F FB             2329             MOV     R3,A
0090 B4FE0B         2330             CJNE    A,#0FEH,?C0098
                    2331     ;         temp += 1;
                    2332                             ; SOURCE LINE # 626
0093 900000   F     2333             MOV     DPTR,#temp?1261
0096 120000   F     2334             LCALL   L?0142
0099 2401           2335             ADD     A,#01H
                    2336     ;     }
                    2337                             ; SOURCE LINE # 627
009B 020000   F     2338             LJMP    ?C0138
009E                2339     ?C0098:
                    2340     ;     else if (ch == 0xFC) {
                    2341                             ; SOURCE LINE # 628
009E EB             2342             MOV     A,R3
009F B4FC0A         2343             CJNE    A,#0FCH,?C0100
                    2344     ;         temp += 2;
                    2345                             ; SOURCE LINE # 629
00A2 900000   F     2346             MOV     DPTR,#temp?1261
00A5 120000   F     2347             LCALL   L?0142
00A8 2402           2348             ADD     A,#02H
00AA                2349     ?C0133:
                    2350     ;     }
                    2351                             ; SOURCE LINE # 630
00AA 804F           2352             SJMP    ?C0138
00AC                2353     ?C0100:
                    2354     ;     else if (ch == 0xF8) {
                    2355                             ; SOURCE LINE # 631
00AC 900000   F     2356             MOV     DPTR,#ch?1263
00AF E0             2357             MOVX    A,@DPTR
00B0 FB             2358             MOV     R3,A
00B1 B4F80A         2359             CJNE    A,#0F8H,?C0102
                    2360     ;         temp += 3;
                    2361                             ; SOURCE LINE # 632
00B4 900000   F     2362             MOV     DPTR,#temp?1261
00B7 120000   F     2363             LCALL   L?0142
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    38

00BA 2403           2364             ADD     A,#03H
00BC                2365     ?C0134:
                    2366     ;     }
                    2367                             ; SOURCE LINE # 633
00BC 803D           2368             SJMP    ?C0138
00BE                2369     ?C0102:
                    2370     ;     else if (ch == 0xF0) {
                    2371                             ; SOURCE LINE # 634
00BE EB             2372             MOV     A,R3
00BF B4F00A         2373             CJNE    A,#0F0H,?C0104
                    2374     ;         temp += 4;
                    2375                             ; SOURCE LINE # 635
00C2 900000   F     2376             MOV     DPTR,#temp?1261
00C5 120000   F     2377             LCALL   L?0142
00C8 2404           2378             ADD     A,#04H
00CA                2379     ?C0135:
                    2380     ;     }
                    2381                             ; SOURCE LINE # 636
00CA 802F           2382             SJMP    ?C0138
00CC                2383     ?C0104:
                    2384     ;     else if (ch == 0xE0) {
                    2385                             ; SOURCE LINE # 637
00CC 900000   F     2386             MOV     DPTR,#ch?1263
00CF E0             2387             MOVX    A,@DPTR
00D0 FB             2388             MOV     R3,A
00D1 B4E00A         2389             CJNE    A,#0E0H,?C0106
                    2390     ;         temp += 5;
                    2391                             ; SOURCE LINE # 638
00D4 900000   F     2392             MOV     DPTR,#temp?1261
00D7 120000   F     2393             LCALL   L?0142
00DA 2405           2394             ADD     A,#05H
00DC                2395     ?C0136:
                    2396     ;     }
                    2397                             ; SOURCE LINE # 639
00DC 801D           2398             SJMP    ?C0138
00DE                2399     ?C0106:
                    2400     ;     else if (ch == 0xC0) {
                    2401                             ; SOURCE LINE # 640
00DE EB             2402             MOV     A,R3
00DF B4C00A         2403             CJNE    A,#0C0H,?C0108
                    2404     ;         temp += 6;
                    2405                             ; SOURCE LINE # 641
00E2 900000   F     2406             MOV     DPTR,#temp?1261
00E5 120000   F     2407             LCALL   L?0142
00E8 2406           2408             ADD     A,#06H
00EA                2409     ?C0137:
                    2410     ;     }
                    2411                             ; SOURCE LINE # 642
00EA 800F           2412             SJMP    ?C0138
00EC                2413     ?C0108:
                    2414     ;     else if (ch == 0x80) {
                    2415                             ; SOURCE LINE # 643
00EC 900000   F     2416             MOV     DPTR,#ch?1263
00EF E0             2417             MOVX    A,@DPTR
00F0 B48015         2418             CJNE    A,#080H,?C0099
                    2419     ;         temp += 7;
                    2420                             ; SOURCE LINE # 644
00F3 900000   F     2421             MOV     DPTR,#temp?1261
00F6 120000   F     2422             LCALL   L?0142
00F9 2407           2423             ADD     A,#07H
00FB                2424     ?C0138:
00FB FF             2425             MOV     R7,A
00FC E4             2426             CLR     A
00FD 3E             2427             ADDC    A,R6
00FE FE             2428             MOV     R6,A
00FF E4             2429             CLR     A
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    39

0100 3D             2430             ADDC    A,R5
0101 FD             2431             MOV     R5,A
0102 E4             2432             CLR     A
0103 3C             2433             ADDC    A,R4
0104 FC             2434             MOV     R4,A
0105 120000   F     2435             LCALL   L?0159
                    2436     ;     }
                    2437                             ; SOURCE LINE # 645
0108                2438     ?C0099:
                    2439     ;     temp = temp * POT_SAVE_COUNT;
                    2440                             ; SOURCE LINE # 646
0108 900000   F     2441             MOV     DPTR,#temp?1261
010B 120000   F     2442             LCALL   L?0142
010E 120000   F     2443             LCALL   L?0164
0111 120000   F     2444             LCALL   ?C?LMUL
0114 120000   F     2445             LCALL   L?0159
                    2446     ;     SystemData.usPowerOnTimerH = temp / 60;
                    2447                             ; SOURCE LINE # 647
0117 120000   F     2448             LCALL   L?0140
011A FF             2449             MOV     R7,A
011B 120000   F     2450             LCALL   ?C?ULDIV
011E 900000   F     2451             MOV     DPTR,#SystemData+017H
0121 EE             2452             MOV     A,R6
0122 F0             2453             MOVX    @DPTR,A
0123 A3             2454             INC     DPTR
0124 EF             2455             MOV     A,R7
0125 F0             2456             MOVX    @DPTR,A
                    2457     ;     SystemData.ucPowerOnTimerM = temp % 60;
                    2458                             ; SOURCE LINE # 648
0126 120000   F     2459             LCALL   L?0140
0129 FF             2460             MOV     R7,A
012A 120000   F     2461             LCALL   ?C?ULDIV
012D 900000   F     2462             MOV     DPTR,#SystemData+016H
0130 EB             2463             MOV     A,R3
0131 F0             2464             MOVX    @DPTR,A
                    2465     ; }
                    2466                             ; SOURCE LINE # 649
0132 22             2467             RET     
                    2468     ; END OF DecodeTimeScale
                    2469     
                    2470             END
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    40

SYMBOL TABLE LISTING
------ ----- -------


N A M E                            T Y P E  V A L U E   ATTRIBUTES

?BI?FE2P_API. . . . . . . . . . .  B SEG    0001H       REL=UNIT
?C0001. . . . . . . . . . . . . .  C ADDR   000DH   R   SEG=?PR?FLASH_INITPROTECTION?FE2P_API
?C0005. . . . . . . . . . . . . .  C ADDR   0024H   R   SEG=?PR?_FLASH_PROTECTOFF?FE2P_API
?C0006. . . . . . . . . . . . . .  C ADDR   0034H   R   SEG=?PR?_FLASH_PROTECTOFF?FE2P_API
?C0007. . . . . . . . . . . . . .  C ADDR   0037H   R   SEG=?PR?_FLASH_PROTECTOFF?FE2P_API
?C0008. . . . . . . . . . . . . .  C ADDR   0041H   R   SEG=?PR?_FLASH_PROTECTOFF?FE2P_API
?C0009. . . . . . . . . . . . . .  C ADDR   004BH   R   SEG=?PR?_FLASH_PROTECTOFF?FE2P_API
?C0010. . . . . . . . . . . . . .  C ADDR   0055H   R   SEG=?PR?_FLASH_PROTECTOFF?FE2P_API
?C0011. . . . . . . . . . . . . .  C ADDR   005AH   R   SEG=?PR?_FLASH_PROTECTOFF?FE2P_API
?C0012. . . . . . . . . . . . . .  C ADDR   0036H   R   SEG=?PR?FLASH_PROTECTON?FE2P_API
?C0014. . . . . . . . . . . . . .  C ADDR   0014H   R   SEG=?PR?FLASH_PROTECTON?FE2P_API
?C0016. . . . . . . . . . . . . .  C ADDR   0019H   R   SEG=?PR?FLASH_PROTECTON?FE2P_API
?C0017. . . . . . . . . . . . . .  C ADDR   0023H   R   SEG=?PR?FLASH_PROTECTON?FE2P_API
?C0019. . . . . . . . . . . . . .  C ADDR   0027H   R   SEG=?PR?FLASH_PROTECTON?FE2P_API
?C0020. . . . . . . . . . . . . .  C ADDR   0031H   R   SEG=?PR?FLASH_PROTECTON?FE2P_API
?C0022. . . . . . . . . . . . . .  C ADDR   0007H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0023. . . . . . . . . . . . . .  C ADDR   0016H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0025. . . . . . . . . . . . . .  C ADDR   002FH   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0026. . . . . . . . . . . . . .  C ADDR   002CH   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0027. . . . . . . . . . . . . .  C ADDR   002FH   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0028. . . . . . . . . . . . . .  C ADDR   0049H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0030. . . . . . . . . . . . . .  C ADDR   0056H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0032. . . . . . . . . . . . . .  C ADDR   0065H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0034. . . . . . . . . . . . . .  C ADDR   0073H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0036. . . . . . . . . . . . . .  C ADDR   0081H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0038. . . . . . . . . . . . . .  C ADDR   008FH   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0040. . . . . . . . . . . . . .  C ADDR   009DH   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0042. . . . . . . . . . . . . .  C ADDR   00B4H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0044. . . . . . . . . . . . . .  C ADDR   00BCH   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0045. . . . . . . . . . . . . .  C ADDR   000BH   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
?C0046. . . . . . . . . . . . . .  C ADDR   005AH   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
?C0047. . . . . . . . . . . . . .  C ADDR   0016H   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
?C0048. . . . . . . . . . . . . .  C ADDR   0021H   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
?C0049. . . . . . . . . . . . . .  C ADDR   002CH   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
?C0050. . . . . . . . . . . . . .  C ADDR   0037H   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
?C0051. . . . . . . . . . . . . .  C ADDR   0042H   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
?C0052. . . . . . . . . . . . . .  C ADDR   004DH   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
?C0053. . . . . . . . . . . . . .  C ADDR   0058H   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
?C0054. . . . . . . . . . . . . .  C ADDR   0014H   R   SEG=?PR?_FE2P_NVRAMWRITE?FE2P_API
?C0055. . . . . . . . . . . . . .  C ADDR   006BH   R   SEG=?PR?_FE2P_NVRAMWRITE?FE2P_API
?C0058. . . . . . . . . . . . . .  C ADDR   000BH   R   SEG=?PR?_FE2P_NVRAMREAD?FE2P_API
?C0061. . . . . . . . . . . . . .  C ADDR   0053H   R   SEG=?PR?_FE2P_NVRAMREAD?FE2P_API
?C0062. . . . . . . . . . . . . .  C ADDR   0006H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0063. . . . . . . . . . . . . .  C ADDR   0139H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0064. . . . . . . . . . . . . .  C ADDR   0014H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0065. . . . . . . . . . . . . .  C ADDR   0025H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0066. . . . . . . . . . . . . .  C ADDR   0086H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0067. . . . . . . . . . . . . .  C ADDR   0032H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0069. . . . . . . . . . . . . .  C ADDR   003FH   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0071. . . . . . . . . . . . . .  C ADDR   004CH   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0073. . . . . . . . . . . . . .  C ADDR   0059H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0075. . . . . . . . . . . . . .  C ADDR   0066H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0077. . . . . . . . . . . . . .  C ADDR   0078H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0079. . . . . . . . . . . . . .  C ADDR   0091H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0080. . . . . . . . . . . . . .  C ADDR   00B3H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0081. . . . . . . . . . . . . .  C ADDR   00BAH   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0082. . . . . . . . . . . . . .  C ADDR   00F6H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0084. . . . . . . . . . . . . .  C ADDR   0133H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0087. . . . . . . . . . . . . .  C ADDR   0010H   R   SEG=?PR?RECORDTIMESCALE?FE2P_API
?C0088. . . . . . . . . . . . . .  C ADDR   00FFH   R   SEG=?PR?RECORDTIMESCALE?FE2P_API
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    41

?C0089. . . . . . . . . . . . . .  C ADDR   0021H   R   SEG=?PR?RECORDTIMESCALE?FE2P_API
?C0090. . . . . . . . . . . . . .  C ADDR   0038H   R   SEG=?PR?RECORDTIMESCALE?FE2P_API
?C0091. . . . . . . . . . . . . .  C ADDR   00A1H   R   SEG=?PR?RECORDTIMESCALE?FE2P_API
?C0092. . . . . . . . . . . . . .  C ADDR   0010H   R   SEG=?PR?ERASETIMESCALE?FE2P_API
?C0093. . . . . . . . . . . . . .  C ADDR   0038H   R   SEG=?PR?ERASETIMESCALE?FE2P_API
?C0094. . . . . . . . . . . . . .  C ADDR   0025H   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0095. . . . . . . . . . . . . .  C ADDR   0058H   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0096. . . . . . . . . . . . . .  C ADDR   0048H   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0097. . . . . . . . . . . . . .  C ADDR   0048H   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0098. . . . . . . . . . . . . .  C ADDR   009EH   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0099. . . . . . . . . . . . . .  C ADDR   0108H   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0100. . . . . . . . . . . . . .  C ADDR   00ACH   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0102. . . . . . . . . . . . . .  C ADDR   00BEH   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0104. . . . . . . . . . . . . .  C ADDR   00CCH   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0106. . . . . . . . . . . . . .  C ADDR   00DEH   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0108. . . . . . . . . . . . . .  C ADDR   00ECH   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0112. . . . . . . . . . . . . .  C ADDR   0010H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0113. . . . . . . . . . . . . .  C ADDR   0069H   R   SEG=?PR?_FE2P_NVRAMWRITE?FE2P_API
?C0114. . . . . . . . . . . . . .  C ADDR   0051H   R   SEG=?PR?_FE2P_NVRAMREAD?FE2P_API
?C0115. . . . . . . . . . . . . .  C ADDR   001CH   R   SEG=?PR?RECORDTIMESCALE?FE2P_API
?C0116. . . . . . . . . . . . . .  C ADDR   0056H   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0117. . . . . . . . . . . . . .  C ADDR   006DH   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0118. . . . . . . . . . . . . .  C ADDR   0057H   R   SEG=?PR?_FLASH_PROTECTOFF?FE2P_API
?C0119. . . . . . . . . . . . . .  C ADDR   0033H   R   SEG=?PR?FLASH_PROTECTON?FE2P_API
?C0120. . . . . . . . . . . . . .  C ADDR   0062H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0121. . . . . . . . . . . . . .  C ADDR   0071H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0122. . . . . . . . . . . . . .  C ADDR   007FH   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0123. . . . . . . . . . . . . .  C ADDR   008DH   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0124. . . . . . . . . . . . . .  C ADDR   009BH   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0125. . . . . . . . . . . . . .  C ADDR   00B2H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0126. . . . . . . . . . . . . .  C ADDR   00B9H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
?C0127. . . . . . . . . . . . . .  C ADDR   0082H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0128. . . . . . . . . . . . . .  C ADDR   003DH   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0129. . . . . . . . . . . . . .  C ADDR   0082H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0130. . . . . . . . . . . . . .  C ADDR   0057H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0131. . . . . . . . . . . . . .  C ADDR   0082H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0132. . . . . . . . . . . . . .  C ADDR   0082H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
?C0133. . . . . . . . . . . . . .  C ADDR   00AAH   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0134. . . . . . . . . . . . . .  C ADDR   00BCH   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0135. . . . . . . . . . . . . .  C ADDR   00CAH   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0136. . . . . . . . . . . . . .  C ADDR   00DCH   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0137. . . . . . . . . . . . . .  C ADDR   00EAH   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C0138. . . . . . . . . . . . . .  C ADDR   00FBH   R   SEG=?PR?DECODETIMESCALE?FE2P_API
?C?CLDPTR . . . . . . . . . . . .  C ADDR   -----       EXT
?C?CSTPTR . . . . . . . . . . . .  C ADDR   -----       EXT
?C?IILDX. . . . . . . . . . . . .  C ADDR   -----       EXT
?C?LIMUL. . . . . . . . . . . . .  C ADDR   -----       EXT
?C?LMUL . . . . . . . . . . . . .  C ADDR   -----       EXT
?C?LSTXDATA . . . . . . . . . . .  C ADDR   -----       EXT
?C?ULCMP. . . . . . . . . . . . .  C ADDR   -----       EXT
?C?ULDIV. . . . . . . . . . . . .  C ADDR   -----       EXT
?CO?FE2P_API. . . . . . . . . . .  C SEG    0016H       REL=UNIT
?C_INITSEG. . . . . . . . . . . .  C SEG    0004H       REL=UNIT
?DECODETIMESCALE?BYTE . . . . . .  X ADDR   0000H   R   SEG=?XD?DECODETIMESCALE?FE2P_API
?FE2P_CHECKVALIDBLOCK?BYTE. . . .  X ADDR   0000H   R   SEG=?XD?FE2P_CHECKVALIDBLOCK?FE2P_API
?FE2P_SAVETOFLASH?BYTE. . . . . .  X ADDR   0000H   R   SEG=?XD?FE2P_SAVETOFLASH?FE2P_API
?PR?DECODETIMESCALE?FE2P_API. . .  C SEG    0133H       REL=UNIT
?PR?ERASETIMESCALE?FE2P_API . . .  C SEG    0039H       REL=UNIT
?PR?FE2P_API. . . . . . . . . . .  C SEG    00A0H       REL=UNIT
?PR?FE2P_CHECKVALIDBLOCK?FE2P_API  C SEG    009BH       REL=UNIT
?PR?FE2P_RAMINITIALIZE?FE2P_API .  C SEG    00BDH       REL=UNIT
?PR?FE2P_SAVETOFLASH?FE2P_API . .  C SEG    0146H       REL=UNIT
?PR?FLASH_INITPROTECTION?FE2P_API  C SEG    0010H       REL=UNIT
?PR?FLASH_PROTECTON?FE2P_API. . .  C SEG    0039H       REL=UNIT
?PR?FLASH_WP_OFF?FE2P_API . . . .  C SEG    0009H       REL=UNIT
?PR?FLASH_WP_ON?FE2P_API. . . . .  C SEG    0009H       REL=UNIT
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    42

?PR?RECORDTIMESCALE?FE2P_API. . .  C SEG    0100H       REL=UNIT
?PR?_FE2P_NVRAMREAD?FE2P_API. . .  C SEG    0054H       REL=UNIT
?PR?_FE2P_NVRAMWRITE?FE2P_API . .  C SEG    006EH       REL=UNIT
?PR?_FLASH_PROTECTOFF?FE2P_API. .  C SEG    005BH       REL=UNIT
?RECORDTIMESCALE?BYTE . . . . . .  X ADDR   0000H   R   SEG=?XD?RECORDTIMESCALE?FE2P_API
?XD?DECODETIMESCALE?FE2P_API. . .  X SEG    0007H       REL=UNIT
?XD?FE2P_API. . . . . . . . . . .  X SEG    0002H       REL=UNIT
?XD?FE2P_CHECKVALIDBLOCK?FE2P_API  X SEG    0001H       REL=UNIT
?XD?FE2P_SAVETOFLASH?FE2P_API . .  X SEG    0006H       REL=UNIT
?XD?RECORDTIMESCALE?FE2P_API. . .  X SEG    0007H       REL=UNIT
?XD?_FE2P_NVRAMREAD?FE2P_API. . .  X SEG    0006H       REL=UNIT
?XD?_FE2P_NVRAMWRITE?FE2P_API . .  X SEG    0009H       REL=UNIT
?XD?_FLASH_PROTECTOFF?FE2P_API. .  X SEG    0003H       REL=UNIT
?_FE2P_NVRAMREAD?BYTE . . . . . .  X ADDR   0000H   R   SEG=?XD?_FE2P_NVRAMREAD?FE2P_API
?_FE2P_NVRAMWRITE?BYTE. . . . . .  X ADDR   0000H   R   SEG=?XD?_FE2P_NVRAMWRITE?FE2P_API
?_FE2P_PAGEREAD?BYTE. . . . . . .  X ADDR   -----       EXT
?_FE2P_PAGEWRITE?BYTE . . . . . .  X ADDR   -----       EXT
?_FLASH_PROTECTOFF?BYTE . . . . .  X ADDR   0000H   R   SEG=?XD?_FLASH_PROTECTOFF?FE2P_API
AC. . . . . . . . . . . . . . . .  B ADDR   00D0H.6 A   
ACC . . . . . . . . . . . . . . .  D ADDR   00E0H   A   
ADDR?545. . . . . . . . . . . . .  X ADDR   0000H   R   SEG=?XD?_FE2P_NVRAMWRITE?FE2P_API
ADDR?649. . . . . . . . . . . . .  X ADDR   0000H   R   SEG=?XD?_FE2P_NVRAMREAD?FE2P_API
AR0 . . . . . . . . . . . . . . .  D ADDR   0000H   A   
AR1 . . . . . . . . . . . . . . .  D ADDR   0001H   A   
AR2 . . . . . . . . . . . . . . .  D ADDR   0002H   A   
AR3 . . . . . . . . . . . . . . .  D ADDR   0003H   A   
AR4 . . . . . . . . . . . . . . .  D ADDR   0004H   A   
AR5 . . . . . . . . . . . . . . .  D ADDR   0005H   A   
AR6 . . . . . . . . . . . . . . .  D ADDR   0006H   A   
AR7 . . . . . . . . . . . . . . .  D ADDR   0007H   A   
B . . . . . . . . . . . . . . . .  D ADDR   00F0H   A   
BFE2P_SAVE. . . . . . . . . . . .  B ADDR   0000H.0 R   SEG=?BI?FE2P_API
CH?1059 . . . . . . . . . . . . .  X ADDR   0002H   R   SEG=?XD?RECORDTIMESCALE?FE2P_API
CH?1263 . . . . . . . . . . . . .  X ADDR   0006H   R   SEG=?XD?DECODETIMESCALE?FE2P_API
CLR_WDT . . . . . . . . . . . . .  X ADDR   -----       EXT
COM008B . . . . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?FE2P_API
CPRL2 . . . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CT2 . . . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
CY. . . . . . . . . . . . . . . .  B ADDR   00D0H.7 A   
DAT?444 . . . . . . . . . . . . .  X ADDR   0000H   R   SEG=?XD?FE2P_CHECKVALIDBLOCK?FE2P_API
DECODETIMESCALE . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?DECODETIMESCALE?FE2P_API
DPH . . . . . . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . . . . . . .  D ADDR   0082H   A   
EA. . . . . . . . . . . . . . . .  B ADDR   00A8H.7 A   
ERASETIMESCALE. . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?ERASETIMESCALE?FE2P_API
ES. . . . . . . . . . . . . . . .  B ADDR   00A8H.4 A   
ET0 . . . . . . . . . . . . . . .  B ADDR   00A8H.1 A   
ET1 . . . . . . . . . . . . . . .  B ADDR   00A8H.3 A   
ET2 . . . . . . . . . . . . . . .  B ADDR   00A8H.5 A   
EX0 . . . . . . . . . . . . . . .  B ADDR   00A8H.0 A   
EX1 . . . . . . . . . . . . . . .  B ADDR   00A8H.2 A   
EXEN2 . . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXF2. . . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
F0. . . . . . . . . . . . . . . .  B ADDR   00D0H.5 A   
FE2P_API. . . . . . . . . . . . .  N NUMB   -----       
FE2P_CHECKVALIDBLOCK. . . . . . .  C ADDR   0000H   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
FE2P_GET_LIB_VER. . . . . . . . .  C ADDR   -----       EXT
FE2P_RAMINITIALIZE. . . . . . . .  C ADDR   0000H   R   SEG=?PR?FE2P_RAMINITIALIZE?FE2P_API
FE2P_RDSR . . . . . . . . . . . .  C ADDR   -----       EXT
FE2P_SAVETOFLASH. . . . . . . . .  C ADDR   0000H   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
FE2P_WRITEENABLE. . . . . . . . .  C ADDR   -----       EXT
FLASH_INITPROTECTION. . . . . . .  C ADDR   0000H   R   SEG=?PR?FLASH_INITPROTECTION?FE2P_API
FLASH_PROTECTON . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?FLASH_PROTECTON?FE2P_API
FLASH_WP_OFF. . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?FLASH_WP_OFF?FE2P_API
FLASH_WP_ON . . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?FLASH_WP_ON?FE2P_API
I?548 . . . . . . . . . . . . . .  X ADDR   0007H   R   SEG=?XD?_FE2P_NVRAMWRITE?FE2P_API
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    43

I?652 . . . . . . . . . . . . . .  X ADDR   0004H   R   SEG=?XD?_FE2P_NVRAMREAD?FE2P_API
I?755 . . . . . . . . . . . . . .  X ADDR   0004H   R   SEG=?XD?FE2P_SAVETOFLASH?FE2P_API
IE. . . . . . . . . . . . . . . .  D ADDR   00A8H   A   
IE0 . . . . . . . . . . . . . . .  B ADDR   0088H.1 A   
IE1 . . . . . . . . . . . . . . .  B ADDR   0088H.3 A   
IP. . . . . . . . . . . . . . . .  D ADDR   00B8H   A   
IT0 . . . . . . . . . . . . . . .  B ADDR   0088H.0 A   
IT1 . . . . . . . . . . . . . . .  B ADDR   0088H.2 A   
L?0140. . . . . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?FE2P_API
L?0141. . . . . . . . . . . . . .  C ADDR   0005H   R   SEG=?PR?FE2P_API
L?0142. . . . . . . . . . . . . .  C ADDR   0009H   R   SEG=?PR?FE2P_API
L?0143. . . . . . . . . . . . . .  C ADDR   005BH   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
L?0144. . . . . . . . . . . . . .  C ADDR   0014H   R   SEG=?PR?FE2P_API
L?0145. . . . . . . . . . . . . .  C ADDR   0014H   R   SEG=?PR?FE2P_API
L?0146. . . . . . . . . . . . . .  C ADDR   001DH   R   SEG=?PR?FE2P_API
L?0147. . . . . . . . . . . . . .  C ADDR   006BH   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
L?0148. . . . . . . . . . . . . .  C ADDR   007BH   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
L?0149. . . . . . . . . . . . . .  C ADDR   0025H   R   SEG=?PR?FE2P_API
L?0150. . . . . . . . . . . . . .  C ADDR   002EH   R   SEG=?PR?FE2P_API
L?0151. . . . . . . . . . . . . .  C ADDR   0041H   R   SEG=?PR?FE2P_API
L?0152. . . . . . . . . . . . . .  C ADDR   0049H   R   SEG=?PR?FE2P_API
L?0153. . . . . . . . . . . . . .  C ADDR   0052H   R   SEG=?PR?FE2P_API
L?0154. . . . . . . . . . . . . .  C ADDR   0052H   R   SEG=?PR?FE2P_API
L?0155. . . . . . . . . . . . . .  C ADDR   013AH   R   SEG=?PR?FE2P_SAVETOFLASH?FE2P_API
L?0156. . . . . . . . . . . . . .  C ADDR   008BH   R   SEG=?PR?FE2P_CHECKVALIDBLOCK?FE2P_API
L?0157. . . . . . . . . . . . . .  C ADDR   0059H   R   SEG=?PR?FE2P_API
L?0158. . . . . . . . . . . . . .  C ADDR   0062H   R   SEG=?PR?FE2P_API
L?0159. . . . . . . . . . . . . .  C ADDR   0062H   R   SEG=?PR?FE2P_API
L?0160. . . . . . . . . . . . . .  C ADDR   0068H   R   SEG=?PR?FE2P_API
L?0161. . . . . . . . . . . . . .  C ADDR   0074H   R   SEG=?PR?FE2P_API
L?0162. . . . . . . . . . . . . .  C ADDR   0080H   R   SEG=?PR?FE2P_API
L?0163. . . . . . . . . . . . . .  C ADDR   0081H   R   SEG=?PR?FE2P_API
L?0164. . . . . . . . . . . . . .  C ADDR   0087H   R   SEG=?PR?FE2P_API
L?0165. . . . . . . . . . . . . .  C ADDR   0088H   R   SEG=?PR?FE2P_API
L?0166. . . . . . . . . . . . . .  C ADDR   008FH   R   SEG=?PR?FE2P_API
L?0167. . . . . . . . . . . . . .  C ADDR   008FH   R   SEG=?PR?FE2P_API
L?0168. . . . . . . . . . . . . .  C ADDR   0096H   R   SEG=?PR?FE2P_API
LENGTH?546. . . . . . . . . . . .  X ADDR   0002H   R   SEG=?XD?_FE2P_NVRAMWRITE?FE2P_API
LENGTH?650. . . . . . . . . . . .  X ADDR   0002H   R   SEG=?XD?_FE2P_NVRAMREAD?FE2P_API
OFFSET?1057 . . . . . . . . . . .  X ADDR   0000H   R   SEG=?XD?RECORDTIMESCALE?FE2P_API
OFFSET?1262 . . . . . . . . . . .  X ADDR   0004H   R   SEG=?XD?DECODETIMESCALE?FE2P_API
OFFSET?141. . . . . . . . . . . .  X ADDR   0000H   R   SEG=?XD?_FLASH_PROTECTOFF?FE2P_API
OFFSET?753. . . . . . . . . . . .  X ADDR   0000H   R   SEG=?XD?FE2P_SAVETOFLASH?FE2P_API
OLD_OFFSET?754. . . . . . . . . .  X ADDR   0002H   R   SEG=?XD?FE2P_SAVETOFLASH?FE2P_API
OV. . . . . . . . . . . . . . . .  B ADDR   00D0H.2 A   
P . . . . . . . . . . . . . . . .  B ADDR   00D0H.0 A   
P0. . . . . . . . . . . . . . . .  D ADDR   0080H   A   
P00 . . . . . . . . . . . . . . .  B ADDR   0080H.0 A   
P01 . . . . . . . . . . . . . . .  B ADDR   0080H.1 A   
P02 . . . . . . . . . . . . . . .  B ADDR   0080H.2 A   
P03 . . . . . . . . . . . . . . .  B ADDR   0080H.3 A   
P04 . . . . . . . . . . . . . . .  B ADDR   0080H.4 A   
P05 . . . . . . . . . . . . . . .  B ADDR   0080H.5 A   
P06 . . . . . . . . . . . . . . .  B ADDR   0080H.6 A   
P07 . . . . . . . . . . . . . . .  B ADDR   0080H.7 A   
P1. . . . . . . . . . . . . . . .  D ADDR   0090H   A   
P10 . . . . . . . . . . . . . . .  B ADDR   0090H.0 A   
P11 . . . . . . . . . . . . . . .  B ADDR   0090H.1 A   
P12 . . . . . . . . . . . . . . .  B ADDR   0090H.2 A   
P13 . . . . . . . . . . . . . . .  B ADDR   0090H.3 A   
P14 . . . . . . . . . . . . . . .  B ADDR   0090H.4 A   
P15 . . . . . . . . . . . . . . .  B ADDR   0090H.5 A   
P16 . . . . . . . . . . . . . . .  B ADDR   0090H.6 A   
P17 . . . . . . . . . . . . . . .  B ADDR   0090H.7 A   
P2. . . . . . . . . . . . . . . .  D ADDR   00A0H   A   
P20 . . . . . . . . . . . . . . .  B ADDR   00A0H.0 A   
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    44

P21 . . . . . . . . . . . . . . .  B ADDR   00A0H.1 A   
P22 . . . . . . . . . . . . . . .  B ADDR   00A0H.2 A   
P23 . . . . . . . . . . . . . . .  B ADDR   00A0H.3 A   
P24 . . . . . . . . . . . . . . .  B ADDR   00A0H.4 A   
P25 . . . . . . . . . . . . . . .  B ADDR   00A0H.5 A   
P26 . . . . . . . . . . . . . . .  B ADDR   00A0H.6 A   
P27 . . . . . . . . . . . . . . .  B ADDR   00A0H.7 A   
P3. . . . . . . . . . . . . . . .  D ADDR   00B0H   A   
P30 . . . . . . . . . . . . . . .  B ADDR   00B0H.0 A   
P31 . . . . . . . . . . . . . . .  B ADDR   00B0H.1 A   
P32 . . . . . . . . . . . . . . .  B ADDR   00B0H.2 A   
P33 . . . . . . . . . . . . . . .  B ADDR   00B0H.3 A   
P34 . . . . . . . . . . . . . . .  B ADDR   00B0H.4 A   
P35 . . . . . . . . . . . . . . .  B ADDR   00B0H.5 A   
P36 . . . . . . . . . . . . . . .  B ADDR   00B0H.6 A   
P37 . . . . . . . . . . . . . . .  B ADDR   00B0H.7 A   
PCON. . . . . . . . . . . . . . .  D ADDR   0087H   A   
PMC_SECTOR_LOCK . . . . . . . . .  C ADDR   -----       EXT
PS. . . . . . . . . . . . . . . .  B ADDR   00B8H.4 A   
PSW . . . . . . . . . . . . . . .  D ADDR   00D0H   A   
PT0 . . . . . . . . . . . . . . .  B ADDR   00B8H.1 A   
PT1 . . . . . . . . . . . . . . .  B ADDR   00B8H.3 A   
PT2 . . . . . . . . . . . . . . .  B ADDR   00B8H.5 A   
PTR?547 . . . . . . . . . . . . .  X ADDR   0004H   R   SEG=?XD?_FE2P_NVRAMWRITE?FE2P_API
PX0 . . . . . . . . . . . . . . .  B ADDR   00B8H.0 A   
PX1 . . . . . . . . . . . . . . .  B ADDR   00B8H.2 A   
RB8 . . . . . . . . . . . . . . .  B ADDR   0098H.2 A   
RCAP2H. . . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP2L. . . . . . . . . . . . . .  D ADDR   00CAH   A   
RCLK. . . . . . . . . . . . . . .  B ADDR   00C8H.5 A   
RECORDTIMESCALE . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?RECORDTIMESCALE?FE2P_API
REN . . . . . . . . . . . . . . .  B ADDR   0098H.4 A   
RI. . . . . . . . . . . . . . . .  B ADDR   0098H.0 A   
RS0 . . . . . . . . . . . . . . .  B ADDR   00D0H.3 A   
RS1 . . . . . . . . . . . . . . .  B ADDR   00D0H.4 A   
SBUF. . . . . . . . . . . . . . .  D ADDR   0099H   A   
SCALETAB?1056 . . . . . . . . . .  C ADDR   000EH   R   SEG=?CO?FE2P_API
SCON. . . . . . . . . . . . . . .  D ADDR   0098H   A   
SM0 . . . . . . . . . . . . . . .  B ADDR   0098H.7 A   
SM1 . . . . . . . . . . . . . . .  B ADDR   0098H.6 A   
SM2 . . . . . . . . . . . . . . .  B ADDR   0098H.5 A   
SP. . . . . . . . . . . . . . . .  D ADDR   0081H   A   
SYSTEMDATA. . . . . . . . . . . .  X ADDR   -----       EXT
T2CON . . . . . . . . . . . . . .  D ADDR   00C8H   A   
TB8 . . . . . . . . . . . . . . .  B ADDR   0098H.3 A   
TCLK. . . . . . . . . . . . . . .  B ADDR   00C8H.4 A   
TCON. . . . . . . . . . . . . . .  D ADDR   0088H   A   
TEMP?1060 . . . . . . . . . . . .  X ADDR   0003H   R   SEG=?XD?RECORDTIMESCALE?FE2P_API
TEMP?1261 . . . . . . . . . . . .  X ADDR   0000H   R   SEG=?XD?DECODETIMESCALE?FE2P_API
TF0 . . . . . . . . . . . . . . .  B ADDR   0088H.5 A   
TF1 . . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
TF2 . . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
TH0 . . . . . . . . . . . . . . .  D ADDR   008CH   A   
TH1 . . . . . . . . . . . . . . .  D ADDR   008DH   A   
TH2 . . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TI. . . . . . . . . . . . . . . .  B ADDR   0098H.1 A   
TL0 . . . . . . . . . . . . . . .  D ADDR   008AH   A   
TL1 . . . . . . . . . . . . . . .  D ADDR   008BH   A   
TL2 . . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMOD. . . . . . . . . . . . . . .  D ADDR   0089H   A   
TR0 . . . . . . . . . . . . . . .  B ADDR   0088H.4 A   
TR1 . . . . . . . . . . . . . . .  B ADDR   0088H.6 A   
TR2 . . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
UCFE2PAUTODETECTINFO. . . . . . .  C ADDR   0000H   R   SEG=?CO?FE2P_API
UCFE2P_BUFFER . . . . . . . . . .  X ADDR   A800H   A   
UCFE2P_RDSR?142 . . . . . . . . .  X ADDR   0002H   R   SEG=?XD?_FLASH_PROTECTOFF?FE2P_API
A51 MACRO ASSEMBLER  FE2P_API                                                             01/06/2017 14:56:51 PAGE    45

UCFE2P_VALID_BLOCK. . . . . . . .  X ADDR   0000H   R   SEG=?XD?FE2P_API
UCFLASHID . . . . . . . . . . . .  X ADDR   0001H   R   SEG=?XD?FE2P_API
_FE2P_BYTEREAD. . . . . . . . . .  C ADDR   -----       EXT
_FE2P_BYTEWRITE . . . . . . . . .  C ADDR   -----       EXT
_FE2P_INIT. . . . . . . . . . . .  C ADDR   -----       EXT
_FE2P_NVRAMREAD . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_FE2P_NVRAMREAD?FE2P_API
_FE2P_NVRAMWRITE. . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_FE2P_NVRAMWRITE?FE2P_API
_FE2P_PAGEREAD. . . . . . . . . .  C ADDR   -----       EXT
_FE2P_PAGEWRITE . . . . . . . . .  C ADDR   -----       EXT
_FE2P_SECTORERASE . . . . . . . .  C ADDR   -----       EXT
_FE2P_SETOFFSET . . . . . . . . .  C ADDR   -----       EXT
_FE2P_SETPROTECT. . . . . . . . .  C ADDR   -----       EXT
_FE2P_SET_SPI_CMD_BUFFER_ADDR . .  C ADDR   -----       EXT
_FLASH_PROTECTOFF . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_FLASH_PROTECTOFF?FE2P_API
_MCUSETIOBIT. . . . . . . . . . .  C ADDR   -----       EXT
_NVRAMINITIALIZE. . . . . . . . .  C ADDR   -----       EXT
_PMC_SECTOR_UNLOCK. . . . . . . .  C ADDR   -----       EXT


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
