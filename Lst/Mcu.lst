C51 COMPILER V9.54   MCU                                                                   01/06/2017 14:56:43 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MCU
OBJECT MODULE PLACED IN .\Bin\Mcu.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Lib\Mcu.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\App\OSD;.\App\Us
                    -er;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\Phy\SI\NVT\Keypad;
                    -.\Sys;.\Sys\SI\NVT;.\Phy\SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_MODULE,LVIEW_2560X1440,
                    -FLASH_BANK=8) PRINT(.\Lst\Mcu.lst) TABS(2) OBJECT(.\Bin\Mcu.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          #include "ScalerProfile.h"
  14          
  15          //******************************************************************************
  16          // M A C R O   D E F I N I T I O N S
  17          //******************************************************************************
  18          #define IIC_MASK_VALUE 0x83 /*!< IIC mask. */
  19          
  20          //******************************************************************************
  21          // G L O B A L   D E F I N I T I O N S
  22          //******************************************************************************
  23          
  24          //******************************************************************************
  25          // G L O B A L   V A R I A B L E S
  26          //******************************************************************************
  27          BOOL bIsAPLLPowerDown = FALSE; /*! < Status of APLL power down. */
  28          UCHAR ucTL0_Normal_Power=0,ucTH0_Normal_Power=0;
  29          UCHAR ucTL0_LOW_POWER=0,ucTH0_LOW_POWER=0,ucTL0_LOW_POWER_3M=0,ucTH0_LOW_POWER_3M=0;
  30          
  31          //******************************************************************************
  32          // S T A T I C   V A R I A B L E S
  33          //******************************************************************************
  34          static code UCHAR MCU_CLK[9] = CPU_CLK_TABLE;
  35          
  36          //******************************************************************************
  37          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  38          //******************************************************************************
  39          
  40          //******************************************************************************
  41          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  42          //******************************************************************************
  43          static void McuInitIO(void);
  44          static void McuInitADC(void);
  45          static void McuInitPWM(void);
  46          static void McuInitDDC(void);
  47          static void McuInitIIC(void);
  48          static void McuInitMisc(void);
  49          static void McuInitCore(void);
  50          static BOOL McuCheckPwrStable(void);
  51          
  52          //******************************************************************************
C51 COMPILER V9.54   MCU                                                                   01/06/2017 14:56:43 PAGE 2   

  53          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
  54          //******************************************************************************
  55          
  56          //******************************************************************************
  57          // F U N C T I O N   B O D Y S
  58          //******************************************************************************
  59          
  60          /**************************************************************************//**
  61           * MCU to Speed.
  62           ******************************************************************************/
  63          ULONG GetMCUTimer0Speed(void)
  64          {
  65   1       return (ULONG)(((float)MCU_CLK[MCU_CLK_TIMES] / 12 * ((float)REF_CLK / 12000000)) * 1000);
  66   1      }
  67          
  68          /**************************************************************************//**
  69           * Get CPU Clock.
  70           ******************************************************************************/
  71          ULONG GetCPUClcok(void)
  72          {
  73   1       return (ULONG)(MCU_CLK[MCU_CLK_TIMES] * 1000000 * ((float)REF_CLK/12000000));
  74   1      }
  75          
  76          /**************************************************************************//**
  77           * Get UART Time.
  78           ******************************************************************************/
  79          UCHAR GetUARTTimer(ULONG speed)
  80          {
  81   1          return (UCHAR)((float)speed * 2 / 384 / MCU_UART_BAUD_RATE + 0.5);
  82   1      }
  83          
  84          /**************************************************************************//**
  85           * MCU Initialization. MCU TIMER, SPEED, UART, I/O, ADC, PWM, ... etc. will be initialized.
  86           ******************************************************************************/
  87          void McuInitialize(void)
  88          {
  89   1      #if IS_NT68810_SERIES || IS_NT68870_SERIES
  90   1          USHRT j;
  91   1          SC_MPLL_B3E = 0xFE;//0xF2;//WRITE     B0    B3E  F2   
  92   1          SC_MPLL_B3F = 0xA1;//0x51;//WRITE     B0    B3F  51
  93   1          SC_MPLL_B45 = 0x71;//0x60;//WRITE     B0    B45  60
  94   1      #if 1//PSON = 1
  95   1          SC_ZERO_PWR_CTRL_B66 |= BIT4;
  96   1          SC_ZERO_PWR_CTRL_B66 |= BIT7;
  97   1          for(j=0; j<10000; j++) ResetWDTimer();//delay 20ms
  98   1      #endif
  99   1      #endif
 100   1          McuInitIO();
 101   1          ResetWDTimer();
 102   1          McuInitADC();
 103   1          McuInitMisc();
 104   1      #if ENABLE_LPD == ON
 105   1          McuInitLPD();
 106   1      #endif
 107   1      #if IS_NT68810_SERIES || IS_NT68870_SERIES
 108   1      #if MD_ENABLE_AO_DETECT == ON
              #if ENABLE_FE2P == ON && USE_INTERNAL_EDID == 1
                  FE2P_LoadDDC();
              #endif
                  McuInitDDC();
                  CPU_CLK = 0x10;//MCU_CLK_TIMES << 4; // Restore CPU clock
                  SC_HW_RST = 0x90; //Scaler will always stay in reset status
C51 COMPILER V9.54   MCU                                                                   01/06/2017 14:56:43 PAGE 3   

                  while (McuCheckPwrStable() == FALSE) {
              //        McuSetIOBit(MCU_PORT_C, BIT6, HIGH);
                      ResetWDTimer();
              //        McuSetIOBit(MCU_PORT_C, BIT6, LOW);
                  }
              #endif
 121   1      #endif
 122   1      
 123   1      #if ENABLE_FE2P == ON
 124   1          FE2P_RamInitialize();
 125   1      #endif
 126   1      #if USE_INTERNAL_EDID == 1
 127   1      #if ENABLE_EDID_TRIM_MODE == ON
                  if (InitEDIDTrim() == FALSE) {
                      NvramLoadEDID();
                  }
              #else
 132   1          NvramLoadEDID();
 133   1      #endif
 134   1      #endif
 135   1          McuInitDDC();
 136   1          
 137   1          while (McuCheckPwrStable() == FALSE) {
 138   2      //        McuSetIOBit(MCU_PORT_C, BIT6, HIGH);
 139   2              ResetWDTimer();
 140   2      //        McuSetIOBit(MCU_PORT_C, BIT6, LOW);
 141   2          }
 142   1          McuInitIIC();
 143   1      
 144   1      #if IS_NT68168_SERIES
                  McuInitPWM();
              #endif
 147   1          McuInitCore();
 148   1      }
 149          
 150          /**************************************************************************//**
 151           * Initialize MCU I/O port A ~ E.
 152           ******************************************************************************/
 153           
 154          static void McuInitIO(void)
 155          {
 156   1      #if ENABLE_NEW_MCU_IO == 1
 157   1          McuCfgIOType(MCU_PORT_A, PORT_A_DEFAULT_PP, PORT_A_DEFAULT_PU);
 158   1          McuCfgIOType(MCU_PORT_B, PORT_B_DEFAULT_PP, PORT_B_DEFAULT_PU);
 159   1          McuCfgIOType(MCU_PORT_C, PORT_C_DEFAULT_PP, PORT_C_DEFAULT_PU);
 160   1          McuCfgIOType(MCU_PORT_D, PORT_D_DEFAULT_PP, PORT_D_DEFAULT_PU);
 161   1      #ifdef PORT_E_DEFAULT_PP
 162   1          McuCfgIOType(MCU_PORT_E, PORT_E_DEFAULT_PP, PORT_E_DEFAULT_PU);
 163   1      #endif
 164   1      #ifdef PORT_3_DEFAULT_PP
 165   1          McuCfgIOType(MCU_PORT_3, PORT_3_DEFAULT_PP, PORT_3_DEFAULT_PU);
 166   1      #endif
 167   1      #endif
 168   1          McuSetIOByte(MCU_PORT_A, PORT_A_DEFAULT_OUT);
 169   1          McuSetIOByte(MCU_PORT_B, PORT_B_DEFAULT_OUT);
 170   1          McuSetIOByte(MCU_PORT_C, PORT_C_DEFAULT_OUT);
 171   1          McuSetIOByte(MCU_PORT_D, PORT_D_DEFAULT_OUT);
 172   1          McuSetIOByte(MCU_PORT_E, PORT_E_DEFAULT_OUT);
 173   1      #ifdef PORT_3_DEFAULT_OUT 
 174   1          McuSetIOByte(MCU_PORT_3, PORT_3_DEFAULT_OUT);
 175   1      #endif    
 176   1          McuSetIODirByte(MCU_PORT_A, PORT_A_DEFAULT_DIR);
C51 COMPILER V9.54   MCU                                                                   01/06/2017 14:56:43 PAGE 4   

 177   1          McuSetIODirByte(MCU_PORT_B, PORT_B_DEFAULT_DIR);
 178   1          McuSetIODirByte(MCU_PORT_C, PORT_C_DEFAULT_DIR);
 179   1          McuSetIODirByte(MCU_PORT_D, PORT_D_DEFAULT_DIR);
 180   1          McuSetIODirByte(MCU_PORT_E, PORT_E_DEFAULT_DIR);
 181   1      }
 182          
 183          /**************************************************************************//**
 184           * Initialize all MCU ADC channels.
 185           ******************************************************************************/
 186          static void McuInitADC(void)
 187          {
 188   1          McuDisableADC(~MCU_ADC_CON_DEFAULT);
 189   1          McuEnableADC(MCU_ADC_CON_DEFAULT);
 190   1      }
 191          
 192          /**************************************************************************//**
 193           * Initialize all MCU PWM channels.
 194           ******************************************************************************/
 195          #if IS_NT68168_SERIES
              static void McuInitPWM(void)
              {
                  McuDisablePWM(~MCU_PWM_CON_DEFAULT);
                  McuSetPWM(MCU_PWM_0, MCU_PWM_0_DEFAULT);
                  McuSetPWM(MCU_PWM_1, MCU_PWM_1_DEFAULT);
                  McuSetPWM(MCU_PWM_2, MCU_PWM_2_DEFAULT);
                  McuSetPWM(MCU_PWM_3, MCU_PWM_3_DEFAULT);
                  McuSetPWM(MCU_PWM_4, MCU_PWM_4_DEFAULT);
                  McuSetPWM(MCU_PWM_5, MCU_PWM_5_DEFAULT);
                  McuSetPWM(MCU_PWM_6, MCU_PWM_6_DEFAULT);
                  McuSetPWM(MCU_PWM_7, MCU_PWM_7_DEFAULT);
                  McuSetPWM(MCU_PWM_8, MCU_PWM_8_DEFAULT);
                  McuSetPWM(MCU_PWM_9, MCU_PWM_9_DEFAULT);
                  McuSetPWM(MCU_PWM_10, MCU_PWM_10_DEFAULT);
                  McuSetPWM(MCU_PWM_11, MCU_PWM_11_DEFAULT);
                  McuEnablePWM(MCU_PWM_CON_DEFAULT);
              }
              #endif
 214          /**************************************************************************//**
 215           * Initialize all MCU DDC channels.
 216           ******************************************************************************/
 217          static void McuInitDDC(void)
 218          {
 219   1          McuDisableDDC(~MCU_DDC_CON_DEFAULT);
 220   1          McuSetDDC(MCU_DDC_0, MCU_DDC0_ADDRESS, MCU_DDC0_EDIDLEN);
 221   1          McuSetDDC(MCU_DDC_1, MCU_DDC1_ADDRESS, MCU_DDC1_EDIDLEN);
 222   1          McuSetDDC(MCU_DDC_2, MCU_DDC2_ADDRESS, MCU_DDC2_EDIDLEN);
 223   1          McuSetDDC(MCU_DDC_3, MCU_DDC3_ADDRESS, MCU_DDC3_EDIDLEN);
 224   1      #if IS_NT68870_SERIES
 225   1          McuSetDDC(MCU_DDC_4, MCU_DDC4_ADDRESS, MCU_DDC4_EDIDLEN);
 226   1      #endif
 227   1          McuEnableDDC(MCU_DDC_CON_DEFAULT);
 228   1      }
 229          
 230          /**************************************************************************//**
 231           * Initialize all MCU IIC channels.
 232           ******************************************************************************/
 233          static void McuInitIIC(void)
 234          {
 235   1          McuDisableIIC(~MCU_IIC_CON_DEFAULT);
 236   1          McuSetIIC(MCU_IIC_0, MCU_IIC0_ADDRESS);
 237   1          McuSetIIC(MCU_IIC_1, MCU_IIC1_ADDRESS);
 238   1          McuSetIIC(MCU_IIC_2, MCU_IIC2_ADDRESS);
C51 COMPILER V9.54   MCU                                                                   01/06/2017 14:56:43 PAGE 5   

 239   1          McuSetIIC(MCU_IIC_3, MCU_IIC3_ADDRESS);
 240   1      #if IS_NT68870_SERIES
 241   1          McuSetIIC(MCU_IIC_4, MCU_IIC4_ADDRESS);
 242   1      #endif
 243   1          McuEnableIIC(MCU_IIC_CON_DEFAULT);
 244   1          McuIICPreSendACK(MCU_IIC_CON_DEFAULT);
 245   1      }
 246          
 247          /**************************************************************************//**
 248           * Initialize other necessary MCU registers.
 249           ******************************************************************************/
 250          static void McuInitMisc(void)
 251          {
 252   1          INT_SRC = 0x00; //Clear interrupt source flags
 253   1          INTEXT_FLG = 0xFF; //Clear all external interrupt flags
 254   1          INTEXT_EN = 0x00; //Disable all external interrupts
 255   1      #if IS_NT68810_SERIES || IS_NT68870_SERIES
 256   1          LDO_ADJ = (LDO_ADJ&0x0F) | 0x90;//0x10; //Power down APLL, but Power up MCU ADC for 5V detection
 257   1      #else
                  SC_HW_RST = 0x90; //Scaler will always stay in reset status
                  LDO_ADJ = (LDO_ADJ&0x0F) | 0x10; //Power down APLL, but Power up MCU ADC for 5V detection
              #endif
 261   1          UART_MUX = MCU_UART_OUTPUT; //Uart output: IIC channel
 262   1          INTSC_EN = 0x01; //MCU allow scaler interrupt
 263   1          HDCP_MUX = DIGITAL_INPUT0_HDCP_MUX; //Set default HDCP channel
 264   1          IIC_MASK = IIC_MASK_VALUE; // Set I2C Mask for I2C/DDCCi Compatibilities
 265   1      #if ENABLE_LOW_PWR_MODE == ON
 266   1          SC_ADC_ZERO_POWER_CTRL |= 0x83; // Enable scaler register read/write// 0xb57
 267   1      #endif
 268   1      
 269   1      #if ENABLE_FLASH_IDLE_MODE == ON
 270   1          SPI_OPTION |= BIT6;
 271   1          SPI_IDLE_CNT = 0x80;
 272   1      #endif
 273   1      
 274   1      #if IS_NT68770_SERIES_LATER || IS_NT68169_SERIES
 275   1      #if MD_ENABLE_AO_DETECT == OFF
 276   1          AO_DETECT |= BIT3;
 277   1      #endif
 278   1      #endif
 279   1      SC_CR_MUX = HDMI_DDC_CHANNEL;
 280   1      }
 281          
 282          /**************************************************************************//**
 283           * Initialize MCU core (basic 8051 SFR).
 284           ******************************************************************************/
 285          static void McuInitCore(void)
 286          {
 287   1          CPU_CLK = MCU_CLK_TIMES << 4;
 288   1          ucTL0_Normal_Power = (UCHAR)((65536-GetMCUTimer0Speed())%256);
 289   1          ucTH0_Normal_Power = (UCHAR)((65536-GetMCUTimer0Speed())/256);  
 290   1          ucTL0_LOW_POWER = (UCHAR)((65536-(USHRT)((float)REF_CLK/12000000*1000+0.5))%256);
 291   1          ucTH0_LOW_POWER = (UCHAR)((65536-(USHRT)((float)REF_CLK/12000000*1000+0.5))/256);
 292   1          ucTL0_LOW_POWER_3M = (UCHAR)((65536-(USHRT)((float)REF_CLK/12000000*250+0.5))%256);
 293   1          ucTH0_LOW_POWER_3M = (UCHAR)((65536-(USHRT)((float)REF_CLK/12000000*250+0.5))/256);
 294   1      
 295   1       
 296   1          McuPowerUpAPLL(); //Power up APLL after CPU clock was changed by NT68674 MCU APN.
 297   1      
 298   1          SCON = 0x52; //9-bit UART
 299   1          TMOD = 0x21; //Timer0: 16-bit timer, Timer1: 8-bit auto load 
 300   1          PCON = 0x80; //UART baud rate double
C51 COMPILER V9.54   MCU                                                                   01/06/2017 14:56:43 PAGE 6   

 301   1          TR0 = 1; //Start timer 0
 302   1          TR1 = 1; //Start timer 1
 303   1      
 304   1          //Set interrupt
 305   1          EX0 = 1; //Enable External Interrupt 0
 306   1          EX1 = 1; //Enable External Interrupt 1
 307   1          ET0 = 1; //Enable Timer 0 Interrupt
 308   1      #if ENABLE_SERIAL_INT == ON
 309   1          ES = 1;  //Enable Serial Port Interrupt    
 310   1      #endif
 311   1      }
 312          
 313          /**************************************************************************//**
 314           * Check the system power (5V) stable or not.
 315           * @return TRUE if system power is stable else FALSE.
 316           ******************************************************************************/
 317          static BOOL McuCheckPwrStable(void)
 318          {
 319   1          UCHAR i;
 320   1      
 321   1          for (i=0; i<=10; i++) {
 322   2              if (McuCheck5V() == FALSE) {
 323   3                  return FALSE;
 324   3              }
 325   2          }
 326   1          
 327   1          return TRUE;
 328   1      }
 329          
 330          /**************************************************************************//**
 331           * Check system power is present or not.
 332           * @return TRUE if system power is present else FALSE.
 333           ******************************************************************************/
 334          BOOL McuCheck5V(void)
 335          {
 336   1      #if ENABLE_CHECK_SYS5V == ON
 337   1      #if ENABLE_LPD == ON
 338   1          if ((INTEXT_FLG & INT_LPD) != 0) {
 339   2              INTEXT_FLG = INT_LPD;
 340   2              return FALSE;
 341   2          }
 342   1      #else
                  McuPowerUpADC();
                  McuStartADC();
                  McuWaitADCComplete();
                  if (McuGetADC(POWER_DETEC_ADC) < POWER_THRESHOLD) {
                      return FALSE;
                  }
                  McuPowerDownADC();
              #endif
 351   1      #endif
 352   1          return TRUE;
 353   1      }
 354          
 355          #if IS_NT68810_SERIES || IS_NT68870_SERIES
 356          extern void set_b62(void);
 357          void WaitLDOReady(void)
 358          {
 359   1          UCHAR i;
 360   1          for(i=0; i<10; i++) {
 361   2              ResetWDTimer();//delay 1ms
 362   2          }
C51 COMPILER V9.54   MCU                                                                   01/06/2017 14:56:43 PAGE 7   

 363   1      }
 364          #endif
 365          /**************************************************************************//**
 366           * Turn on APLL power.
 367           ******************************************************************************/
 368          void McuPowerUpAPLL(void)
 369          {
 370   1          bIsAPLLPowerDown = FALSE;
 371   1      
 372   1          //Setup timer 0
 373   1          TL0 = ucTL0_Normal_Power;
 374   1          TH0 = ucTH0_Normal_Power;
 375   1      
 376   1          //Setup timer 1
 377   1          TL1 = 256 - GetUARTTimer(GetCPUClcok());
 378   1          TH1 = 256 - GetUARTTimer(GetCPUClcok());
 379   1          
 380   1      #if IS_NT68810_SERIES || IS_NT68870_SERIES
 381   1      #if IS_NT68810_SERIES || IS_NT68870_SERIES
 382   1          SC_APR_LDO_CTRL = 0x60;
 383   1      //    McuSetIOBit(MCU_PORT_C, BIT6, LOW);
 384   1          WaitLDOReady();
 385   1      //    McuSetIOBit(MCU_PORT_C, BIT6, HIGH);
 386   1          EA = 0;
 387   1          SC_POWER_CTRL1 |= BIT7;//power on 101[7]
 388   1          set_b62();
 389   1          EA = 1;
 390   1          SC_POWER_CTRL1 &= ~BIT7;//power on 101[7]
 391   1          WaitLDOReady();
 392   1      #endif
 393   1      #endif
 394   1          CPU_CLK = MCU_CLK_TIMES << 4; // Restore CPU clock
 395   1      
 396   1      #if (!IS_NT68168_SERIES) && (!IS_NT68668_SERIES) && (!IS_NT68669_SERIES) && (!IS_NT68671_SERIES) && (!IS_N
             -T68674_SERIES) && (!IS_NT68676_SERIES)
 397   1          if (((CPU_CLK & 0xF0) == 0x00) || ((CPU_CLK & 0xF0) == 0x10)) {
 398   2              if (!(LDO_ADJ & BIT7)) {
 399   3                  SC_ADC_ZERO_POWER_CTRL |= 0x83;// 0xb57
 400   3                  SC_MCU_PLL &= ~BIT1;    // APnote: When MCU CLK is 12Mhz,
 401   3                                          // we need to set 0xB04[0] as 0 before APLL power up.
 402   3              }
 403   2          }
 404   1      #endif
 405   1          LDO_ADJ |= BIT7; //Power up APLL
 406   1      
 407   1      #if IS_NT68671_SERIES
                  IIC_MASK = IIC_MASK_VALUE; // Set I2C Mask for I2C/DDCCi Compatibilities
              #endif
 410   1      }
 411          
 412          /**************************************************************************//**
 413           * Turn off APLL power.
 414           ******************************************************************************/
 415          void McuPowerDownAPLL(void)
 416          {
 417   1          bIsAPLLPowerDown = TRUE;
 418   1      
 419   1          //Setup timer 0
 420   1          TL0 = ucTL0_LOW_POWER;
 421   1          TH0 = ucTH0_LOW_POWER;
 422   1      
 423   1          //Setup timer 1
C51 COMPILER V9.54   MCU                                                                   01/06/2017 14:56:43 PAGE 8   

 424   1          TL1 = 256 - GetUARTTimer(REF_CLK);
 425   1          TH1 = 256 - GetUARTTimer(REF_CLK);
 426   1      #if (!IS_NT68168_SERIES) && (!IS_NT68668_SERIES) && (!IS_NT68669_SERIES) && (!IS_NT68671_SERIES) && (!IS_N
             -T68674_SERIES) && (!IS_NT68676_SERIES)
 427   1          if (((CPU_CLK & 0xF0) == 0x00) || ((CPU_CLK & 0xF0) == 0x10)) {
 428   2              if (LDO_ADJ & BIT7) {
 429   3                  SC_MCU_PLL |= BIT1; // APnote: When MCU CLK is 12Mhz,
 430   3                                      // we need to set 0xB04[0] as 1 before APLL power down.
 431   3              }
 432   2          }
 433   1      #endif
 434   1          LDO_ADJ &= ~BIT7; //Power down APLL for power consumption
 435   1      
 436   1          CPU_CLK = 0x01 << 4; // Force CPU clock as 12 MHz when APLL power down. This
 437   1                               // can solve the issue of low SPI clock frequency under
 438   1                               // low power mode.
 439   1      
 440   1      #if IS_NT68671_SERIES
                  IIC_MASK = 0x00;
              #endif
 443   1          McuIICPreSendACK(MCU_IIC_CON_DEFAULT);
 444   1      }
 445          
 446          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    859    ----
   CONSTANT SIZE    =      9    ----
   XDATA SIZE       =      6       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
