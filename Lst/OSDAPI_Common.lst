C51 COMPILER V9.54   OSDAPI_COMMON                                                         01/06/2017 14:56:37 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OSDAPI_COMMON
OBJECT MODULE PLACED IN .\Bin\OSDAPI_Common.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Lib\OSDAPI_Common.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\App\OS
                    -D;.\App\User;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\Phy\SI\N
                    -VT\Keypad;.\Sys;.\Sys\SI\NVT;.\Phy\SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_MODULE,LVIEW_
                    -2560X1440,FLASH_BANK=8) PRINT(.\Lst\OSDAPI_Common.lst) TABS(2) OBJECT(.\Bin\OSDAPI_Common.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          
  14          //******************************************************************************
  15          // M A C R O   D E F I N I T I O N S
  16          //******************************************************************************
  17          
  18          //******************************************************************************
  19          // G L O B A L   V A R I A B L E S
  20          //******************************************************************************
  21          
  22          //******************************************************************************
  23          // S T A T I C   V A R I A B L E S
  24          //******************************************************************************
  25          
  26          //******************************************************************************
  27          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  28          //******************************************************************************
  29          
  30          //******************************************************************************
  31          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  32          //******************************************************************************
  33          
  34          //******************************************************************************
  35          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
  36          //******************************************************************************
  37          
  38          //******************************************************************************
  39          // F U N C T I O N   B O D Y S
  40          //******************************************************************************
  41          
  42          
  43          //******************************************************************************
  44          // Prototype:
  45          //  void OSDAPI_ShowIndentString(BOOL attr, UCHAR x, UCHAR y, UCHAR len, UCHAR *ptr)
  46          // Parameters:
  47          //  attr: set OSD attributes
  48          //  x   : x position on OSD
  49          //  y   : y position on OSD
  50          //  len : length of indent string
  51          //  *ptr  : pointer to font index of indent string
  52          // Return:
C51 COMPILER V9.54   OSDAPI_COMMON                                                         01/06/2017 14:56:37 PAGE 2   

  53          //  None
  54          // Purpose:
  55          //  Show indent string
  56          // Notes:
  57          //  None
  58          //******************************************************************************
  59          void ShowIndentString(BOOL attr, UCHAR x, UCHAR y, UCHAR len, UCHAR *p)
  60          {
  61   1          UCHAR i,l;
  62   1          l = p[0]+1;
  63   1          if (l > GLOB_FONTBUF_LEN)
  64   1              l = GLOB_FONTBUF_LEN;
  65   1          
  66   1       //   memset(glob_FontBuff, 0, GLOB_FONTBUF_LEN);
  67   1        for(i=0;i < GLOB_FONTBUF_LEN;i++)
  68   1        {
  69   2          glob_FontBuff[i]= 0;
  70   2        }
  71   1          for (i=0;i<l;i++){
  72   2              glob_FontBuff[i] = p[i];
  73   2          }
  74   1          
  75   1      #if OSDLANG_ARAB != OSDLANG_NONE
  76   1          if(UserData.ucLanguage == OSDLANG_ARAB 
  77   1              && OSDAPI_GetAlignType() == OSD_ALIGN_LEFT
  78   1              &&isOSDArabAlignRight()==TRUE){
  79   2              OSDAPI_SetAlignType(OSD_ALIGN_RIGHT);
  80   2          }
  81   1      
  82   1      #endif
  83   1          OSDAPI_SetIndentWidth(len);
  84   1          switch(UserData.ucLanguage)
  85   1          {
  86   2          default:
  87   2              FindTable_Europe(glob_FontBuff);
  88   2              break;
  89   2          case OSDLANG_CHINESE_T:
  90   2              FindTable_TC(glob_FontBuff);
  91   2              break;
  92   2          case OSDLANG_CHINESE_S:
  93   2              FindTable_SC(glob_FontBuff);
  94   2              break;
  95   2          case OSDLANG_JAPANESE:
  96   2              FindTable_Japan(glob_FontBuff);
  97   2              break;
  98   2          }
  99   1          OSDAPI_ShowIndents(attr, x, y);
 100   1      }
 101          
 102          
 103          /**************************************************************************//**
 104           * Show string at (x,y) on OSD.
 105           * @param attr Set OSD attributes at font(x,y).
 106           * @param x x position of string on OSD.
 107           * @param y y position of string on OSD.
 108           * @param len Number of characters of the string.
 109           * @param pstr Point to a list of font index.
 110           ******************************************************************************/
 111          void OSDAPI_WriteXYString(BOOL attr, UCHAR x, UCHAR y, UCHAR len, UCHAR *pstr)
 112          {
 113   1          UCHAR i;
 114   1          USHRT m;
C51 COMPILER V9.54   OSDAPI_COMMON                                                         01/06/2017 14:56:37 PAGE 3   

 115   1      
 116   1          ResetWDTimer();
 117   1          m = (USHRT) y * (OSDAPI_GetOSDWidth()) + x;
 118   1      
 119   1          if (attr == TRUE) {
 120   2              SC_INDEX_CTRL = 0x90;
 121   2          }
 122   1          else {
 123   2              SC_INDEX_CTRL = 0x40;
 124   2          }
 125   1          SC_INDEX_ADDR_LO = (UCHAR) m;
 126   1          SC_INDEX_ADDR_HI = (UCHAR)(m >> 8);
 127   1      
 128   1          for (i = 0; i < len; i++) {
 129   2              SC_INDEX_DATA = pstr[i];//0xe3,
 130   2          }
 131   1          ResetWDTimer();
 132   1      }
 133          
 134          
 135          //******************************************************************************
 136          // Prototype: 
 137          //  void OSDAPI_SetIndentString(UCHAR *ptr) small
 138          // Parameters:
 139          //  *ptr  : pointer to font index of indent string
 140          // Return:
 141          //  None
 142          // Purpose:
 143          //  Pre-load font data of indent string in scaler.
 144          // Notes:
 145          //  None
 146          //******************************************************************************
 147          void OSDAPI_SetIndentString(UCHAR *ptr) small
 148          {
 149   1          UCHAR i, l, w, Row, wd_point, height;
 150   1          USHRT tmp_state;
 151   1          USHRT m,k;//k type AOC ID2009
 152   1          tFontTable LoadFontTable;
 153   1          ResetWDTimer();
 154   1          tmp_state=GetOSDState();
 155   1      
 156   1          ucIndentStringLen = 0;
 157   1          //string width
 158   1          m = 0;
 159   1          l = ptr[0] + 1;
 160   1          for (i=1; i<l; i++) {
 161   2              k = ptr[i];// - 0x20; offset
 162   2      
 163   2          //== ======== AOC ID2009 ====================================
 164   2              if (Custom_System.bForceLanguage == TRUE) {
 165   3                  InitFont_Europe();
 166   3              }
 167   2              else {
 168   3                  InitFontTableByLang(k,&LoadFontTable);
 169   3                  if(UserData.ucLanguage == OSDLANG_JAPANESE) {
 170   4                  }
 171   3                  else if(UserData.ucLanguage == OSDLANG_CHINESE_T) {
 172   4                  }
 173   3                  else if(UserData.ucLanguage == OSDLANG_CHINESE_S) {
 174   4                  }
 175   3                  else{
 176   4                      if( k >= OSDCOMMONEFONT ) {
C51 COMPILER V9.54   OSDAPI_COMMON                                                         01/06/2017 14:56:37 PAGE 4   

 177   5                          k -= OSDCOMMONEFONT;
 178   5                      }
 179   4                  }
 180   3                  }
 181   2      
 182   2              m += pIndentWidthBase[k];
 183   2          }
 184   1          //Alignment
 185   1          if (OSDAPI_GetAlignType() == 0) { //Left
 186   2              wd_point = 0;
 187   2          }
 188   1          else if (OSDAPI_GetAlignType() == 1) { //Right
 189   2              m = (USHRT)ucIndentWidth * 12 - m;
 190   2              wd_point = m % 12;
 191   2          }
 192   1          else if (OSDAPI_GetAlignType() == 2) { //Center
 193   2              m = (USHRT)ucIndentWidth * 12 - m;
 194   2              k = m / 12;
 195   2              wd_point = m % 12;
 196   2              if ((k & BIT0) != 0) {
 197   3                  wd_point += 12;
 198   3              }
 199   2              wd_point >>= 1;
 200   2          }
 201   1      
 202   1          height = OSDAPI_GetOSDFontHeight();
 203   1          for (Row=0; Row<height; Row++) {
 204   2              usIndentFontBuffer[Row] = 0;
 205   2          }
 206   1          //write font
 207   1          for (i=1; i<l; i++) {
 208   2              k = ptr[i];// - 0x20;        //get font and font width
 209   2      
 210   2      //== ======== AOC ID2009 ====================================
 211   2              if (Custom_System.bForceLanguage == FALSE)
 212   2              {
 213   3                  InitFontTableByLang(k,&LoadFontTable);
 214   3                          
 215   3                   if (UserData.ucLanguage == OSDLANG_CHINESE_T ) {
 216   4                      if(bSelectTable == OSDFontTble1){
 217   5                          InitFont_TC_Table1();
 218   5                       }
 219   4                       else{
 220   5                          InitFont_TC_Table2();
 221   5                       }
 222   4                  }
 223   3                  else if (UserData.ucLanguage == OSDLANG_CHINESE_S) {
 224   4                      if(bSelectTable == OSDFontTble1){
 225   5                          InitFont_SC_Table1();
 226   5                       }
 227   4                       else{
 228   5                           InitFont_SC_Table2();
 229   5                       }
 230   4                  }
 231   3                  else if (UserData.ucLanguage == OSDLANG_JAPANESE) {
 232   4                      if(bSelectTable == OSDFontTble1){
 233   5                          InitFont_Japan_Table1();
 234   5                       }
 235   4                       else{
 236   5                           InitFont_Japan_Table2();
 237   5                       }
 238   4                  }
C51 COMPILER V9.54   OSDAPI_COMMON                                                         01/06/2017 14:56:37 PAGE 5   

 239   3                  else if(UserData.ucLanguage == OSDLANG_FRENCH && k >= OSDCOMMONEFONT){
 240   4                      InitFont_Franais();
 241   4                  }
 242   3                  else if(UserData.ucLanguage == OSDLANG_GERMAN && k >= OSDCOMMONEFONT){
 243   4                      InitFont_Deutsch();
 244   4                  }
 245   3                  else if(UserData.ucLanguage == OSDLANG_ITALIAN&& k >= OSDCOMMONEFONT){
 246   4                      InitFont_Italiano();
 247   4                  }
 248   3                  else if(UserData.ucLanguage == OSDLANG_SPANISH && k >= OSDCOMMONEFONT){
 249   4                      InitFont_Espanol();
 250   4                  }
 251   3                  
 252   3                  else if(UserData.ucLanguage == OSDLANG_SPANISH && k >= OSDCOMMONEFONT){
 253   4                      InitFont_Espanol();
 254   4                  }        
 255   3                  else if(UserData.ucLanguage == OSDLANG_POLISH && k >= OSDCOMMONEFONT){
 256   4                      InitFont_Polski();
 257   4                  }
 258   3                  
 259   3                  else if(UserData.ucLanguage == OSDLANG_CZECH && k >= OSDCOMMONEFONT){
 260   4                      InitFont_Cesky();
 261   4                  }
 262   3                  else if(UserData.ucLanguage == OSDLANG_HUNGARIAN && k >= OSDCOMMONEFONT){
 263   4                      InitFont_Magyar();
 264   4                  }
 265   3                  
 266   3                  else if(UserData.ucLanguage == OSDLANG_SERBO&& k >= OSDCOMMONEFONT){
 267   4                      InitFont_SiCG();
 268   4                  }
 269   3                  else if(UserData.ucLanguage == OSDLANG_ROMANA && k >= OSDCOMMONEFONT){
 270   4                      InitFont_Romana();
 271   4                  }
 272   3                 else if(UserData.ucLanguage == OSDLANG_RUSSIAN && k >= OSDCOMMONEFONT){
 273   4                      InitFont_Pyccknn();
 274   4                  }
 275   3                  else if(UserData.ucLanguage == OSDLANG_SWEDISH && k >= OSDCOMMONEFONT){
 276   4                      InitFont_Svenska();
 277   4                  }
 278   3                  else if(UserData.ucLanguage == OSDLANG_PORTUGUESE && k >= OSDCOMMONEFONT){
 279   4                      InitFont_Portugus();
 280   4                  }
 281   3      #if OSDLANG_ARAB != OSDLANG_NONE
 282   3                  else if(UserData.ucLanguage == OSDLANG_ARAB&& k >= OSDCOMMONEFONT){
 283   4                      InitFont_ARAB();
 284   4                  }    
 285   3      #endif        
 286   3                  else {    
 287   4                      InitFont_Europe();
 288   4                  }
 289   3                  
 290   3                  if(UserData.ucLanguage == OSDLANG_JAPANESE) {
 291   4                  }
 292   3                  else if(UserData.ucLanguage == OSDLANG_CHINESE_T) {
 293   4                  }
 294   3                  else if(UserData.ucLanguage == OSDLANG_CHINESE_S) {
 295   4                  }
 296   3                  else{
 297   4                    if( k >= OSDCOMMONEFONT ) {
 298   5                        k -= OSDCOMMONEFONT;
 299   5                    }
 300   4                  }            
C51 COMPILER V9.54   OSDAPI_COMMON                                                         01/06/2017 14:56:37 PAGE 6   

 301   3              }
 302   2              else{
 303   3                    InitFontTableByLang(k,&LoadFontTable);
 304   3              }
 305   2      //=======================================================
 306   2          
 307   2              w = pIndentWidthBase[k]; //get font font width
 308   2      
 309   2              m = k * (LoadFontTable.height);
 310   2      
 311   2              if (wd_point == 0) {
 312   3                  for (Row=0; Row<LoadFontTable.height; Row++) {
 313   4                        usIndentFontBuffer[Row+LoadFontTable.head] = pIndentFontBase[m+Row];
 314   4                  }
 315   3              }
 316   2              else {
 317   3                  for (Row=0; Row<LoadFontTable.height; Row++) {
 318   4                        usIndentFontBuffer[Row+LoadFontTable.head] |= (pIndentFontBase[m+Row] >> wd_point);
 319   4                  }
 320   3              }
 321   2              wd_point += w;
 322   2              do {
 323   3      
 324   3                  if (wd_point == 12) { //buffer full?
 325   4                      OSDAPI_LoadIndentFont();
 326   4                      wd_point = 0;
 327   4                  }
 328   3                  else if (wd_point> 12) {
 329   4                      OSDAPI_LoadIndentFont();
 330   4                      wd_point -= 12;
 331   4                      for (Row=0; Row<LoadFontTable.height; Row++) {
 332   5                              usIndentFontBuffer[Row+LoadFontTable.head] =
 333   5                              (pIndentFontBase[m+Row] << (w - wd_point));
 334   5                      }
 335   4                  }
 336   3              }while(wd_point>11);
 337   2          }
 338   1          ResetWDTimer();
 339   1          //write back space
 340   1          if (wd_point != 0) {
 341   2              OSDAPI_LoadIndentFont();
 342   2              wd_point = 0;
 343   2          }
 344   1      }
 345          
 346          
 347          /**************************************************************************//**
 348           * Load OSD palette to scaler sram
 349           * @param pbuf Pointer to OSD palette data.
 350           ******************************************************************************/
 351          
 352          void OSDAPI_LoadPalette(OSDPaletteTable *pbuf)
 353          {
 354   1          idata USHRT i,l;
 355   1      
 356   1          ResetWDTimer();
 357   1      //#if IS_NT68770_SERIES || IS_NT68850_SERIES || IS_NT68655_SERIES || IS_NT68150_SERIES || IS_NT68790_SERIE
             -S || IS_NT68658_SERIES
 358   1      #if IS_NT68770_SERIES_LATER && !IS_NT68661_SERIES
 359   1          OSDAPI_OSDPowerOn();
 360   1      #endif
 361   1          l = pbuf->usTableSize;
C51 COMPILER V9.54   OSDAPI_COMMON                                                         01/06/2017 14:56:37 PAGE 7   

 362   1          SC_INDEX_CTRL = 0xD0;
 363   1          SC_INDEX_ADDR_LO = pbuf->usOffset & 0x00FF;
 364   1          SC_INDEX_ADDR_HI = (pbuf->usOffset & 0xFF00) >> 8;
 365   1          for (i = 0; i < l; i++) {
 366   2              SC_INDEX_DATA = pbuf->ucTable[i];
 367   2          }
 368   1          ResetWDTimer();
 369   1      }
 370          
 371          /**************************************************************************//**
 372           * Load OSD font to scaler sram
 373           * @param type OSD_FONT_COMPRESSED if font is compressed else OSD_FONT_NORMAL.
 374           * @param pbuf Pointer to OSD font data.
 375           ******************************************************************************/
 376          void OSDAPI_LoadFont(OSDFontType type, OSDFontTable *pbuf)
 377          {
 378   1          UCHAR temp, l;
 379   1          idata USHRT i,len;
 380   1      
 381   1          ResetWDTimer();
 382   1      //#if IS_NT68770_SERIES || IS_NT68850_SERIES || IS_NT68655_SERIES || IS_NT68150_SERIES || IS_NT68790_SERIE
             -S || IS_NT68658_SERIES
 383   1      #if IS_NT68770_SERIES_LATER && !IS_NT68661_SERIES
 384   1          OSDAPI_OSDPowerOn();
 385   1      #endif
 386   1          len = pbuf->usTableSize;
 387   1          SC_INDEX_CTRL = pbuf->ucFontBits & 0xF0;
 388   1          SC_INDEX_ADDR_LO = pbuf->usOffset & 0x00FF;
 389   1          SC_INDEX_ADDR_HI = (pbuf->usOffset & 0xFF00) >> 8;
 390   1      
 391   1          if (type == OSD_FONT_NORMAL) {
 392   2              for (i = 0; i < len; i++) {
 393   3                  SC_INDEX_DATA = pbuf->ucTable[i];
 394   3              }
 395   2          }
 396   1          else {
 397   2              for (i=0; i<len; i++) {
 398   3                  temp = pbuf->ucTable[i];
 399   3                  if ((temp == 0x00) || (temp == 0xFF)) {
 400   4                      i++;
 401   4                      l = pbuf->ucTable[i]; //length
 402   4                      do {
 403   5                          SC_INDEX_DATA = temp;
 404   5                          l--;
 405   5                      } while (l != 0);
 406   4                  }
 407   3                  else {
 408   4                      SC_INDEX_DATA = temp;
 409   4                  }
 410   3              }
 411   2          }
 412   1          ResetWDTimer();
 413   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1550    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      17
   IDATA SIZE       =   ----       8
C51 COMPILER V9.54   OSDAPI_COMMON                                                         01/06/2017 14:56:37 PAGE 8   

   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
