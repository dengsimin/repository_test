C51 COMPILER V9.54   GAMMAAPI                                                              01/06/2017 14:57:16 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE GAMMAAPI
OBJECT MODULE PLACED IN .\Bin\GammaAPI.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Lib\GammaAPI.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\App\OSD;.\A
                    -pp\User;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\Phy\SI\NVT\Ke
                    -ypad;.\Sys;.\Sys\SI\NVT;.\Phy\SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_MODULE,LVIEW_2560X
                    -1440,FLASH_BANK=8) PRINT(.\Lst\GammaAPI.lst) TABS(2) OBJECT(.\Bin\GammaAPI.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          
  14          //******************************************************************************
  15          // M A C R O   D E F I N I T I O N S
  16          //******************************************************************************
  17          
  18          //******************************************************************************
  19          // G L O B A L   V A R I A B L E S
  20          //******************************************************************************
  21          
  22          //******************************************************************************
  23          // S T A T I C   V A R I A B L E S
  24          //******************************************************************************
  25          
  26          //******************************************************************************
  27          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  28          //******************************************************************************
  29          
  30          //******************************************************************************
  31          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  32          //******************************************************************************
  33          #if 0 //lrd  移动到commom
              /*!
               * Write red gamma through index port.
               */
              #define GMAPI_LoadRGM320(p) WriteScalerIndexPort(GAMMA_TBL_RED|BIT2, 0, 320, p)
              /*!
               * Write green gamma through index port.
               */
              #define GMAPI_LoadGGM320(p) WriteScalerIndexPort(GAMMA_TBL_GREEN|BIT2, 0, 320, p)
              /*!
               * Write blue gamma through index port.
               */
              #define GMAPI_LoadBGM320(p) WriteScalerIndexPort(GAMMA_TBL_BLUE|BIT2, 0, 320, p)
              #endif
  47          //******************************************************************************
  48          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
  49          //******************************************************************************
  50          
  51          //******************************************************************************
  52          // F U N C T I O N   B O D Y S
C51 COMPILER V9.54   GAMMAAPI                                                              01/06/2017 14:57:16 PAGE 2   

  53          //******************************************************************************
  54          
  55          /**************************************************************************//**
  56           * Turn on gamma.
  57           ******************************************************************************/
  58          void GMAPI_EnableGamma(void)
  59          {
  60   1          SC_GAMMA_CTRL |= BIT7; //gamma on, 10bit
  61   1      }
  62          
  63          /**************************************************************************//**
  64           * Turn off gamma.
  65           ******************************************************************************/
  66          void GMAPI_DisableGamma(void)
  67          {
  68   1      #if ENABLE_10TO12_GAMMA == ON
                  SC_GAMMA_CTRL |= BIT6;
                  SC_GAMMA_CTRL &= ~BIT7;
              #elif ENABLE_10TO10_GAMMA == ON
                  SC_GAMMA_CTRL &= ~(BIT7|BIT6);
              #else
  74   1          // XXX Need to check other scalers.
  75   1          SC_GAMMA_CTRL &= ~(BIT7|BIT6);
  76   1      #endif
  77   1      }
  78          
  79          #if ENABLE_10TO10_GAMMA == ON
              /**************************************************************************//**
               * Extend 320-bytes gamma to 1280-bytes gamma and write it to scaler.
               * @param pgamma Pointer to the 320-bytes gamma table.
               * @param channel One of GAMMA_TBL_RED, GAMMA_TBL_GREEN and GAMMA_TBL_BLUE.
               ******************************************************************************/
              void GMAPI_LoadSingleTable320To1280(UCHAR *pgamma, UCHAR channel)
              {
                  USHRT i, j, k, addr;
                  USHRT start, end, now[4];
              
                  SC_INDEX_CTRL = (channel) | BIT2;
                  SC_INDEX_ADDR_LO = 0;
                  SC_INDEX_ADDR_HI = 0;
              
                  start = 0;
                  for (i = 0; i < 256; i += 4) {
                      addr = i * 5 / 4;
                      for (j = 0; j < 4; j++) {
                          end = (pgamma[addr + 1 + j] << 2) + (((pgamma[addr]) >> (j * 2)) & 0x03);
                          for (k = 0; k < 4; k++) {
                              now[k] = (end * k + (4 - k) * start) >> 2;
                          }
              
                          if ((i != 0) || (j != 0)) {
                              SC_INDEX_DATA = (UCHAR)((now[0] & 0x03) + ((now[1] & 0x03) << 2) + ((now[2] & 0x03) << 4) 
             -+ ((now[3] & 0x03) << 6));
                              SC_INDEX_DATA = (UCHAR)(now[0] >> 2);
                              SC_INDEX_DATA = (UCHAR)(now[1] >> 2);
                              SC_INDEX_DATA = (UCHAR)(now[2] >> 2);
                              SC_INDEX_DATA = (UCHAR)(now[3] >> 2);
                          }
              
                          start = end;
                          ResetWDTimer();
                      }
C51 COMPILER V9.54   GAMMAAPI                                                              01/06/2017 14:57:16 PAGE 3   

                  }
                  end = (end - now[0]) + end;
                  if (end > 1024)
                      end = 1024;
                  for (k = 0; k < 4; k++) {
                      now[k] = (end * k + (4 - k) * start) >> 2;
                  }
                  SC_INDEX_DATA = ((now[0] & 0x03) + ((now[1] & 0x03) << 2) + ((now[2] & 0x03) << 4) + ((now[3] & 0x03) 
             -<< 6));
                  SC_INDEX_DATA = (UCHAR) (now[0] >> 2);
                  SC_INDEX_DATA = (UCHAR) (now[1] >> 2);
                  SC_INDEX_DATA = (UCHAR) (now[2] >> 2);
                  SC_INDEX_DATA = (UCHAR) (now[3] >> 2);
                  ResetWDTimer();
              }
              #endif
 129          
 130          #if 0 //0 lrd add  移动到commom
              #if ENABLE_GAMMA == ON
              /**************************************************************************//**
               * Write R/G/B 320-bytes gamma tables to scaler.
               * @param pgamma Pointer to the R/G/B 320-bytes gamma table.
               ******************************************************************************/
              void GMAPI_LoadGamma320(Gamma320 *pgamma)
              {
                  GMAPI_DisableGamma();
                  Sleep(50); // 24Hz is around 41ms
              #if ENABLE_10TO12_GAMMA == ON
              #elif ENABLE_10TO10_GAMMA == ON
                  GMAPI_LoadSingleTable320To1280(pgamma->ucRGamma, GAMMA_TBL_RED);
                  GMAPI_LoadSingleTable320To1280(pgamma->ucGGamma, GAMMA_TBL_GREEN);
                  GMAPI_LoadSingleTable320To1280(pgamma->ucBGamma, GAMMA_TBL_BLUE);
              #else
                  GMAPI_LoadRGM320(pgamma->ucRGamma);
                  GMAPI_LoadGGM320(pgamma->ucGGamma);
                  GMAPI_LoadBGM320(pgamma->ucBGamma);
              #endif
              }
              
              #endif
              #endif
 154          #if ENABLE_PRE_REV_GAMMA == ON
 155          void GMAPI_EnablePreGamma(void)
 156          {
 157   1          SC_GAMMA_CTRL |= BIT0;
 158   1      }
 159          
 160          void GMAPI_DisablePreGamma(void)
 161          {
 162   1          SC_GAMMA_CTRL &= ~BIT0;
 163   1      }
 164          
 165          void GMAPI_LoadPreGamma16bit(USHRT lv, UCHAR *pregamma)
 166          {
 167   1          GMAPI_DisablePreGamma();
 168   1          GMAPI_DisableRevGamma();
 169   1          Sleep(50);
 170   1          WriteScalerIndexPort(PREGAMMA_TBL_RGB|BIT2, 0, (lv<<1), pregamma);
 171   1      }
 172          
 173          void GMAPI_EnableRevGamma(void)
 174          {
C51 COMPILER V9.54   GAMMAAPI                                                              01/06/2017 14:57:16 PAGE 4   

 175   1          SC_GAMMA_CTRL |= BIT2;
 176   1      }
 177          
 178          void GMAPI_DisableRevGamma(void)
 179          {
 180   1          SC_GAMMA_CTRL &= ~BIT2;
 181   1      }
 182          
 183          void GMAPI_LoadRevGamma16bit(USHRT lv, UCHAR *revgamma)
 184          {
 185   1          GMAPI_DisablePreGamma();
 186   1          GMAPI_DisableRevGamma();
 187   1          Sleep(50);
 188   1          WriteScalerIndexPort(REVGAMMA_TBL_RGB|BIT2, 0, (lv<<1), revgamma);
 189   1      }
 190          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    181    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
