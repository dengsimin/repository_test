C51 COMPILER V9.54   GAMMA                                                                 01/06/2017 14:57:16 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE GAMMA
OBJECT MODULE PLACED IN .\Bin\Gamma.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE App\Gamma.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\App\OSD;.\App\
                    -User;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\Phy\SI\NVT\Keypa
                    -d;.\Sys;.\Sys\SI\NVT;.\Phy\SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_MODULE,LVIEW_2560X144
                    -0,FLASH_BANK=8) PRINT(.\Lst\Gamma.lst) TABS(2) OBJECT(.\Bin\Gamma.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          
  14          #if ENABLE_GAMMA == ON
  15          
  16          #include "GammaData.c"
  17          
  18          //******************************************************************************
  19          // M A C R O   D E F I N I T I O N S
  20          //******************************************************************************
  21          
  22          //******************************************************************************
  23          // S T A T I C   V A R I A B L E S
  24          //******************************************************************************
  25          
  26          //******************************************************************************
  27          // G L O B A L   V A R I A B L E S
  28          //******************************************************************************
  29          
  30          //******************************************************************************
  31          // S T A T I C   V A R I A B L E S
  32          //******************************************************************************
  33              
  34          //******************************************************************************
  35          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  36          //******************************************************************************
  37          
  38          //******************************************************************************
  39          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  40          //******************************************************************************
  41          
  42          //******************************************************************************
  43          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
  44          //******************************************************************************
  45          
  46          //******************************************************************************
  47          // Prototype: 
  48          //  void LoadGamma(void)
  49          // Parameters:
  50          //  None
  51          // Return:
  52          //  None
C51 COMPILER V9.54   GAMMA                                                                 01/06/2017 14:57:16 PAGE 2   

  53          // Purpose:
  54          //  Load gamma tables
  55          // Notes:
  56          //  None
  57          //******************************************************************************
  58          void LoadGamma(void)
  59          {
  60   1      #if 0 // 0 lrd add 
                  GMAPI_LoadGamma320(&GammaTable);
                  GMAPI_EnableGamma();
              #else
  64   1      #if !lrd_dis_benq
                  if(Standard_Gamma == 1){
                      GMAPI_LoadGamma1536(&GammaTable2);
                  }
                  else{
                  if (GetGammaNum()== nGamma_18) {
                       GMAPI_LoadGamma1536(&GammaTable);
                  }        
                  else if (GetGammaNum() == nGamma_20) {
                      GMAPI_LoadGamma1536(&GammaTable1);
                  }
                  else if (GetGammaNum() == nGamma_22) {
                      GMAPI_LoadGamma1536(&GammaTableByPass);
                  }
                  else if (GetGammaNum() == nGamma_24) {
                      GMAPI_LoadGamma1536(&GammaTable3);
                  }
                  else if (GetGammaNum() == nGamma_26) {
                      GMAPI_LoadGamma1536(&GammaTable4);
                  }
                  }
                  //GMAPI_LoadGamma320(&GammaTable22to20);
                  WaitDisVSync();
                  GMAPI_EnableGamma();
              #else
  89   1          if(Standard_Gamma == 1){
  90   2             LoadGama_2();
  91   2          }
  92   1          else{
  93   2              if (GetGammaNum()== nGamma_18) {
  94   3                   GMAPI_LoadGamma320(&GammaTable);
  95   3              }        
  96   2              else if (GetGammaNum() == nGamma_20) {
  97   3                  LoadGama_1();
  98   3              }
  99   2              else if (GetGammaNum() == nGamma_22) {
 100   3                  LoadGama_bypass();
 101   3              }
 102   2              else if (GetGammaNum() == nGamma_24) {
 103   3                  LoadGama_3();
 104   3              }
 105   2              else if (GetGammaNum() == nGamma_26) {    
 106   3                  LoadGama_4();
 107   3              }
 108   2          }
 109   1          WaitDisVSync();
 110   1          GMAPI_EnableGamma();
 111   1      #endif
 112   1      #endif
 113   1      }
 114          
C51 COMPILER V9.54   GAMMA                                                                 01/06/2017 14:57:16 PAGE 3   

 115          #endif //#if ENABLE_GAMMA == ON
 116          
 117          #if ENABLE_PRE_REV_GAMMA == ON
 118          void LoadPreGamma(void)
 119          {
 120   1      #if IS_NT68790_SERIES || IS_NT68810_SERIES// || IS_NT68870_SERIES // 16 entries, NT68770 and NT68850 are 3
             -2 entries
              const UCHAR DefaultPreGammaRGBLUT[32]={
                  0x00,0x00,0x8E,0x00,0x99,0x02,0x61,0x06,
                  0x0C,0x0C,0xB8,0x13,0x7B,0x1D,0x6B,0x29,
                  0x98,0x37,0x13,0x48,0xE9,0x5A,0x27,0x70,
                  0xD9,0x87,0x0B,0xA2,0xC6,0xBE,0x14,0xDE,
              };
                  GMAPI_LoadPreGamma16bit(16, DefaultPreGammaRGBLUT);
                  GMAPI_EnablePreGamma();
                  GMAPI_EnableRevGamma();
              #elif IS_NT68870_SERIES
 131   1      const UCHAR DefaultPreGammaRGBLUT[64]={
 132   1          0x00,0x00,0x1E,0x00,0x8E,0x00,0x5F,0x01,0x99,0x02,0x43,0x04,0x61,0x06,0xF8,0x08,
 133   1          0x0C,0x0C,0xA0,0x0F,0xB8,0x13,0x55,0x18,0x7B,0x1D,0x2C,0x23,0x6B,0x29,0x39,0x30,
 134   1          0x98,0x37,0x8B,0x3F,0x13,0x48,0x32,0x51,0xE9,0x5A,0x3A,0x65,0x27,0x70,0xB1,0x7B,
 135   1          0xD9,0x87,0xA2,0x94,0x0B,0xA2,0x17,0xB0,0xC6,0xBE,0x1A,0xCE,0x14,0xDE,0xB6,0xEE,
 136   1      };
 137   1          GMAPI_LoadPreGamma16bit(32, DefaultPreGammaRGBLUT);
 138   1          GMAPI_EnablePreGamma();
 139   1          GMAPI_EnableRevGamma();
 140   1      #endif
 141   1      }
 142          
 143          void LoadRevGamma(void)
 144          {
 145   1      #if IS_NT68790_SERIES || IS_NT68810_SERIES || IS_NT68870_SERIES //32 entries
 146   1      const UCHAR DefaultRevGammaRGBLUT[32]={
 147   1          0x00,0x0F,0x15,0x19,0x1C,0x22,0x27,0x2E,0x35,0x3F,0x48,0x50,0x57,0x5D,0x63,0x6E,
 148   1          0x77,0x80,0x88,0x8F,0x96,0x9D,0xA3,0xAF,0xBA,0xC4,0xCE,0xD7,0xE0,0xE8,0xF0,0xF8,
 149   1      };
 150   1          GMAPI_LoadRevGamma16bit(16, DefaultRevGammaRGBLUT);
 151   1          GMAPI_EnablePreGamma();
 152   1          GMAPI_EnableRevGamma();
 153   1      #endif
 154   1      }
 155          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    145    ----
   CONSTANT SIZE    =   1056    ----
   XDATA SIZE       =   ----      96
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
