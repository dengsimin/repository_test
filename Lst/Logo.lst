C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE LOGO
OBJECT MODULE PLACED IN .\Bin\Logo.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE App\OSD\OSD_BENQ_V2\Logo.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.
                    -\App\OSD;.\App\User;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\P
                    -hy\SI\NVT\Keypad;.\Sys;.\Sys\SI\NVT;.\Phy\SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_MODULE
                    -,LVIEW_2560X1440,FLASH_BANK=8) PRINT(.\Lst\Logo.lst) TABS(2) OBJECT(.\Bin\Logo.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          
  14          //******************************************************************************
  15          // M A C R O   D E F I N I T I O N S
  16          //******************************************************************************
  17          
  18          //******************************************************************************
  19          // G L O B A L   V A R I A B L E S
  20          //******************************************************************************
  21          
  22          //******************************************************************************
  23          // S T A T I C   V A R I A B L E S
  24          //******************************************************************************
  25          
  26          //******************************************************************************
  27          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  28          //******************************************************************************
  29          
  30          //******************************************************************************
  31          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  32          //******************************************************************************
  33          
  34          //******************************************************************************
  35          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
  36          //******************************************************************************
  37          
  38          #define BENQ_1BIT_FONT_NUM     168     
  39          #define ESTAR_1BIT_FONT_NUM    108    
  40          #define EYECARE_1BIT_FONT_NUM  102     
  41          #if 0
              code UCHAR BenqLogoFont1Bit[] = {
              //[1-Bit Font x 168]
              //[  0:    1-Bit]
              0xFF, 0x1B, 
              //[  1:    1-Bit]
              0xFF, 0x15, 0xF0, 0x0F, 0xFE, 0x00, 0x01, 0x0E, 0x80, 
              //[  2:    1-Bit]
              0xFF, 0x0F, 0xFC, 0x0F, 0xFC, 0x00, 0x01, 0x0E, 0x00, 0x07, 
              //[  3:    1-Bit]
              0xFF, 0x0A, 0xEF, 0xFF, 0x01, 0xC0, 0x0F, 0x80, 0x00, 0x0C, 
              //[  4:    1-Bit]
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 2   

              0xFF, 0x09, 0xC0, 0x0F, 0x00, 0x10, 
              //[  5:    1-Bit]
              0xFF, 0x06, 0xE0, 0x0F, 0x00, 0x13, 
              //[  6:    1-Bit]
              0xFF, 0x06, 0x00, 0x15, 
              //[  7:    1-Bit]
              0xFF, 0x07, 0x3F, 0x00, 0x13, 
              //[  8:    1-Bit]
              0xFF, 0x09, 0x3F, 0x00, 0x11, 
              //[  9:    1-Bit]
              0xFF, 0x0B, 0x1F, 0x0F, 0x00, 0x0E, 
              //[ 10:    1-Bit]
              0xFF, 0x0E, 0x1F, 0x0F, 0x00, 0x0B, 
              //[ 11:    1-Bit]
              0xFF, 0x12, 0x7F, 0x30, 0x00, 0x07, 
              //[ 12:    1-Bit]
              0xFF, 0x16, 0xF7, 0x07, 0x07, 0x00, 0x02, 
              //[ 13:    1-Bit]
              0xFF, 0x12, 0xFE, 0xCF, 0xFF, 0x01, 0xF0, 0x0F, 0xFE, 0xC0, 0x0F, 0xF0, 
              //[ 14:    1-Bit]
              0xFF, 0x09, 0xFC, 0x0F, 0xFF, 0x01, 0xC0, 0x0F, 0xF8, 0x00, 0x01, 0x0E, 0x80, 0x00, 0x09, 
              //[ 15:    1-Bit]
              0xFE, 0x0F, 0xFF, 0x01, 0xC0, 0x0F, 0xF0, 0x00, 0x01, 0x0C, 0x00, 0x13, 
              //[ 16:    1-Bit]
              0x00, 0x1B, 
              //[ 17:    1-Bit]
              0xFF, 0x01, 0xF0, 0x01, 0x03, 0x00, 0x17, 
              //[ 18:    1-Bit]
              0xFF, 0x05, 0x7F, 0x7F, 0xF0, 0x00, 0x01, 0x03, 0x00, 0x11, 
              //[ 19:    1-Bit]
              0xFF, 0x0B, 0x3F, 0xFF, 0x01, 0xF0, 0x03, 0x07, 0x10, 0x00, 0x0A, 
              //[ 20:    1-Bit]
              0xFF, 0x13, 0xF3, 0x0F, 0x3F, 0xF0, 0x00, 0x01, 0x01, 0x00, 0x02, 
              //[ 21:    1-Bit]
              0xFF, 0x13, 0xEF, 0xFF, 0x01, 0xFC, 0x8F, 0xFF, 0x01, 0xF0, 0x0F, 0xFE, 
              //[ 22:    1-Bit]
              0xFF, 0x04, 0xEF, 0xFF, 0x01, 0xF8, 0x0F, 0xFF, 0x01, 0xE0, 0x0F, 0xFC, 0x00, 0x01, 0x0F, 0xE0, 0x00, 0x01
             -, 0x0C, 0x80, 0x00, 0x09, 
              //[ 23:    1-Bit]
              0x00, 0x01, 0x0E, 0xC0, 0x00, 0x18, 
              //[ 24:    1-Bit]
              0xFF, 0x01, 0xF1, 0x07, 0x1F, 0x70, 0x00, 0x01, 0x01, 0x00, 0x14, 
              //[ 25:    1-Bit]
              0xFF, 0x08, 0x7F, 0xFF, 0x01, 0xF1, 0x0F, 0x3F, 0xF0, 0x00, 0x01, 0x07, 0x10, 0x00, 0x0A, 
              //[ 26:    1-Bit]
              0xFF, 0x13, 0xF7, 0x3F, 0xFF, 0x01, 0xF0, 0x07, 0x1F, 0x70, 0x00, 0x01, 
              //[ 27:    1-Bit]
              0xFF, 0x0D, 0xEF, 0xFF, 0x01, 0xFC, 0x8F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xE0, 0x0F, 0xFC, 0xC0, 0x0F
             -, 0xF8, 
              //[ 28:    1-Bit]
              0xC0, 0x0F, 0xF8, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0E, 0xC0, 0x00, 0x01, 0x08, 0x00, 0x10, 
              //[ 29:    1-Bit]
              0x03, 0x00, 0x1A, 
              //[ 30:    1-Bit]
              0xFF, 0x04, 0xF7, 0x1F, 0xFF, 0x01, 0xF0, 0x07, 0x1F, 0xF0, 0x00, 0x01, 0x03, 0x10, 0x00, 0x0D, 
              //[ 31:    1-Bit]
              0xFF, 0x11, 0x3F, 0xFF, 0x01, 0xF1, 0x0F, 0x3F, 0xF0, 0x01, 0x0F, 0x70, 0x00, 0x01, 
              //[ 32:    1-Bit]
              0xFF, 0x0D, 0xEF, 0xFF, 0x01, 0xFE, 0xCF, 0xFF, 0x01, 0xFC, 0x8F, 0xFF, 0x01, 0xF8, 0x0F, 0xFF, 0x01, 0xF0
             -, 0x0F, 0xFF, 0x01, 
              //[ 33:    1-Bit]
              0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0E, 0xC0, 0x00, 0x01, 0x0C, 0x80, 0x00, 0x01, 0x08, 0x00, 0x10, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 3   

              //[ 34:    1-Bit]
              0x00, 0x16, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 
              //[ 35:    1-Bit]
              0x00, 0x16, 0xF0, 0xFF, 0x04, 
              //[ 36:    1-Bit]
              0x00, 0x17, 0xF0, 0xF0, 0xEF, 0xFF, 0x01, 
              //[ 37:    1-Bit]
              0x00, 0x19, 0x30, 0x00, 0x01, 
              //[ 38:    1-Bit]
              0x00, 0x16, 0xF0, 0x07, 0xFF, 0x01, 0xF7, 0xFF, 0x01, 
              //[ 39:    1-Bit]
              0x00, 0x16, 0x80, 0xFF, 0x04, 
              //[ 40:    1-Bit]
              0x00, 0x1A, 0xC0, 
              //[ 41:    1-Bit]
              0x00, 0x19, 0xF0, 0x1F, 
              //[ 42:    1-Bit]
              0x00, 0x19, 0xF0, 0xFF, 0x01, 
              //[ 43:    1-Bit]
              0x00, 0x16, 0xF0, 0x0F, 0xFF, 0x01, 0xF7, 0xFF, 0x01, 
              //[ 44:    1-Bit]
              0x00, 0x17, 0xE0, 0xE0, 0x8F, 0xFF, 0x01, 
              //[ 45:    1-Bit]
              0x00, 0x19, 0x10, 0x00, 0x01, 
              //[ 46:    1-Bit]
              0x00, 0x15, 0x01, 0xF0, 0x03, 0xFF, 0x01, 0xF3, 0xFF, 0x01, 
              //[ 47:    1-Bit]
              0x00, 0x15, 0xF8, 0xFF, 0x05, 
              //[ 48:    1-Bit]
              0x03, 0x10, 0x00, 0x19, 
              //[ 49:    1-Bit]
              0xFF, 0x05, 0x7F, 0xFF, 0x01, 0xF3, 0x1F, 0xFF, 0x01, 0xF0, 0x07, 0x3F, 0xF0, 0x01, 0x0F, 0x70, 0x00, 0x01
             -, 0x03, 0x10, 0x00, 0x07, 
              //[ 50:    1-Bit]
              0xFF, 0x17, 0x7F, 0xFF, 0x01, 0xF3, 0x1F, 
              //[ 51:    1-Bit]
              0xE0, 0x0F, 0xFE, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xF8, 0x80, 0x0F, 0xF8, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01
             -, 0x0F, 0xE0, 0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0C, 0xC0, 
              //[ 52:    1-Bit]
              0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01
             -, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 
              //[ 53:    1-Bit]
              0xFF, 0x15, 0x00, 0x06, 
              //[ 54:    1-Bit]
              0xFF, 0x15, 0x1F, 0x30, 0x00, 0x01, 0x01, 0x00, 0x02, 
              //[ 55:    1-Bit]
              0x00, 0x01, 0x08, 0xC0, 0x00, 0x01, 0x0F, 0xF8, 0xC0, 0x0F, 0xFE, 0xE0, 0x0F, 0xFF, 0x01, 0xF0, 0x8F, 0xFF
             -, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0x8F, 0xFF, 0x01, 
              //[ 56:    1-Bit]
              0x00, 0x0A, 0x10, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x07, 0xF0, 0x00, 0x01, 0x1F, 0xF0, 0x01, 0x3F, 0xF0
             -, 0x03, 0x7F, 0xF0, 0x07, 
              //[ 57:    1-Bit]
              0x0F, 0xF0, 0x03, 0x7F, 0xF0, 0x0F, 0xFF, 0x01, 0xF3, 0x7F, 0xFF, 0x12, 
              //[ 58:    1-Bit]
              0xFF, 0x15, 0xFC, 0x0F, 0xFE, 0x80, 0x0F, 0xF0, 
              //[ 59:    1-Bit]
              0xFF, 0x16, 0xF1, 0x03, 0x1F, 0x70, 0x00, 0x01, 
              //[ 60:    1-Bit]
              0x00, 0x01, 0x0F, 0xFC, 0xF0, 0x8F, 0xFF, 0x01, 0xFC, 0xEF, 0xFF, 0x13, 
              //[ 61:    1-Bit]
              0x00, 0x0A, 0x08, 0x80, 0x00, 0x01, 0x0C, 0xE0, 0x00, 0x01, 0x0F, 0xF0, 0x80, 0x0F, 0xFC, 0xC0, 0x0F, 0xFE
             -, 0xE0, 0x0F, 0xFE, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 4   

              //[ 62:    1-Bit]
              0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01
             -, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 
              //[ 63:    1-Bit]
              0x07, 0xF0, 0x01, 0x3F, 0xF0, 0x0F, 0xFF, 0x01, 0xF1, 0x3F, 0xFF, 0x01, 0xF3, 0x7F, 0xFF, 0x09, 0xFC, 0x0F
             -, 0xFF, 0x01, 0xE0, 0x0F, 0xFC, 
              //[ 64:    1-Bit]
              0xFF, 0x14, 0x87, 0x1F, 0x70, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 
              //[ 65:    1-Bit]
              0xFE, 0xFF, 0x1A, 
              //[ 66:    1-Bit]
              0x00, 0x04, 0x0C, 0xE0, 0x00, 0x01, 0x0F, 0xF0, 0x80, 0x0F, 0xFC, 0xE0, 0x0F, 0xFE, 0xF0, 0x0F, 0xFF, 0x01
             -, 0xF0, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0xCF, 0xFF, 0x01, 
              //[ 67:    1-Bit]
              0x00, 0x0C, 0x01, 0x30, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x0F, 0xF0, 0x01, 0x1F, 0xF0, 0x03, 0x3F, 0xF0
             -, 0x07, 
              //[ 68:    1-Bit]
              0x07, 0xF0, 0x01, 0x3F, 0xF0, 0x0F, 0xFF, 0x01, 0xF1, 0x3F, 0xFF, 0x01, 0xF7, 0xFF, 0x10, 
              //[ 69:    1-Bit]
              0xFF, 0x16, 0xCF, 0xFF, 0x01, 0xF0, 0x0F, 0xFE, 
              //[ 70:    1-Bit]
              0xFF, 0x15, 0x1F, 0x78, 0x00, 0x01, 0x01, 0x00, 0x02, 
              //[ 71:    1-Bit]
              0xFE, 0xFF, 0x19, 0x7F, 
              //[ 72:    1-Bit]
              0x00, 0x02, 0x80, 0x00, 0x01, 0x0E, 0xF8, 0xC0, 0x0F, 0xFE, 0xF0, 0x8F, 0xFF, 0x01, 0xFC, 0xEF, 0xFF, 0x0D
             -, 
              //[ 73:    1-Bit]
              0x00, 0x13, 0x08, 0xC0, 0x00, 0x01, 0x0C, 0xE0, 0x00, 0x01, 0x0E, 0xE0, 
              //[ 74:    1-Bit]
              0xFF, 0x01, 0xF0, 0x0F, 0x7F, 0xF0, 0x03, 0x3F, 0xF0, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x07, 0x30, 0x00, 0x01
             -, 0x01, 0x10, 0x00, 0x0A, 
              //[ 75:    1-Bit]
              0xFF, 0x16, 0xF7, 0x3F, 0xFF, 0x01, 0xF3, 0x1F, 
              //[ 76:    1-Bit]
              0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01
             -, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 
              //[ 77:    1-Bit]
              0x00, 0x0A, 0xF0, 0xFF, 0x10, 
              //[ 78:    1-Bit]
              0x00, 0x07, 0x10, 0x00, 0x01, 0x07, 0xF0, 0xFF, 0x10, 
              //[ 79:    1-Bit]
              0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xE0, 0x0F, 0xFC, 0xC0, 0x0F, 0xF8
             -, 0x00, 0x01, 0x0F, 0xC0, 0x00, 0x01, 0x08, 0xC0, 0x00, 0x01, 0x0F, 0xF8, 0xC0, 0x0F, 0xFE, 
              //[ 80:    1-Bit]
              0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01
             -, 0xF1, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 
              //[ 81:    1-Bit]
              0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0xF8, 0xFF, 0x10, 
              //[ 82:    1-Bit]
              0x07, 0x30, 0x00, 0x01, 0x01, 0x10, 0x00, 0x05, 0xF0, 0xFF, 0x10, 
              //[ 83:    1-Bit]
              0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0xCF, 0xFF, 0x01, 0xFC, 0xCF
             -, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 
              //[ 84:    1-Bit]
              0x80, 0x0F, 0xF0, 0x00, 0x01, 0x0E, 0xC0, 0x00, 0x01, 0x0C, 0x80, 0x00, 0x12, 
              //[ 85:    1-Bit]
              0x01, 0x00, 0x1A, 
              //[ 86:    1-Bit]
              0xFF, 0x07, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01
             -, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 
              //[ 87:    1-Bit]
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 5   

              0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF
             -, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 
              //[ 88:    1-Bit]
              0x7F, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1
             -, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 
              //[ 89:    1-Bit]
              0xC0, 0x0F, 0xF8, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0E, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x08
             -, 0x80, 0x00, 0x01, 0x08, 0x00, 0x0A, 
              //[ 90:    1-Bit]
              0xFF, 0x01, 0xF3, 0x1F, 0xFF, 0x01, 0xF1, 0x0F, 0x7F, 0xF0, 0x07, 0x3F, 0xF0, 0x03, 0x1F, 0xF0, 0x01, 0x1F
             -, 0xF0, 0x01, 0x1F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 
              //[ 91:    1-Bit]
              0x00, 0x01, 0x0F, 0xF8, 0x80, 0x0F, 0xF8, 0x80, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xE0, 0x0F
             -, 0xFE, 0xE0, 0x0F, 0xFE, 0xE0, 0x0F, 0xFE, 0xE0, 0x0F, 0xFE, 
              //[ 92:    1-Bit]
              0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF0, 0x0F, 0x7F, 0xF0, 0x07, 0x3F, 0xF0, 0x03, 0x3F, 0xF0, 0x01, 0x1F
             -, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 
              //[ 93:    1-Bit]
              0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01
             -, 0x08, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xE0, 0x00, 0x01, 0x0E, 0xE0, 
              //[ 94:    1-Bit]
              0xFF, 0x04, 0x0F, 0x00, 0x14, 0xF0, 0xFF, 0x01, 
              //[ 95:    1-Bit]
              0xFF, 0x04, 0x7F, 0x00, 0x11, 0x10, 0x00, 0x01, 0x0F, 0xF0, 0xFF, 0x01, 
              //[ 96:    1-Bit]
              0xFF, 0x0A, 0xF7, 0x7F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x06
             -, 
              //[ 97:    1-Bit]
              0xF0, 0x8F, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x0B, 0xEF, 0xFF
             -, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 
              //[ 98:    1-Bit]
              0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01
             -, 0xF1, 0x1F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x07, 0x7F, 0xF0, 0x03, 0x3F, 0xF0, 0x01, 
              //[ 99:    1-Bit]
              0xFF, 0x03, 0x00, 0x07, 0x08, 0x80, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0E, 0xF0, 0x80, 0x0F, 0xFC, 0xE0
             -, 0x8F, 0xFF, 0x04, 
              //[100:    1-Bit]
              0xFF, 0x03, 0x00, 0x17, 0xFE, 
              //[101:    1-Bit]
              0xFF, 0x03, 0x00, 0x13, 0x10, 0x00, 0x01, 0x1F, 0xF0, 0xFF, 0x01, 
              //[102:    1-Bit]
              0xFC, 0xCF, 0xFF, 0x01, 0x00, 0x0C, 0x08, 0x80, 0x03, 0xF8, 0x80, 0x3F, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F
             -, 0xFF, 0x01, 
              //[103:    1-Bit]
              0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01
             -, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 
              //[104:    1-Bit]
              0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01
             -, 0xF1, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0x7F, 0xF0, 0x07, 0x3F, 0xF0, 0x03, 0x1F, 0xF0, 0x01, 
              //[105:    1-Bit]
              0x00, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0F
             -, 0xF8, 0xC0, 0x0F, 0xFE, 0xF0, 0xCF, 0xFF, 0x01, 
              //[106:    1-Bit]
              0x0F, 0xF0, 0x00, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x03, 0x3F, 0xF0, 0x07, 0x7F, 0xF0
             -, 0x0F, 0xFF, 0x01, 0xF0, 0x1F, 0xFF, 0x01, 0xF3, 0x7F, 0xFF, 0x03, 
              //[107:    1-Bit]
              0xE0, 0x0F, 0xFE, 0xE0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0x80, 0x0F, 0xF8, 0x80, 0x0F, 0xF0
             -, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0C, 0x80, 
              //[108:    1-Bit]
              0x03, 0x30, 0x00, 0x01, 0x03, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x00
             -, 0x0E, 
              //[109:    1-Bit]
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 6   

              0x00, 0x01, 0x0E, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x80, 0x0F, 0xF8, 0x80, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xE0
             -, 0x0F, 0xFE, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x8F, 0xFF, 0x01, 0xF8, 0xCF, 0xFF, 0x01, 
              //[110:    1-Bit]
              0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01
             -, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0x00, 0x05, 
              //[111:    1-Bit]
              0xFF, 0x16, 0x0F, 0x00, 0x04, 
              //[112:    1-Bit]
              0xFF, 0x13, 0xCF, 0xFF, 0x01, 0x80, 0x0F, 0x00, 0x04, 
              //[113:    1-Bit]
              0xFE, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xF8, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFE, 0xC0, 0x0F, 0xF8
             -, 0x00, 0x01, 0x0F, 0xC0, 0x00, 0x09, 
              //[114:    1-Bit]
              0x1F, 0xF0, 0x00, 0x01, 0x0F, 0x70, 0x00, 0x01, 0x03, 0x10, 0x00, 0x13, 
              //[115:    1-Bit]
              0xFF, 0x0B, 0x7F, 0xFF, 0x01, 0xF3, 0x0F, 0x7F, 0xF0, 0x01, 0x07, 0x10, 0x00, 0x07, 
              //[116:    1-Bit]
              0xFF, 0x16, 0xF3, 0x03, 0x00, 0x03, 
              //[117:    1-Bit]
              0xFF, 0x18, 0x00, 0x03, 
              //[118:    1-Bit]
              0xFF, 0x13, 0xCF, 0xFF, 0x01, 0xE0, 0x0F, 0xE0, 0x00, 0x03, 
              //[119:    1-Bit]
              0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xE0, 0x0F
             -, 0xFC, 0x80, 0x0F, 0xE0, 0x00, 0x01, 0x08, 0x00, 0x07, 
              //[120:    1-Bit]
              0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01
             -, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0x01, 0x00, 0x04, 
              //[121:    1-Bit]
              0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01
             -, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0x07, 0x00, 0x04, 
              //[122:    1-Bit]
              0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF
             -, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0x0F, 0x00, 0x04, 
              //[123:    1-Bit]
              0x0F, 0x70, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x01, 0x00, 0x14, 
              //[124:    1-Bit]
              0xFF, 0x0A, 0xF7, 0x3F, 0xFF, 0x01, 0xF1, 0x07, 0x3F, 0xF0, 0x00, 0x01, 0x03, 0x00, 0x08, 
              //[125:    1-Bit]
              0xFF, 0x16, 0xF1, 0x01, 0x00, 0x03, 
              //[126:    1-Bit]
              0x3F, 0xFC, 0xFF, 0x17, 0xF0, 0x03, 
              //[127:    1-Bit]
              0xFF, 0x12, 0xFC, 0xFF, 0x08, 
              //[128:    1-Bit]
              0xFF, 0x03, 0xFE, 0xEF, 0xFF, 0x01, 0xFC, 0x8F, 0xFF, 0x01, 0xF0, 0x0F, 0xFE, 0x80, 0x0F, 0xF0, 0x00, 0x01
             -, 0x0C, 0x80, 0x03, 0xF0, 0xFF, 0x07, 
              //[129:    1-Bit]
              0x00, 0x01, 0x08, 0x00, 0x0B, 0x70, 0x00, 0x01, 0x1F, 0xF0, 0x0F, 0xFF, 0x09, 
              //[130:    1-Bit]
              0x00, 0x06, 0x30, 0x00, 0x01, 0x07, 0xE0, 0x00, 0x01, 0x3E, 0xE0, 0x0F, 0xFE, 0xE0, 0x0F, 0xFC, 0xC0, 0x0F
             -, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 
              //[131:    1-Bit]
              0x00, 0x12, 0x01, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x30, 0x00, 0x01, 
              //[132:    1-Bit]
              0xFC, 0xEF, 0xFF, 0x19, 
              //[133:    1-Bit]
              0x00, 0x07, 0x08, 0x80, 0x00, 0x01, 0x0C, 0xE0, 0x00, 0x01, 0x0E, 0xF0, 0x00, 0x01, 0x0F, 0xF8, 0xC0, 0x0F
             -, 0xFE, 0xF0, 0x8F, 0xFF, 0x01, 0xF8, 0xCF, 0xFF, 0x01, 
              //[134:    1-Bit]
              0x1F, 0xF0, 0x00, 0x01, 0x07, 0x30, 0x00, 0x16, 
              //[135:    1-Bit]
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 7   

              0xFF, 0x08, 0x7F, 0xFF, 0x01, 0xF1, 0x07, 0x0F, 0x10, 0x00, 0x0D, 
              //[136:    1-Bit]
              0xFF, 0x10, 0x03, 0x00, 0x0A, 
              //[137:    1-Bit]
              0xFF, 0x0F, 0xFC, 0x0F, 0x00, 0x0A, 
              //[138:    1-Bit]
              0x80, 0x0F, 0xF8, 0x80, 0x0F, 0xF8, 0x80, 0x0F, 0xF8, 0x80, 0x0F, 0xF8, 0x00, 0x01, 0x0F, 0xE0, 0x00, 0x0C
             -, 
              //[139:    1-Bit]
              0x03, 0x30, 0x00, 0x01, 0x03, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0xF0, 0x00, 0x01, 0x0F, 0xF0
             -, 0x00, 0x01, 0x1F, 0xF0, 0x01, 0x3F, 0xF0, 0x03, 0x7F, 0xF0, 0x07, 0xFF, 0x01, 0xF0, 0x0F, 
              //[140:    1-Bit]
              0x00, 0x04, 0x08, 0xC0, 0x00, 0x01, 0x0E, 0xF0, 0x80, 0x0F, 0xFC, 0xE0, 0x8F, 0xFF, 0x01, 0xFC, 0xEF, 0xFF
             -, 0x0A, 
              //[141:    1-Bit]
              0x00, 0x14, 0xC0, 0x00, 0x01, 0x0E, 0xF0, 0xC0, 0x0F, 0xFF, 0x01, 
              //[142:    1-Bit]
              0x00, 0x15, 0x03, 0xF0, 0x03, 0xFF, 0x01, 0xF1, 0xFF, 0x01, 
              //[143:    1-Bit]
              0x00, 0x13, 0xF0, 0x1F, 0xFF, 0x06, 
              //[144:    1-Bit]
              0x00, 0x14, 0xC0, 0xE0, 0x8F, 0xFF, 0x04, 
              //[145:    1-Bit]
              0x00, 0x09, 0x01, 0x30, 0x00, 0x01, 0x03, 0x70, 0x00, 0x01, 0x0F, 0xF0, 0x01, 0x3F, 0xF0, 0x07, 0xFF, 0x01
             -, 0xF0, 0x1F, 0xFF, 0x01, 0xF3, 0x7F, 
              //[146:    1-Bit]
              0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF3, 0x7F, 0xFF, 0x01, 0xF7, 0xFF, 0x13, 
              //[147:    1-Bit]
              0x00, 0x04, 0x08, 0xE0, 0x80, 0x0F, 0xFE, 0xF8, 0xFF, 0x11, 
              //[148:    1-Bit]
              0x00, 0x0D, 0x0C, 0xF8, 0xE0, 0xCF, 0xFF, 0x0A, 
              //[149:    1-Bit]
              0x00, 0x13, 0x0C, 0xF8, 0xFC, 0xFF, 0x05, 
              //[150:    1-Bit]
              0x00, 0x17, 0xA0, 0xF8, 0xFF, 0x02, 
              //[151:    1-Bit]
              0x00, 0x19, 0xC0, 0xFF, 0x01, 
              //[152:    1-Bit]
              0x00, 0x19, 0xF0, 0x7F, 
              //[153:    1-Bit]
              0x00, 0x18, 0x1F, 0xF0, 0xFF, 0x01, 
              //[154:    1-Bit]
              0x00, 0x15, 0x0F, 0xF0, 0x1F, 0xFF, 0x03, 
              //[155:    1-Bit]
              0x00, 0x10, 0x10, 0x00, 0x01, 0x3F, 0xF0, 0x7F, 0xFF, 0x06, 
              //[156:    1-Bit]
              0x00, 0x0C, 0x07, 0xF0, 0x03, 0xFF, 0x01, 0xF1, 0xFF, 0x0A, 
              //[157:    1-Bit]
              0x00, 0x06, 0x03, 0xF0, 0x01, 0xFF, 0x01, 0xF0, 0x7F, 0xFF, 0x0F, 
              //[158:    1-Bit]
              0x03, 0xF0, 0x01, 0xFF, 0x01, 0xF0, 0x7F, 0xFF, 0x15, 
              //[159:    1-Bit]
              0x00, 0x01, 0x0F, 0xFC, 0xF0, 0xCF, 0xFF, 0x16, 
              //[160:    1-Bit]
              0x00, 0x08, 0xC0, 0x00, 0x01, 0x0F, 0xFE, 0xF8, 0xFF, 0x0E, 
              //[161:    1-Bit]
              0x00, 0x10, 0x0C, 0xF8, 0xE0, 0xEF, 0xFF, 0x07, 
              //[162:    1-Bit]
              0x00, 0x16, 0x0E, 0xFE, 0xFF, 0x03, 
              //[163:    1-Bit]
              0x00, 0x19, 0xE0, 0xFF, 0x01, 
              //[164:    1-Bit]
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 8   

              0x00, 0x18, 0x03, 0xF0, 0xFF, 0x01, 
              //[165:    1-Bit]
              0x00, 0x13, 0x30, 0x00, 0x01, 0x3F, 0xF0, 0x1F, 0xFF, 0x03, 
              //[166:    1-Bit]
              0x00, 0x0C, 0x03, 0xF0, 0x00, 0x01, 0x3F, 0xF0, 0x0F, 0xFF, 0x01, 0xF7, 0xFF, 0x07, 
              //[167:    1-Bit]
              0x01, 0x30, 0x00, 0x01, 0x07, 0xF0, 0x01, 0x7F, 0xF0, 0x1F, 0xFF, 0x01, 0xF3, 0x7F, 0xFF, 0x0F, 
              
              
              };
              
              code OSDFontTable ucBenqLogoFont1BitTable = {
                  sizeof(BenqLogoFont1Bit),
                  OSD_FONTBITS_1b,
                  0,
                  BenqLogoFont1Bit
              };
              
              code UCHAR BenqLogoFontBitCount[] = {
              0x01    ////////////////////////////////////////////Font Bit Count////////////////////////////////////////
             -////
              };
              
              code UCHAR BenqLogoFontPaletteIndex[] = {
              0x00
                  ////////////////////////////////////////////Palette index////////////////////////////////////////////
              };
              
              code UCHAR BenqLogoFontMapIndex[] = {
                  ////////////////////////////////////////////Font Map index////////////////////////////////////////////
              0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 
              8, 9, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
              0, 0, 0, 0, 0, 13, 14, 15, 16, 16, 16, 16, 16, 16, 16, 16, 
              16, 16, 16, 16, 16, 16, 17, 18, 19, 20, 0, 0, 0, 0, 0, 0, 
              0, 0, 0, 0, 21, 22, 23, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
              16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 25, 26, 0, 0, 
              0, 0, 0, 0, 27, 28, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
              16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 29, 30, 
              31, 0, 0, 0, 32, 33, 16, 16, 34, 35, 35, 35, 36, 16, 16, 37, 
              38, 39, 40, 16, 41, 42, 16, 43, 44, 16, 16, 45, 46, 47, 44, 16, 
              16, 48, 49, 50, 0, 51, 16, 16, 16, 52, 0, 53, 54, 0, 55, 56, 
              57, 58, 59, 60, 61, 62, 0, 63, 64, 65, 66, 67, 68, 69, 70, 71, 
              72, 73, 16, 16, 74, 75, 76, 16, 16, 16, 52, 0, 77, 78, 0, 79, 
              80, 0, 81, 82, 0, 83, 62, 0, 84, 85, 86, 87, 88, 0, 89, 16, 
              90, 0, 91, 16, 16, 16, 92, 93, 16, 16, 16, 52, 0, 94, 95, 96, 
              97, 98, 0, 99, 100, 101, 102, 62, 0, 16, 16, 103, 87, 104, 0, 105, 
              37, 106, 0, 107, 16, 16, 16, 108, 109, 16, 16, 16, 110, 111, 111, 111, 
              112, 113, 114, 115, 116, 117, 118, 119, 120, 111, 16, 16, 121, 122, 123, 124, 
              125, 126, 127, 128, 129, 130, 16, 16, 131, 132, 133, 16, 16, 16, 16, 16, 
              16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
              16, 16, 134, 135, 136, 137, 138, 16, 16, 139, 0, 0, 140, 141, 16, 16, 
              16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 142, 143, 144, 40, 
              16, 16, 16, 16, 16, 16, 16, 16, 16, 145, 146, 0, 0, 0, 132, 147, 
              148, 149, 150, 151, 16, 16, 152, 153, 154, 155, 156, 157, 158, 0, 0, 0, 
              159, 160, 161, 162, 163, 16, 164, 165, 166, 167, 0, 0, 
              
              };
              
              //Energy Star
              code UCHAR eStarOneBitFont[]={
              //[1-Bit Font x 108]
              //[  0:    1-Bit]
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 9   

              0xFF, 0x0D, 0x0F, 0x00, 0x0D, 
              //[  1:    1-Bit]
              0xFF, 0x1B, 
              //[  2:    1-Bit]
              0x00, 0x16, 0x10, 0x00, 0x01, 0x03, 0x70, 0x00, 0x01, 
              //[  3:    1-Bit]
              0x00, 0x0C, 0x03, 0xF0, 0x00, 0x01, 0x3F, 0xC0, 0x07, 0xF8, 0x01, 0x3E, 0x80, 0x07, 0xF0, 0x00, 0x01, 0x0E
             -, 0x80, 
              //[  4:    1-Bit]
              0x00, 0x04, 0x30, 0x00, 0x01, 0x1F, 0xF0, 0x0F, 0xFC, 0x03, 0xFE, 0x00, 0x01, 0x0F, 0xC0, 0x00, 0x0C, 
              //[  5:    1-Bit]
              0x00, 0x01, 0xF0, 0x03, 0xFF, 0x01, 0xF3, 0xFF, 0x01, 0xE0, 0x0F, 0xE0, 0x00, 0x12, 
              //[  6:    1-Bit]
              0xFC, 0xF1, 0xFF, 0x02, 0x1F, 0x80, 0x00, 0x15, 
              //[  7:    1-Bit]
              0x00, 0x02, 0xF8, 0xF8, 0xFF, 0x02, 0x7F, 0x70, 0x00, 0x13, 
              //[  8:    1-Bit]
              0x00, 0x05, 0xC0, 0x80, 0x0F, 0xFF, 0x01, 0xFC, 0xE3, 0x0F, 0x1F, 0x70, 0x00, 0x0D, 
              //[  9:    1-Bit]
              0x00, 0x0D, 0x08, 0xE0, 0x80, 0x0F, 0x3E, 0xF0, 0xC1, 0x07, 0x3E, 0xF0, 0x00, 0x01, 0x07, 0x30, 0x00, 0x01
             -, 
              //[ 10:    1-Bit]
              0x00, 0x19, 0x08, 0xE0, 
              //[ 11:    1-Bit]
              0x0F, 0xE0, 0x01, 0x38, 0x00, 0x01, 0x07, 0xF0, 0x00, 0x01, 0x1C, 0x80, 0x03, 0x70, 0x00, 0x01, 0x0F, 0xE0
             -, 0x00, 0x01, 0x0C, 0x80, 0x00, 0x01, 0x08, 0x00, 0x07, 
              //[ 12:    1-Bit]
              0x00, 0x1B, 
              //[ 13:    1-Bit]
              0x00, 0x18, 0x7F, 0xF0, 0x3F, 
              //[ 14:    1-Bit]
              0x00, 0x03, 0x01, 0x10, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x70, 0x00, 0x01, 0x07, 0xF0, 0x00, 0x01
             -, 0x0E, 0xE0, 0x00, 0x01, 0x1C, 0xC0, 0x01, 0x1C, 0x80, 0x03, 0xF8, 0x8F, 0xFF, 0x01, 
              //[ 15:    1-Bit]
              0x01, 0x00, 0x01, 0xC0, 0x00, 0x01, 0x0C, 0xE0, 0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0F, 0x70, 0x80, 0x07
             -, 0x38, 0xC0, 0x03, 0x1C, 0xC0, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0F, 0x7F, 0xF0, 0x07, 
              //[ 16:    1-Bit]
              0x00, 0x01, 0x0F, 0x78, 0xC0, 0x03, 0x1E, 0xF0, 0x80, 0x07, 0x38, 0xC0, 0x01, 0x0E, 0xF0, 0x00, 0x01, 0x03
             -, 0x30, 0x00, 0x01, 0x01, 0x00, 0x05, 0xF8, 0xEF, 0xFF, 0x01, 
              //[ 17:    1-Bit]
              0x00, 0x0D, 0x10, 0x00, 0x01, 0x01, 0x30, 0x00, 0x01, 0x03, 0x70, 0x00, 0x01, 0xFF, 0x01, 0xE7, 0x3F, 0x0C
             -, 0x70, 0x00, 0x01, 
              //[ 18:    1-Bit]
              0x00, 0x01, 0xC0, 0x03, 0x7E, 0x60, 0x0E, 0xC6, 0x61, 0x38, 0x0C, 0x87, 0xE1, 0x31, 0x1C, 0xCE, 0xC3, 0x79
             -, 0x38, 0x0F, 0xFF, 0x01, 0xC3, 0x73, 0x38, 0x0E, 0xC7, 0x03, 0xF8, 
              //[ 19:    1-Bit]
              0x00, 0x0A, 0x14, 0xE8, 0xC1, 0x3D, 0xFC, 0xC3, 0x3F, 0xEC, 0xCF, 0xFC, 0xCF, 0xFB, 0x08, 0x00, 0x04, 
              //[ 20:    1-Bit]
              0x00, 0x07, 0xD0, 0x70, 0x0F, 0xFF, 0x01, 0xF1, 0x3E, 0xCF, 0xE7, 0xF8, 0x8C, 0x9F, 0x70, 0x07, 0xE6, 0x00
             -, 0x01, 0x0C, 0x00, 0x04, 
              //[ 21:    1-Bit]
              0x00, 0x03, 0x06, 0xF0, 0x01, 0x3F, 0x60, 0x8E, 0xDC, 0xDC, 0xFF, 0x02, 0xE7, 0x77, 0x7C, 0x86, 0x7F, 0xF0
             -, 0x03, 0x0F, 0xF0, 0x01, 0x3E, 0x60, 0x07, 0x6C, 
              //[ 22:    1-Bit]
              0xFF, 0x01, 0x01, 0x00, 0x02, 0x30, 0x00, 0x01, 0xC7, 0xF0, 0x3C, 0x8E, 0xEF, 0xF9, 0x3F, 0xFF, 0x01, 0x27
             -, 0xFE, 0xC7, 0x7F, 0xF8, 0x83, 0x0F, 0xF0, 0x01, 0x3B, 0x30, 0x03, 0x66, 
              //[ 23:    1-Bit]
              0x80, 0x0F, 0x00, 0x01, 0x03, 0xF0, 0x01, 0x7C, 0x00, 0x01, 0x1F, 0xC0, 0x07, 0xE0, 0x00, 0x01, 0x0C, 0x10
             -, 0x80, 0x03, 0x38, 0x80, 0x03, 0x70, 0x00, 0x01, 0x17, 0x70, 0x03, 0xFE, 0xE0, 
              //[ 24:    1-Bit]
              0x07, 0x00, 0x01, 0x70, 0x00, 0x01, 0x0F, 0x80, 0x00, 0x03, 0x01, 0x30, 0x00, 0x01, 0x07, 0xF0, 0x00, 0x01
             -, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x03, 0x30, 0xC0, 0x03, 0x3F, 0xF8, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 10  

              //[ 25:    1-Bit]
              0xFE, 0xCF, 0x07, 0xF8, 0x00, 0x01, 0x1F, 0xC0, 0x03, 0x78, 0x00, 0x01, 0x0F, 0xC0, 0x00, 0x01, 0x08, 0x00
             -, 0x08, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 
              //[ 26:    1-Bit]
              0x07, 0x00, 0x1A, 
              //[ 27:    1-Bit]
              0x00, 0x01, 0x0C, 0x00, 0x19, 
              //[ 28:    1-Bit]
              0x00, 0x03, 0x01, 0x10, 0x00, 0x01, 0x01, 0x00, 0x14, 
              //[ 29:    1-Bit]
              0xC0, 0x0C, 0xD8, 0x81, 0x1B, 0xF0, 0x03, 0x3E, 0xC0, 0x03, 0x30, 0x00, 0x10, 
              //[ 30:    1-Bit]
              0xE0, 0x0E, 0xCC, 0xC1, 0x1D, 0xB8, 0x01, 0x13, 0x70, 0x03, 0x1E, 0xC0, 0x00, 0x0F, 
              //[ 31:    1-Bit]
              0x1F, 0xCE, 0xC7, 0xF8, 0x0D, 0xFE, 0xC0, 0x0F, 0xF0, 0x00, 0x01, 0x0C, 0x00, 0x10, 
              //[ 32:    1-Bit]
              0xE3, 0x93, 0x1F, 0x7D, 0xF0, 0x01, 0x0F, 0x30, 0x00, 0x01, 0x01, 0x00, 0x11, 
              //[ 33:    1-Bit]
              0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0E, 0x40, 0x00, 0x0F
             -, 
              //[ 34:    1-Bit]
              0x00, 0x06, 0xFF, 0x03, 0x00, 0x09, 0xFE, 0xC0, 0x0F, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0xC0, 0x0F, 
              //[ 35:    1-Bit]
              0x00, 0x06, 0xFF, 0x03, 0x00, 0x09, 0x0C, 0xC7, 0x70, 0x0C, 0xC7, 0x78, 0x8C, 0xC6, 0x6C, 
              //[ 36:    1-Bit]
              0x00, 0x06, 0xFF, 0x03, 0x00, 0x09, 0xE7, 0x7F, 0xFC, 0x06, 0x6C, 0xC0, 0x06, 0x7C, 0xDC, 
              //[ 37:    1-Bit]
              0x00, 0x06, 0xFF, 0x03, 0x00, 0x09, 0x07, 0xEE, 0xF0, 0x9C, 0x81, 0x19, 0x98, 0x81, 0x71, 
              //[ 38:    1-Bit]
              0x00, 0x06, 0xFF, 0x03, 0x00, 0x09, 0x60, 0x0C, 0xE3, 0x31, 0x97, 0x21, 0x1B, 0xF0, 0x01, 
              //[ 39:    1-Bit]
              0x00, 0x06, 0xFF, 0x03, 0x00, 0x09, 0x07, 0xCC, 0x80, 0x18, 0x88, 0x81, 0x1C, 0xE0, 0x00, 0x01, 
              //[ 40:    1-Bit]
              0x00, 0x06, 0xFF, 0x03, 0x00, 0x09, 0xFF, 0x01, 0xEC, 0xCF, 0x18, 0x86, 0x61, 0x18, 0x80, 0x01, 
              //[ 41:    1-Bit]
              0x00, 0x06, 0xFF, 0x03, 0x00, 0x09, 0x83, 0x33, 0x38, 0xC3, 0x33, 0x6C, 0xC3, 0x36, 0x46, 
              //[ 42:    1-Bit]
              0x00, 0x06, 0xFF, 0x03, 0x00, 0x0A, 0x0F, 0xF8, 0xC0, 0x01, 0x0C, 0xC0, 0x01, 0xB8, 
              //[ 43:    1-Bit]
              0xFF, 0x13, 0x7F, 0x00, 0x01, 0x07, 0xF0, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 
              //[ 44:    1-Bit]
              0xFF, 0x14, 0x9F, 0xFF, 0x01, 0xF8, 0x87, 0x7F, 0xF8, 0x83, 
              //[ 45:    1-Bit]
              0xFF, 0x13, 0x0F, 0xCF, 0xF0, 0x3C, 0xCF, 0xF3, 0x3C, 0xCF, 
              //[ 46:    1-Bit]
              0xFF, 0x13, 0x8F, 0x07, 0x78, 0x90, 0xFF, 0x01, 0xF9, 0x9F, 0xFF, 0x01, 
              //[ 47:    1-Bit]
              0xFF, 0x14, 0x1F, 0x7F, 0xF0, 0xE3, 0x3F, 0xFF, 0x01, 0xF3, 
              //[ 48:    1-Bit]
              0xFF, 0x13, 0x3F, 0xF8, 0x00, 0x01, 0xEE, 0xC7, 0xFF, 0x01, 0xF9, 0x3F, 
              //[ 49:    1-Bit]
              0xFF, 0x14, 0xF9, 0x8F, 0x77, 0x3C, 0xE3, 0x3B, 0xFF, 0x01, 
              //[ 50:    1-Bit]
              0xFF, 0x14, 0xF1, 0x3F, 0xFE, 0xC7, 0xFF, 0x01, 0xF8, 0x9F, 
              //[ 51:    1-Bit]
              0xFF, 0x13, 0x3F, 0xFC, 0x00, 0x01, 0xCF, 0xF3, 0x7E, 0xFE, 0xE7, 
              //[ 52:    1-Bit]
              0xFF, 0x13, 0x0F, 0xC0, 0x00, 0x01, 0x3C, 0xFE, 0xE3, 0x3F, 0xFE, 
              //[ 53:    1-Bit]
              0xFF, 0x14, 0x1F, 0xFE, 0xE1, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 
              //[ 54:    1-Bit]
              0xFF, 0x13, 0xEF, 0x3F, 0xFE, 0xE3, 0x3F, 0xFE, 0xE1, 0x9F, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 11  

              //[ 55:    1-Bit]
              0xFF, 0x14, 0x07, 0x1F, 0xF0, 0x78, 0xC7, 0x77, 0x7E, 
              //[ 56:    1-Bit]
              0xFF, 0x13, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 
              //[ 57:    1-Bit]
              0xFF, 0x14, 0x7F, 0x9E, 0xE7, 0x79, 0xFE, 0xE7, 0x7F, 
              //[ 58:    1-Bit]
              0xFF, 0x14, 0x8F, 0xCF, 0xF0, 0x7C, 0xFF, 0x01, 0xF7, 0xFF, 0x01, 
              //[ 59:    1-Bit]
              0xFF, 0x14, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 
              //[ 60:    1-Bit]
              0xFF, 0x14, 0xF9, 0x9F, 0xFF, 0x01, 0xF9, 0x9F, 0xFF, 0x01, 0xF9, 
              //[ 61:    1-Bit]
              0xFF, 0x13, 0x0F, 0xF8, 0x80, 0xFF, 0x01, 0xF9, 0x9F, 0xFF, 0x01, 0xF9, 
              //[ 62:    1-Bit]
              0xFF, 0x13, 0x0F, 0x3C, 0xC0, 0xF3, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 
              //[ 63:    1-Bit]
              0xFF, 0x14, 0x7F, 0xFF, 0x01, 0xF0, 0xC7, 0x3F, 0xFF, 0x01, 0xF1, 
              //[ 64:    1-Bit]
              0xFF, 0x13, 0x7F, 0xFE, 0xE3, 0x1F, 0xFE, 0xE0, 0x4F, 0xFE, 
              //[ 65:    1-Bit]
              0xFF, 0x13, 0x1F, 0xFF, 0x01, 0xE1, 0x1F, 0xFC, 0xC1, 0x1F, 0x79, 
              //[ 66:    1-Bit]
              0xFF, 0x15, 0x3F, 0xFF, 0x01, 0xF3, 0xFF, 0x01, 0xEF, 0xFF, 0x01, 
              //[ 67:    1-Bit]
              0xFC, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0xC0, 0x0F, 0xFE, 0x00, 0x09, 0xF0, 0xFF, 0x07, 
              //[ 68:    1-Bit]
              0x4C, 0xC6, 0x66, 0x6C, 0xC6, 0x63, 0x3C, 0xC6, 0x61, 0x1C, 0x06, 0x00, 0x08, 0xF0, 0xFF, 0x07, 
              //[ 69:    1-Bit]
              0xE7, 0x6F, 0xC0, 0x06, 0x6C, 0xC0, 0x06, 0x6C, 0xFE, 0xE6, 0x0F, 0x00, 0x08, 0xF0, 0xFF, 0x07, 
              //[ 70:    1-Bit]
              0x19, 0x8E, 0x31, 0x18, 0x81, 0x11, 0x88, 0xC1, 0x18, 0x87, 0x01, 0x00, 0x08, 0xF0, 0xFF, 0x07, 
              //[ 71:    1-Bit]
              0x0E, 0x6E, 0xE0, 0x06, 0x66, 0x60, 0x06, 0x66, 0x60, 0x04, 0x0E, 0x00, 0x08, 0xF0, 0xFF, 0x07, 
              //[ 72:    1-Bit]
              0x07, 0x10, 0x00, 0x02, 0x80, 0x01, 0x18, 0xC0, 0x01, 0x0F, 0x00, 0x09, 0xF0, 0xFF, 0x07, 
              //[ 73:    1-Bit]
              0x18, 0x88, 0xC1, 0x18, 0x9E, 0x61, 0x19, 0x96, 0xC1, 0x19, 0x0C, 0x00, 0x08, 0xF0, 0xFF, 0x07, 
              //[ 74:    1-Bit]
              0x63, 0x34, 0xC6, 0xE3, 0x3F, 0xFF, 0x01, 0x33, 0x38, 0x83, 0x13, 0x08, 0x00, 0x08, 0xF0, 0xFF, 0x07, 
              //[ 75:    1-Bit]
              0x00, 0x01, 0x0F, 0x18, 0x80, 0x01, 0x18, 0x80, 0x01, 0x0C, 0xC0, 0x00, 0x09, 0xF0, 0xFF, 0x07, 
              //[ 76:    1-Bit]
              0xFF, 0x01, 0xF3, 0x3F, 0x07, 0x70, 0x00, 0x01, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01
             -, 0xF3, 0x3F, 0x03, 0x30, 0x00, 0x01, 0xFF, 0x09, 
              //[ 77:    1-Bit]
              0x1F, 0xF9, 0x98, 0xC7, 0x39, 0x9E, 0xF1, 0x99, 0x9F, 0xF8, 0xC9, 0x9F, 0xFE, 0xF9, 0x9F, 0xFF, 0x01, 0xF9
             -, 0x9F, 0xFF, 0x09, 
              //[ 78:    1-Bit]
              0xF3, 0x3C, 0xCF, 0xF0, 0x0C, 0xCF, 0xF3, 0x3C, 0xCF, 0xF3, 0x3C, 0x4F, 0xF3, 0x30, 0x0F, 0xF0, 0x08, 0xCF
             -, 0xFF, 0x09, 
              //[ 79:    1-Bit]
              0xF9, 0x9F, 0xFF, 0x01, 0x79, 0x80, 0x07, 0xF8, 0x9F, 0xFF, 0x01, 0xF9, 0x9F, 0xFF, 0x01, 0xF9, 0x9F, 0xFF
             -, 0x01, 0x39, 0x90, 0x03, 0xFF, 0x09, 
              //[ 80:    1-Bit]
              0x3F, 0xEF, 0xF3, 0x3E, 0xEE, 0x07, 0xFE, 0xE0, 0xC7, 0x3E, 0xFE, 0xF3, 0x1F, 0xFF, 0x01, 0xF8, 0xCF, 0x7F
             -, 0xFC, 0xFF, 0x09, 
              //[ 81:    1-Bit]
              0xFF, 0x01, 0xF3, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xF8, 0x87, 0x7F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF1
             -, 0x87, 0x00, 0x01, 0x1E, 0xF8, 0xFF, 0x09, 
              //[ 82:    1-Bit]
              0xF1, 0x8F, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xC3, 0x3F, 0xFC, 0xC3, 0x3F, 0xFC, 0xC3, 0x3F, 0xFC
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 12  

             -, 0xC3, 0xFF, 0x0A, 
              //[ 83:    1-Bit]
              0xFF, 0x01, 0xF1, 0x3F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01
             -, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x09, 
              //[ 84:    1-Bit]
              0x3F, 0xFE, 0xF1, 0x87, 0x3F, 0xFC, 0xF1, 0x8F, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0x8E, 0xE7, 0x01
             -, 0x3F, 0xFC, 0xFF, 0x09, 
              //[ 85:    1-Bit]
              0xE3, 0x3F, 0xFE, 0xE3, 0x3F, 0xFE, 0xE3, 0x3F, 0xFE, 0xE3, 0x3F, 0xFE, 0xE3, 0x3F, 0xFE, 0xE3, 0x3F, 0xFE
             -, 0xFF, 0x09, 
              //[ 86:    1-Bit]
              0xFC, 0x9F, 0xFF, 0x01, 0xF9, 0x3F, 0xFF, 0x01, 0xF3, 0x0F, 0xFE, 0xE0, 0x7F, 0xFE, 0xCF, 0xFF, 0x01, 0xFC
             -, 0x9F, 0xFF, 0x01, 0xF9, 0xFF, 0x09, 
              //[ 87:    1-Bit]
              0xFE, 0xEC, 0xCF, 0x7E, 0xEC, 0xE7, 0x3E, 0xEE, 0x03, 0x1E, 0xE0, 0xF9, 0x9E, 0xEF, 0xFC, 0xCE, 0x6F, 0xFE
             -, 0xFF, 0x09, 
              //[ 88:    1-Bit]
              0xE7, 0xF7, 0x7C, 0x8F, 0xF7, 0x01, 0x3F, 0xF0, 0x71, 0x8F, 0x77, 0x7C, 0xE7, 0x37, 0x7F, 0xF1, 0x87, 0x7F
             -, 0xFF, 0x09, 
              //[ 89:    1-Bit]
              0xFF, 0x01, 0x3F, 0xF0, 0x03, 0x3C, 0x9F, 0xF3, 0x33, 0x3F, 0xF3, 0x33, 0x3F, 0xF3, 0x31, 0x8F, 0x03, 0x3C
             -, 0xE0, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 
              //[ 90:    1-Bit]
              0xFF, 0x01, 0x7F, 0x3E, 0xE7, 0x73, 0x3E, 0xE7, 0x73, 0x3E, 0xE7, 0x73, 0x3E, 0xE7, 0x73, 0x1C, 0x07, 0x78
             -, 0xC6, 0xFF, 0x09, 
              //[ 91:    1-Bit]
              0xFE, 0xEF, 0x87, 0x1E, 0xE0, 0x79, 0xDE, 0xEF, 0xF1, 0xDE, 0xEC, 0x3D, 0xDE, 0xE3, 0x39, 0x1E, 0x63, 0x8C
             -, 0xFF, 0x09, 
              //[ 92:    1-Bit]
              0xFC, 0x87, 0x79, 0x98, 0xC7, 0x79, 0x9C, 0xC7, 0x79, 0x9C, 0xC7, 0x79, 0x9C, 0xC7, 0x79, 0x9C, 0xC7, 0x79
             -, 0xFF, 0x09, 
              //[ 93:    1-Bit]
              0xFF, 0x02, 0x3C, 0xCF, 0xE3, 0xFC, 0xCC, 0xCF, 0xFC, 0xCC, 0xCF, 0xFC, 0xCE, 0xEF, 0xFC, 0xCF, 0xFF, 0x01
             -, 0xFC, 0xFF, 0x09, 
              //[ 94:    1-Bit]
              0xFF, 0x02, 0x87, 0x1F, 0xE0, 0x79, 0xCE, 0xCF, 0x00, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFE, 0xE7, 0x3E, 0x0F
             -, 0xF0, 0x83, 0xFF, 0x09, 
              //[ 95:    1-Bit]
              0xCF, 0xFF, 0x01, 0xC4, 0x0F, 0xF0, 0x3C, 0xCF, 0xF7, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xF7, 0x3C, 0x0F
             -, 0xF0, 0xC0, 0xFF, 0x09, 
              //[ 96:    1-Bit]
              0x9F, 0xFF, 0x01, 0xF9, 0x9F, 0xFF, 0x01, 0xF9, 0x9F, 0xFF, 0x01, 0xF9, 0x9F, 0xFF, 0x01, 0xF9, 0x9F, 0xFF
             -, 0x01, 0xF9, 0x80, 0x0F, 0xF8, 0xFF, 0x09, 
              //[ 97:    1-Bit]
              0x9F, 0xFF, 0x01, 0xF9, 0x80, 0x0F, 0xF8, 0x9F, 0xFF, 0x01, 0xF9, 0x9F, 0xFF, 0x01, 0xF9, 0x9F, 0xFF, 0x01
             -, 0xF9, 0x80, 0x03, 0x38, 0xFF, 0x09, 
              //[ 98:    1-Bit]
              0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xF3, 0x3C, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01
             -, 0xFC, 0xC0, 0x01, 0x1C, 0xFF, 0x09, 
              //[ 99:    1-Bit]
              0x9F, 0xFF, 0x01, 0xF8, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xF8, 0x9F, 0xFF, 0x01, 0xF1, 0x3F, 0xFF
             -, 0x01, 0xC7, 0xFF, 0x01, 0xF0, 0x3F, 0xFF, 0x09, 
              //[100:    1-Bit]
              0xE6, 0x7F, 0xFE, 0xE7, 0x7F, 0xFE, 0xE7, 0x7F, 0xFE, 0xE7, 0x7F, 0xFE, 0xE7, 0x7F, 0xFE, 0xE7, 0x7F, 0xFE
             -, 0xFF, 0x09, 
              //[101:    1-Bit]
              0x11, 0x13, 0x03, 0x71, 0x18, 0x8F, 0xF1, 0x1D, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01
             -, 0xF1, 0x1F, 0xFF, 0x0A, 
              //[102:    1-Bit]
              0xFF, 0x01, 0x3F, 0xF8, 0x01, 0xCE, 0xC7, 0xFE, 0xEC, 0xCF, 0xFE, 0xED, 0xCF, 0xFE, 0xCC, 0xC7, 0x01, 0x7E
             -, 0xF8, 0xFF, 0x09, 
              //[103:    1-Bit]
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 13  

              0xFF, 0x01, 0x1F, 0xF3, 0x20, 0xEF, 0xF1, 0x3E, 0xE7, 0x73, 0x3E, 0xE7, 0x73, 0x3E, 0xE7, 0xF3, 0x3E, 0xEF
             -, 0xF3, 0xFF, 0x09, 
              //[104:    1-Bit]
              0xFC, 0x8F, 0xF3, 0x30, 0xC7, 0x73, 0x3C, 0xC7, 0x73, 0x3C, 0xC7, 0x73, 0x3C, 0xC7, 0x73, 0x3E, 0xF7, 0x73
             -, 0xFF, 0x09, 
              //[105:    1-Bit]
              0xFF, 0x01, 0x8F, 0x0F, 0xE0, 0x70, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xDF, 0xFF, 0x01, 0xFC, 0xCF, 0x7F, 0xFC
             -, 0xE0, 0x80, 0x0F, 0xFF, 0x09, 
              //[106:    1-Bit]
              0xFF, 0x01, 0x3F, 0x3F, 0xF2, 0x01, 0xCF, 0x71, 0x3E, 0xE7, 0x73, 0x3E, 0xE7, 0x73, 0x3E, 0xCF, 0xF3, 0x31
             -, 0x7F, 0xFF, 0x09, 
              //[107:    1-Bit]
              0xFF, 0x02, 0x9F, 0xFF, 0x01, 0xF0, 0xFF, 0x16, 
              
              
              };
              
              code OSDFontTable uceStarOneBitFontTable={
                  sizeof(eStarOneBitFont),
                  OSD_FONTBITS_1b,
                  256,
                  eStarOneBitFont
              };
              
              code UCHAR eStarFontMapIndex[] = {
              0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 
              6, 7, 8, 9, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
              1, 1, 1, 1, 1, 1, 1, 1, 11, 12, 12, 12, 12, 13, 14, 15, 
              16, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
              1, 1, 1, 1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 1, 1, 
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
              26, 27, 12, 28, 29, 30, 31, 32, 33, 1, 1, 1, 1, 1, 1, 1, 
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 34, 35, 36, 37, 
              38, 39, 40, 41, 42, 1, 1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
              52, 53, 54, 55, 1, 1, 1, 56, 57, 58, 1, 59, 60, 61, 62, 63, 
              64, 65, 1, 1, 66, 1, 1, 1, 67, 68, 69, 70, 71, 72, 73, 74, 
              75, 1, 1, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 
              1, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 
              104, 105, 106, 107, 
              };
              
              //Eye care
              code UCHAR EyeCareOneBitFont[]={
              //[1-Bit Font x 102]
              //[  0:    1-Bit]
              0xFF, 0x0A, 0xCF, 0xFF, 0x01, 0xF8, 0x0F, 0xFF, 0x01, 0xE0, 0x0F, 0xFE, 0xC0, 0x0F, 0xF8, 0x80, 0x0F, 0xF8
             -, 0x00, 0x01, 0x0F, 0xF0, 
              //[  1:    1-Bit]
              0xFF, 0x04, 0x0F, 0xFF, 0x01, 0x00, 0x01, 0x0F, 0xC0, 0x00, 0x06, 0x01, 0x30, 0x00, 0x01, 0x07, 0x70, 0x00
             -, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x1F, 0xF0, 0x01, 
              //[  2:    1-Bit]
              0xFF, 0x05, 0x01, 0x00, 0x04, 0x80, 0x07, 0xF0, 0x03, 0xFE, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F
             -, 0xFC, 0xC0, 0x0F, 0xFC, 
              //[  3:    1-Bit]
              0xFF, 0x08, 0x1F, 0x3F, 0x30, 0x00, 0x01, 0xF0, 0xE1, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF1, 0x1F
             -, 0xFF, 0x01, 0xF0, 0x03, 0x0F, 0x70, 0x00, 0x01, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 14  

              //[  4:    1-Bit]
              0xFF, 0x0D, 0xF7, 0x1F, 0x7F, 0xFC, 0xE1, 0x8F, 0x3F, 0xFC, 0xE1, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01
             -, 
              //[  5:    1-Bit]
              0xFF, 0x17, 0x7F, 0xFF, 0x01, 0xF3, 0x1F, 
              //[  6:    1-Bit]
              0xFF, 0x1B, 
              //[  7:    1-Bit]
              0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01
             -, 0x0E, 0xE0, 0x00, 0x01, 0x0E, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x80, 0x0F, 0xF8, 
              //[  8:    1-Bit]
              0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x00, 0x01, 0x0F, 0xF0
             -, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x30, 0x00, 0x01, 0x03, 0x10, 0x00, 0x01, 
              //[  9:    1-Bit]
              0xE0, 0x0F, 0xFE, 0xF0, 0x0F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xFC, 0xEF, 0xFF, 0x10, 
              //[ 10:    1-Bit]
              0x00, 0x0E, 0x80, 0x00, 0x01, 0x0C, 0xE0, 0x00, 0x01, 0x0F, 0xF8, 0xC0, 0x0F, 0xFE, 0xF8, 0xCF, 0xFF, 0x01
             -, 
              //[ 11:    1-Bit]
              0xE0, 0x0F, 0x00, 0x19, 
              //[ 12:    1-Bit]
              0xFF, 0x01, 0xF0, 0x07, 0x3F, 0xF0, 0x01, 0x1F, 0xF0, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x03, 0x30, 0x00
             -, 0x01, 0x01, 0x10, 0x00, 0x0A, 
              //[ 13:    1-Bit]
              0xFF, 0x0D, 0xEF, 0xFF, 0x01, 0xFC, 0x8F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xE0, 0x0F, 0xFE, 0xC0, 0x0F
             -, 0xFC, 
              //[ 14:    1-Bit]
              0xFF, 0x07, 0xEF, 0xFF, 0x01, 0x80, 0x0F, 0xC0, 0x00, 0x01, 0x08, 0x00, 0x05, 0xF0, 0x00, 0x01, 0x3F, 0xF0
             -, 0x07, 0x7F, 0xF0, 0x0F, 
              //[ 15:    1-Bit]
              0xFF, 0x09, 0x3F, 0xF0, 0x00, 0x01, 0x07, 0x10, 0x00, 0x06, 0x80, 0x00, 0x01, 0x0E, 0xF0, 0x00, 0x01, 0x0F
             -, 0xF8, 
              //[ 16:    1-Bit]
              0xFF, 0x07, 0x0F, 0xFE, 0xE0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xFC, 0xC7
             -, 0x3F, 0xFC, 0xE3, 0x1F, 0xFE, 0xF1, 0x1F, 
              //[ 17:    1-Bit]
              0xFF, 0x08, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x30, 0x00, 0x01, 0x03, 0x30
             -, 0x00, 0x01, 0x03, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 
              //[ 18:    1-Bit]
              0xFF, 0x07, 0xCF, 0xFF, 0x01, 0xFC, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x0F, 0xFF, 0x01, 0xF0
             -, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFE, 0xE0, 0x0F, 0xFE, 
              //[ 19:    1-Bit]
              0xFF, 0x07, 0x3F, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0xF0, 0x00, 0x01, 0x0F
             -, 0xF0, 0x00, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x03, 
              //[ 20:    1-Bit]
              0xFF, 0x0A, 0xCF, 0xFF, 0x01, 0xF0, 0x0F, 0xFE, 0xC0, 0x0F, 0xF8, 0x00, 0x01, 0x0F, 0xE0, 0x00, 0x01, 0x0E
             -, 0xC0, 0x00, 0x01, 0x0C, 0x80, 
              //[ 21:    1-Bit]
              0xFF, 0x08, 0xFC, 0x00, 0x0A, 0x80, 0x0F, 0xFC, 0xE3, 0x7F, 0xFF, 0x03, 
              //[ 22:    1-Bit]
              0xFF, 0x0A, 0xF7, 0x1F, 0x7F, 0xF0, 0x03, 0x1F, 0xF0, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x03, 0x30, 0x00
             -, 0x01, 0x01, 0x10, 0x00, 0x01, 
              //[ 23:    1-Bit]
              0xFF, 0x19, 0xEF, 0xFF, 0x01, 
              //[ 24:    1-Bit]
              0xFF, 0x0A, 0x8F, 0xFF, 0x01, 0xE0, 0x0F, 0xFC, 0x00, 0x01, 0x0F, 0xE0, 0x00, 0x01, 0x0C, 0x80, 0x00, 0x01
             -, 0x08, 0x00, 0x04, 
              //[ 25:    1-Bit]
              0xFF, 0x08, 0xFE, 0x00, 0x0C, 0x3E, 0xF0, 0x1F, 0xFF, 0x01, 0xF7, 0xFF, 0x01, 
              //[ 26:    1-Bit]
              0xFF, 0x0A, 0xF1, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFE, 0xE1
             -, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 15  

              //[ 27:    1-Bit]
              0xFF, 0x0A, 0x8F, 0xFF, 0x01, 0xC0, 0x0F, 0xF0, 0x00, 0x01, 0x0E, 0xC0, 0x00, 0x01, 0x08, 0x00, 0x02, 0x10
             -, 0x00, 0x01, 0x03, 0x70, 0x00, 0x01, 
              //[ 28:    1-Bit]
              0xFF, 0x0A, 0x7F, 0x00, 0x01, 0x01, 0x00, 0x08, 0x80, 0x03, 0xFE, 0xF8, 0x8F, 0xFF, 0x01, 
              //[ 29:    1-Bit]
              0xFF, 0x09, 0x03, 0x38, 0x80, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03
             -, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 
              //[ 30:    1-Bit]
              0xFF, 0x09, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0
             -, 0x0F, 0xFC, 
              //[ 31:    1-Bit]
              0xFF, 0x09, 0xFC, 0x01, 0x0F, 0xE0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x08, 0x80, 0x00, 0x05, 0x01, 0x70
             -, 0x00, 0x01, 
              //[ 32:    1-Bit]
              0xFF, 0x08, 0xDF, 0x7F, 0xF0, 0x07, 0x7F, 0xF0, 0x07, 0x7F, 0xF0, 0x07, 0x7F, 0xF0, 0x07, 0x7F, 0xF0, 0x07
             -, 0xFE, 0xEF, 0xFF, 0x01, 
              //[ 33:    1-Bit]
              0xFF, 0x09, 0xFC, 0x0F, 0xFE, 0xC0, 0x0F, 0xF0, 0x00, 0x01, 0x0E, 0xC0, 0x00, 0x01, 0x08, 0x80, 0x01, 0x30
             -, 0x00, 0x01, 0x03, 0x70, 0x00, 0x01, 
              //[ 34:    1-Bit]
              0xFF, 0x08, 0xF7, 0x01, 0x00, 0x0A, 0x7C, 0xF0, 0x8F, 0xFF, 0x01, 0xF8, 0xCF, 0xFF, 0x01, 
              //[ 35:    1-Bit]
              0xFF, 0x0B, 0x7F, 0xFF, 0x01, 0xF3, 0x0F, 0x7F, 0xF0, 0x07, 0x3F, 0xF0, 0x01, 0x1F, 0xF0, 0x00, 0x01, 0x0F
             -, 0xF0, 0x00, 0x01, 
              //[ 36:    1-Bit]
              0xFF, 0x07, 0x1F, 0xE0, 0xCF, 0xFF, 0x01, 0xFD, 0xDF, 0xFF, 0x01, 0xFD, 0xDF, 0xFF, 0x01, 0xFD, 0xDF, 0xFF
             -, 0x01, 0xFD, 0xDF, 0xFF, 0x01, 0xFD, 0xFF, 0x03, 
              //[ 37:    1-Bit]
              0xFF, 0x07, 0x9F, 0x9F, 0xF9, 0x99, 0x8F, 0xF5, 0x5A, 0xAF, 0xF5, 0xDA, 0xB6, 0x6D, 0xDB, 0xB6, 0x9D, 0xDB
             -, 0xB9, 0xFF, 0x03, 
              //[ 38:    1-Bit]
              0x80, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xE0, 0x0F, 0xFE, 0xF0, 0x0F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xFC
             -, 0xCF, 0xFF, 0x01, 0xFE, 0xFF, 0x08, 
              //[ 39:    1-Bit]
              0x01, 0x00, 0x16, 0x80, 0x00, 0x01, 0x0C, 0xC0, 
              //[ 40:    1-Bit]
              0xFF, 0x05, 0x7F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF1, 0x0F, 0xFF, 0x01, 0xF0, 0x07, 0x3F, 0xF0, 0x01
             -, 0x0F, 0x70, 0x00, 0x01, 0x07, 0x30, 0x00, 0x01, 0x01, 0x00, 0x02, 
              //[ 41:    1-Bit]
              0x00, 0x02, 0xC0, 0x00, 0x01, 0x0F, 0xFC, 0xFC, 0xFF, 0x14, 
              //[ 42:    1-Bit]
              0x00, 0x01, 0x10, 0x00, 0x01, 0x03, 0x70, 0x00, 0x01, 0x1F, 0xF0, 0xFF, 0x13, 
              //[ 43:    1-Bit]
              0x80, 0x0F, 0xF8, 0x80, 0x0F, 0xF8, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0
             -, 0x00, 0x01, 0x0F, 0xF0, 0x80, 0x0F, 0xF8, 0x80, 0x0F, 0xF8, 0xC0, 0x0F, 0xFC, 
              //[ 44:    1-Bit]
              0xFF, 0x01, 0xF0, 0x1F, 0xFF, 0x01, 0x01, 0x00, 0x0B, 0xF0, 0x1F, 0xFF, 0x01, 0xF0, 0x0F, 0x7F, 0xF0, 0x07
             -, 0x1F, 0x70, 0x00, 0x01, 
              //[ 45:    1-Bit]
              0x80, 0x0F, 0xF8, 0x80, 0x0F, 0x00, 0x0B, 0xF0, 0xFF, 0x08, 0x8F, 0xFF, 0x01, 
              //[ 46:    1-Bit]
              0xFF, 0x01, 0xF1, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01
             -, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0xFF, 0x09, 0x7F, 
              //[ 47:    1-Bit]
              0x00, 0x04, 0x08, 0x80, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xE0, 0x00, 0x01, 0x0E, 0xF0, 0x00, 0x01
             -, 0x0F, 0xF0, 0x80, 0x0F, 0xF8, 0xC0, 0x0F, 0xFC, 0xE0, 0x0F, 0xFE, 
              //[ 48:    1-Bit]
              0xE0, 0x0F, 0xFC, 0xC0, 0x0F, 0x7C, 0xC0, 0x07, 0x78, 0x80, 0x07, 0x38, 0x80, 0x03, 0x38, 0x00, 0x01, 0x01
             -, 0x10, 0x00, 0x01, 0x01, 0x00, 0x07, 
              //[ 49:    1-Bit]
              0x3F, 0xF0, 0x07, 0x7F, 0xF0, 0x07, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x1F, 0xFF, 0x01, 0xF1, 0x1F
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 16  

             -, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x7F, 0xFF, 0x01, 0xF7, 0xFF, 0x04, 
              //[ 50:    1-Bit]
              0x01, 0x18, 0x80, 0x01, 0x00, 0x0C, 0x10, 0x00, 0x01, 0x01, 0x00, 0x01, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00
             -, 0x01, 0x0C, 0xC0, 
              //[ 51:    1-Bit]
              0xFF, 0x04, 0x0F, 0x00, 0x0B, 0xF0, 0xFF, 0x06, 0x7F, 0xFF, 0x01, 0xF3, 0x07, 
              //[ 52:    1-Bit]
              0x01, 0x18, 0x80, 0x01, 0x08, 0x00, 0x0A, 0x01, 0xF0, 0xFF, 0x09, 0xF8, 
              //[ 53:    1-Bit]
              0xFF, 0x04, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0
             -, 0xFF, 0x0B, 
              //[ 54:    1-Bit]
              0xFF, 0x04, 0x0F, 0x00, 0x0B, 0xF0, 0xFF, 0x0A, 
              //[ 55:    1-Bit]
              0xFE, 0xEF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF
             -, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x04, 
              //[ 56:    1-Bit]
              0x00, 0x01, 0x10, 0x00, 0x01, 0x01, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03
             -, 0x30, 0x00, 0x01, 0x03, 0x10, 0x00, 0x01, 0x01, 0x00, 0x08, 
              //[ 57:    1-Bit]
              0xFF, 0x17, 0x7F, 0xFF, 0x01, 0xF1, 0x03, 
              //[ 58:    1-Bit]
              0xFC, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x0F, 0xFF, 0x01, 0xF8, 0x8F
             -, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0xCF, 0xFF, 0x01, 0xFC, 0xEF, 0x1F, 
              //[ 59:    1-Bit]
              0x07, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x00, 0x01
             -, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0x70, 0x00, 0x01, 0x03, 0x10, 0x00, 0x04, 
              //[ 60:    1-Bit]
              0xFC, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF
             -, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xF8, 0x0F, 0xFF, 0x01, 0xE0, 0x0F, 0x00, 0x01, 
              //[ 61:    1-Bit]
              0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30
             -, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 
              //[ 62:    1-Bit]
              0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC
             -, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 
              //[ 63:    1-Bit]
              0x0F, 0xF0, 0x01, 0x3F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x7F, 0xF0, 0x07, 0x7F, 0xF0, 0x07, 0x7F, 0xF0, 0x07
             -, 0x7F, 0xF0, 0x07, 0x7F, 0xF0, 0x07, 0x7F, 0xF0, 0x07, 
              //[ 64:    1-Bit]
              0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F
             -, 0xFF, 0x01, 0xF8, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 
              //[ 65:    1-Bit]
              0x07, 0xF0, 0x00, 0x01, 0x0F, 0x00, 0x0C, 0xF0, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x03, 0x10, 0x00, 0x04
             -, 
              //[ 66:    1-Bit]
              0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0x0F, 0x00, 0x0B, 0xF0, 0xFF, 0x09, 0x3F, 
              //[ 67:    1-Bit]
              0x0F, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70
             -, 0x00, 0x01, 0x07, 0xF0, 0xFF, 0x09, 0xE3, 
              //[ 68:    1-Bit]
              0x00, 0x01, 0x0E, 0xF0, 0x80, 0x0F, 0xF8, 0xC0, 0x0F, 0xFE, 0xF0, 0x8F, 0xFF, 0x01, 0xFC, 0xEF, 0xFF, 0x0D
             -, 
              //[ 69:    1-Bit]
              0x00, 0x11, 0x80, 0x00, 0x01, 0x0C, 0xE0, 0x00, 0x01, 0x0F, 0xF8, 0xE0, 0x0F, 0xFF, 0x01, 
              //[ 70:    1-Bit]
              0xFF, 0x01, 0xF3, 0x1F, 0xFF, 0x01, 0xF0, 0x07, 0x3F, 0xF0, 0x01, 0x07, 0x30, 0x00, 0x10, 
              //[ 71:    1-Bit]
              0xFF, 0x0E, 0x7F, 0xFF, 0x01, 0xF1, 0x07, 0x1F, 0x70, 0x00, 0x01, 0x01, 0x00, 0x05, 
              //[ 72:    1-Bit]
              0xFF, 0x17, 0x3F, 0x3F, 0x00, 0x02, 
              //[ 73:    1-Bit]
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 17  

              0xFF, 0x13, 0xEF, 0xFF, 0x01, 0xF8, 0x0F, 0xFF, 0x01, 0x80, 0x0F, 0x00, 0x01, 
              //[ 74:    1-Bit]
              0xFF, 0x02, 0xBF, 0xFF, 0x01, 0xFD, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xC7, 0x7F, 0xFC, 0xC7
             -, 0x7F, 0xF8, 0x07, 0x7F, 0xF0, 0x07, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 
              //[ 75:    1-Bit]
              0xE0, 0x0F, 0xFF, 0x01, 0xF0, 0x8F, 0xFF, 0x01, 0xFC, 0xFF, 0x14, 
              //[ 76:    1-Bit]
              0x00, 0x0A, 0x0C, 0xF0, 0xF0, 0xFF, 0x0E, 
              //[ 77:    1-Bit]
              0x00, 0x0A, 0x10, 0x00, 0x01, 0x3F, 0xF0, 0xFF, 0x0D, 
              //[ 78:    1-Bit]
              0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0xFF, 0x0A, 0xFE
             -, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 
              //[ 79:    1-Bit]
              0xE0, 0x0F, 0xFF, 0x01, 0xF0, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF0, 0x0F
             -, 0xFE, 0xC0, 0x0F, 0xF8, 0x00, 0x01, 0x0F, 0xC0, 0x00, 0x06, 
              //[ 80:    1-Bit]
              0x01, 0x10, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x70, 0x00, 0x01, 0x07, 0xF0, 0x00, 0x01, 0x0F, 0xF0
             -, 0x01, 0x1F, 0xF0, 0x03, 0x3F, 0xF0, 0x07, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF1, 0x3F, 
              //[ 81:    1-Bit]
              0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0F, 0xF8, 0xC0, 0x0F, 0xFE, 0xF8, 0xEF, 0xFF, 0x10, 
              //[ 82:    1-Bit]
              0x00, 0x0D, 0xFF, 0x0E, 
              //[ 83:    1-Bit]
              0x0F, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0xF0, 0x01, 0xFF, 0x01, 0xF3
             -, 0xFF, 0x0D, 
              //[ 84:    1-Bit]
              0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x0C, 0xE0, 0x00, 0x01, 0x0F, 0xFC, 0xE0, 0x8F, 0xFF, 0x10, 
              //[ 85:    1-Bit]
              0x00, 0x0C, 0x01, 0xF8, 0xFF, 0x0D, 
              //[ 86:    1-Bit]
              0xFE, 0xF1, 0x1F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x1F, 0xFF, 0x0F, 
              //[ 87:    1-Bit]
              0x00, 0x04, 0x08, 0x80, 0x00, 0x01, 0x0E, 0xF0, 0xC0, 0x8F, 0xFF, 0x10, 
              //[ 88:    1-Bit]
              0x00, 0x07, 0x30, 0x00, 0x01, 0x0F, 0xF0, 0x07, 0xFF, 0x0F, 
              //[ 89:    1-Bit]
              0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0xFF, 0x0F
             -, 
              //[ 90:    1-Bit]
              0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xFF, 0x0F, 
              //[ 91:    1-Bit]
              0x7F, 0xF0, 0x07, 0x7F, 0xF0, 0x07, 0x7F, 0xF0, 0x07, 0x7F, 0xF0, 0x07, 0xFF, 0x0F, 
              //[ 92:    1-Bit]
              0x00, 0x02, 0x80, 0x00, 0x01, 0x08, 0xC0, 0x00, 0x01, 0x0E, 0xF8, 0xC0, 0x8F, 0xFF, 0x10, 
              //[ 93:    1-Bit]
              0x3F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x0F, 0xFF, 0x0F, 
              //[ 94:    1-Bit]
              0xF8, 0xEF, 0xFF, 0x19, 
              //[ 95:    1-Bit]
              0x00, 0x05, 0xC0, 0x00, 0x01, 0x0E, 0xF8, 0xE0, 0x8F, 0xFF, 0x01, 0xFE, 0xFF, 0x0E, 
              //[ 96:    1-Bit]
              0x00, 0x0E, 0xC0, 0x00, 0x01, 0x0F, 0xFF, 0x0A, 
              //[ 97:    1-Bit]
              0x00, 0x13, 0xF8, 0xFF, 0x07, 
              //[ 98:    1-Bit]
              0x00, 0x0A, 0x10, 0x00, 0x01, 0x07, 0xF0, 0x00, 0x01, 0x3F, 0xF0, 0x0F, 0xFF, 0x09, 
              //[ 99:    1-Bit]
              0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF7, 0xFF, 0x13, 
              //[100:    1-Bit]
              0x00, 0x03, 0x01, 0x70, 0x00, 0x01, 0x1F, 0xF8, 0x87, 0xFF, 0x12, 
              //[101:    1-Bit]
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 18  

              0xFF, 0x01, 0xF7, 0xFF, 0x19, 
              
              };
              
              code OSDFontTable ucEyeCareOneBitFontTable={
                  sizeof(EyeCareOneBitFont),
                  OSD_FONTBITS_1b,
                  256+ESTAR_1BIT_FONT_NUM,
                  EyeCareOneBitFont
              };
              
              code UCHAR EyeCareFontMapIndex[] = {
              0, 1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
              6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
              6, 6, 6, 6, 7, 8, 9, 10, 11, 12, 6, 6, 6, 13, 14, 15, 
              16, 17, 18, 19, 20, 21, 22, 6, 6, 23, 24, 25, 26, 27, 28, 29, 
              30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 6, 41, 42, 6, 6, 
              6, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 
              58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 6, 6, 6, 68, 69, 70, 
              71, 72, 73, 74, 6, 75, 76, 77, 78, 79, 80, 6, 81, 82, 83, 6, 
              6, 6, 84, 85, 86, 87, 88, 89, 90, 91, 6, 92, 85, 93, 6, 6, 
              6, 6, 94, 95, 96, 97, 98, 99, 6, 6, 6, 6, 6, 100, 101, 6, 
              6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
              6, 6, 6, 6, 
              };
              
              
              code UCHAR LogoPaletteTab[] = {
                  (UCHAR) 0x0000, (UCHAR) (0x0000 >> 8),
                  (UCHAR) 0xFFFF, (UCHAR) (0xFFFF >> 8),
                  (UCHAR) 0x408C, (UCHAR) (0x408C >> 8),
              };
              
              code OSDPaletteTable ucLogoPalette = {
                  sizeof(LogoPaletteTab),
                  0,
                  LogoPaletteTab
              };
              #endif
 928          #if LOGOWITH_HDMI == ON
              code UCHAR HDMIOneBitFont[]={
                  //[1-Bit Font x 43]
                  //[  0: 1-Bit]
                  0xFF, 0x01, 0xF7, 0xFF, 0x19, 
                  //[  1: 1-Bit]
                  0xFF, 0x1B, 
                  //[  2: 1-Bit]
                  0xFF, 0x0F, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 
             -0xF0, 
                  //[  3: 1-Bit]
                  0xFF, 0x0F, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 
             -0x01, 
                  //[  4: 1-Bit]
                  0xFF, 0x0F, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 
             -0x01, 
                  //[  5: 1-Bit]
                  0xFF, 0x0F, 0x00, 0x0C, 
                  //[  6: 1-Bit]
                  0xFF, 0x0F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x3F, 
                  //[  7: 1-Bit]
                  0xFF, 0x0F, 0x01, 0x00, 0x0B, 
                  //[  8: 1-Bit]
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 19  

                  0xFF, 0x0F, 0xFE, 0xEF, 0x7F, 0xFE, 0xE3, 0x1F, 0xFE, 0xE0, 0x07, 0x7E, 0xE0, 0x07, 
                  //[  9: 1-Bit]
                  0xFF, 0x0F, 0x3F, 0xF0, 0x01, 0x07, 0x30, 0x00, 0x01, 0x03, 0x10, 0x00, 0x01, 0x01, 0x00, 0x02, 
                  //[ 10: 1-Bit]
                  0xFF, 0x0F, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 
                  //[ 11: 1-Bit]
                  0xFF, 0x0F, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 
             -0x01, 
                  //[ 12: 1-Bit]
                  0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 
             -0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 
                  //[ 13: 1-Bit]
                  0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0x00, 0x0F, 0xF0, 0x00, 
             -0x01, 
                  //[ 14: 1-Bit]
                  0xFF, 0x0A, 0x0F, 0x00, 0x0E, 0xF0, 0xFF, 0x01, 
                  //[ 15: 1-Bit]
                  0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0x0F, 0x00, 0x0E, 0xC0, 
             -0xFF, 0x01, 
                  //[ 16: 1-Bit]
                  0x00, 0x1B, 
                  //[ 17: 1-Bit]
                  0xF0, 0x03, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0x03, 0x3F, 0xF0, 0x03, 
             -0x3F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x3F, 
                  //[ 18: 1-Bit]
                  0x00, 0x03, 0xFF, 0x07, 0x1F, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x10, 
             -0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 
                  //[ 19: 1-Bit]
                  0x00, 0x03, 0xFF, 0x18, 
                  //[ 20: 1-Bit]
                  0x00, 0x04, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 
             -0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 
                  //[ 21: 1-Bit]
                  0x3E, 0xE0, 0x03, 0x3E, 0xE0, 0x03, 0x3E, 0xE0, 0x03, 0x3E, 0xE0, 0x03, 0x3E, 0xE0, 0x03, 0x3E, 0xE0, 
             -0x03, 0x3E, 0xE0, 0x03, 0x3E, 0xE0, 0x03, 0x3E, 0xE0, 0x03, 
                  //[ 22: 1-Bit]
                  0x00, 0x03, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 
             -0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 
                  //[ 23: 1-Bit]
                  0x00, 0x04, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 
             -0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 
                  //[ 24: 1-Bit]
                  0x00, 0x03, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 
             -0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 
                  //[ 25: 1-Bit]
                  0x00, 0x03, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 
             -0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 
                  //[ 26: 1-Bit]
                  0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 
             -0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 
                  //[ 27: 1-Bit]
                  0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 
             -0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 
                  //[ 28: 1-Bit]
                  0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 
             -0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x80, 0xFF, 0x08, 
                  //[ 29: 1-Bit]
                  0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 
             -0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0xFF, 0x07, 
                  //[ 30: 1-Bit]
                  0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 
             -0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xFF, 0x08, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 20  

                  //[ 31: 1-Bit]
                  0x00, 0x13, 0xF0, 0xFF, 0x07, 
                  //[ 32: 1-Bit]
                  0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 
             -0x3F, 0xF0, 0xF3, 0xFF, 0x07, 
                  //[ 33: 1-Bit]
                  0x01, 0x10, 0x00, 0x01, 0x01, 0x00, 0x0F, 0xF0, 0xFF, 0x07, 
                  //[ 34: 1-Bit]
                  0xFF, 0x04, 0x0F, 0x00, 0x0E, 0xF0, 0xFF, 0x07, 
                  //[ 35: 1-Bit]
                  0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0x00, 0x0D, 0x03, 0xF0, 0xFF, 0x07, 
                  //[ 36: 1-Bit]
                  0x3E, 0xE0, 0x03, 0x3E, 0xE0, 0x03, 0x7E, 0xE0, 0x07, 0x7E, 0xE0, 0x0F, 0xFE, 0xE0, 0x1F, 0xFE, 0xE3, 
             -0xFF, 0x01, 0xFE, 0xFF, 0x08, 
                  //[ 37: 1-Bit]
                  0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 
             -0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0xFF, 0x07, 
                  //[ 38: 1-Bit]
                  0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 
             -0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0xFF, 0x08, 
                  //[ 39: 1-Bit]
                  0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 
             -0x01, 0x1F, 0xF0, 0xFF, 0x07, 
                  //[ 40: 1-Bit]
                  0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 
             -0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0xFF, 0x08, 
                  //[ 41: 1-Bit]
                  0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 
             -0xFC, 0xC0, 0xFF, 0x08, 
                  //[ 42: 1-Bit]
                  0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 
             -0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0xF0, 0xFF, 0x07, 
              
              
              };
              code OSDFontTable ucHDMIOneBitFontTable={
                  sizeof(HDMIOneBitFont),
                  OSD_FONTBITS_1b,
                  256+ESTAR_1BIT_FONT_NUM+EYECARE_1BIT_FONT_NUM,
                  HDMIOneBitFont
              };
              code UCHAR HDMIFontMapIndex[] = {
              
                  //0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                  2, 3, 1, 4, 5, 6, 5, 5, 5, 7, 8, 5, 5, 
                  5, 5, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 
                  21, 16, 22, 23, 24, 25, 16, 26, 27, 28, 29, 1, 30, 31, 32, 33, 
                  34, 34, 35, 36, 31, 37, 38, 39, 40, 31, 41, 42, 
              };
              #endif
1035          
1036          #if 0 //test
              #if LOGOWITH_HDMI == ON
              #define LOGO_WIDTH      (152+22)//37
              #else
              #define LOGO_WIDTH      152//37
              #endif
              #define LOGO_HEIGHT     20//23
              #else
1044          #define LOGO_WIDTH              35
1045          #define LOGO_HEIGHT             13
1046          #endif
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 21  

1047          #define LOGO_POS_X      5
1048          #define LOGO_POS_Y      5
1049          
1050          #define LOGO_COLOR      0
1051          #define LOGO_CCX         110//108//X 9 font
1052          #define LOGO_CCY         572//288//Y (12+32) font from bottom
1053          
1054          #define LOGO_PART1_W    33
1055          #define LOGO_PART1_H    12
1056          #define LOGO_PART2_W    44
1057          #define LOGO_PART2_H    7
1058          #define LOGO_PART3_W    36
1059          #define LOGO_PART3_H    5
1060          #define LOGO_PART4_W    19
1061          #define LOGO_PART4_H    3
1062          
1063          #define LOGO_PART1_X    81//68
1064          #define LOGO_PART1_Y    0
1065          #define LOGO_PART2_X    0
1066          #define LOGO_PART2_Y    13
1067          #define LOGO_PART3_X    115
1068          #define LOGO_PART3_Y    15
1069          #define LOGO_PART4_X    115+LOGO_PART3_W+2
1070          #define LOGO_PART4_Y    15+1
1071          
1072          #define LOGO_SPLIT_START_X    (LOGO_PART1_X+LOGO_PART1_W)
1073          #if LOGOWITH_HDMI == ON
              #define LOGO_SPLIT_OFFSET_X    0X1E//0x42
              #else
1076          #define LOGO_SPLIT_OFFSET_X    0x42
1077          #endif
1078          #define LOGO_SPLIT_START_Y    0x8C
1079          #define LOGO_SPLIT_OFFSET_Y    0x34
1080          //Rotate
1081          #if LOGOWITH_HDMI == ON
              #define ROT_LOGO_PART1_X    32+44+3+18
              #define ROT_LOGO_PART1_Y    0
              #define ROT_LOGO_PART2_X    32+2+8+14
              #define ROT_LOGO_PART2_Y    13
              #define ROT_LOGO_PART3_X    70+47
              #define ROT_LOGO_PART3_Y    15
              #define ROT_LOGO_PART4_X    70+48+36
              #define ROT_LOGO_PART4_Y    16
              #else
1091          #define ROT_LOGO_PART1_X    32+44+3
1092          #define ROT_LOGO_PART1_Y    0
1093          #define ROT_LOGO_PART2_X    32+2
1094          #define ROT_LOGO_PART2_Y    13
1095          #define ROT_LOGO_PART3_X    70+44
1096          #define ROT_LOGO_PART3_Y    15
1097          #endif
1098          #define ROT_LOGO_SPLIT_START_X    0//(ROT_LOGO_PART1_X+LOGO_PART1_W)
1099          #define ROT_LOGO_SPLIT_OFFSET_X   0// 0x42
1100          #define ROT_LOGO_SPLIT_START_Y    0x0B//0x8C
1101          #define ROT_LOGO_SPLIT_OFFSET_Y   0x78// 0x34
1102          
1103          #if  0 //test
              #define LOGO_MAIN_FRAME_COLOR (((2-1)<<8)|(1<<4)|0x0002)
              #else
1106          #define LOGO_MAIN_FRAME_COLOR   ((0<<8)|(0<<4)|0x0008)
1107          #endif
1108          
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 22  

1109          #if LOGOWITH_HDMI == ON
              void DrawHDMILogo(UCHAR pos_x, UCHAR pos_y)
              {
                  UCHAR x, y, ucIndex=0;
                  
                  for(y=0; y<LOGO_PART4_H; y++) {
                      for(x=0; x<LOGO_PART4_W; x++){            
                          ucIndex = HDMIFontMapIndex[LOGO_PART4_W*y+x]+ESTAR_1BIT_FONT_NUM+EYECARE_1BIT_FONT_NUM;       
             - 
                          OSDAPI_WriteXYChar(0, pos_x+x, pos_y+y, ucIndex);
                      }
                      OSDAPI_FillLineAttr(pos_x, pos_y+y, LOGO_PART4_W, LOGO_MAIN_FRAME_COLOR|ONEBITFONT1);
                  }
              }
              #endif
1123          
1124          //******************************************************************************
1125          // Prototype: 
1126          //  void ShowLogo(void)
1127          // Parameters:
1128          //  None
1129          // Return:
1130          //  None
1131          // Purpose:
1132          //  None
1133          // Notes:
1134          //  None
1135          //******************************************************************************
1136          #if 0// 0 test
              void ShowLogo(void)
              {
              //    USHRT m;//i, l, 
                  //UCHAR x, y, ucIndex=0;
              
                  Custom_System.bLogoONState = ON;
              
                  EnableDclk();
                  Force2Background(0xE0, 0xF0, 0xF8); // Enable free run mode
                  SetPostBGColor(0x40, 0x10, 0x60); // Force BG color as 0xe0,0xf0,0xf8
                  MTXAPI_SetRGBGain(255, 255, 255);
                  MTXAPI_SetContrast(128);
                  SetBrightness(MAXIMUM_BRIGHTNESS_PWM);
                  OSDCloseAll();
                  OSDAPI_LoadPalette(&ucLogoPalette);
              
                  BFAPI_DisableWindow(BF_WINDOW_1); 
                  BFAPI_DisableWindow(BF_WINDOW_2); 
                  
                  OSDInitFrame(LOGO_WIDTH, LOGO_HEIGHT, LOGO_MAIN_FRAME_COLOR);
                  //OSDAPI_SetPosition(LOGO_POS_X,LOGO_POS_Y);
                  OSDAPI_SetHVZoom(0);
                  OSDAPI_SetFontSize(OSD_FONT_12X18);
              #if ENABLE_OSD_ROTATION == ON
                  OSDAPI_Set1BitFontAddr(OSDSRAM_ADDR_CEILING(OSDAPI_GetOSDFrameSize(LOGO_WIDTH, LOGO_HEIGHT)));
                  //OSDAPI_Set2BitsFontAddr(OSDSRAM_ADDR_FLOOR(OSD_ROT_RAM_SIZE - 1854));
              #else
                  OSDAPI_Set1BitFontAddr(OSDSRAM_ADDR_CEILING(OSDAPI_GetOSDFrameSize(LOGO_WIDTH, LOGO_HEIGHT)));
                  //OSDAPI_Set2BitsFontAddr(OSD_RAM_SIZE - 1854);
              #endif
              
              //////////////////////////new add
                  OSDAPI_Set2BitsFontAddr(OSDAPI_GetOSDFrameSize(LOGO_WIDTH, LOGO_HEIGHT)+512*9);
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 23  

              
                  //OSDAPI_LoadFont(OSD_FONT_COMPRESSED, &ucSpaceOneBitFontTable);
                  OSDAPI_LoadFont(OSD_FONT_COMPRESSED, &ucBenqLogoFont1BitTable);
                  
              #if ENABLE_LOGO_ENERGYSTART == ON
                  OSDAPI_LoadFont(OSD_FONT_COMPRESSED, &uceStarOneBitFontTable);
              #endif    
              #if LOGOWITH_EYE_CARE == ON
                  OSDAPI_LoadFont(OSD_FONT_COMPRESSED, &ucEyeCareOneBitFontTable);
              #endif
              #if LOGOWITH_HDMI == ON
                  OSDAPI_LoadFont(OSD_FONT_COMPRESSED, &ucHDMIOneBitFontTable);
              #endif
                  SC_OSD_HW = LOGO_WIDTH - 1;
                  SC_OSD_VH = LOGO_HEIGHT - 1;
              
                  OSDAPI_InitSeqWriteCodeAttr(0);
              
              #if ENABLE_OSD_ROTATION == ON
              #if !lrd_dis_benq
                  UserData.bOSDRotation = bIsOSDRotationActive();
              #endif
              #endif
                  
                  if(UserData.bOSDRotation == FALSE){
                      SC_OSD_HS_LO = 122;//(UCHAR)LOGO_CCX;
                      SC_OSD_HS_HI = 0;//(UCHAR)(LOGO_CCX >> 8);
                      SC_OSD_VS_LO = 0x64;//(UCHAR)LOGO_CCY;
                      SC_OSD_VS_HI = 0x02;//(UCHAR)(LOGO_CCY >> 8);
                      //BENQ logo
                      DrawBenqLogo(LOGO_PART1_X, LOGO_PART1_Y);
                      #if ENABLE_LOGO_ENERGYSTART == ON
                      //Energy Star
                      DrawEnergyStarLogo(LOGO_PART2_X, LOGO_PART2_Y);
                      #endif
                      #if LOGOWITH_EYE_CARE == ON
                      //Eye-Care
                      DrawEyeCareLogo(LOGO_PART3_X, LOGO_PART3_Y);
                      #endif
                      #if LOGOWITH_HDMI == ON
                      //HDMI
                      DrawHDMILogo(LOGO_PART4_X, LOGO_PART4_Y);
                       #endif
                      //Set Split
                    //  LogoSetSplit(LOGO_SPLIT_START_X, LOGO_SPLIT_START_Y, LOGO_SPLIT_OFFSET_X, LOGO_SPLIT_OFFSET_Y);
                  }
                  else
                  {
                      SC_OSD_HS_LO = 0xA0;//(UCHAR)LOGO_CCX;
                      SC_OSD_HS_HI = 0x04;//(UCHAR)(LOGO_CCX >> 8);
                      #if LOGOWITH_HDMI == ON        
                      SC_OSD_VS_LO = 0x04;//(UCHAR)LOGO_CCY;
                      SC_OSD_VS_HI = 0x00;//(UCHAR)(LOGO_CCY >> 8);
                      #else
                      SC_OSD_VS_LO = 0x00;//(UCHAR)LOGO_CCY;
                      SC_OSD_VS_HI = 0x00;//(UCHAR)(LOGO_CCY >> 8);
                      #endif
                      //BENQ logo
                      DrawBenqLogo(ROT_LOGO_PART1_X, ROT_LOGO_PART1_Y);
                      #if ENABLE_LOGO_ENERGYSTART == ON
                      //Energy Star
                      DrawEnergyStarLogo(ROT_LOGO_PART2_X, ROT_LOGO_PART2_Y);
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 24  

                      #endif
                      
                   #if LOGOWITH_EYE_CARE == ON
                      //Eye-Care
                      DrawEyeCareLogo(ROT_LOGO_PART3_X, ROT_LOGO_PART3_Y);
                   #endif
                   #if LOGOWITH_HDMI == ON
                      //HDMI
                      DrawHDMILogo(ROT_LOGO_PART4_X, ROT_LOGO_PART4_Y);
                   #endif
                      
                      //Set Split
                      LogoSetSplit(ROT_LOGO_SPLIT_START_X, ROT_LOGO_SPLIT_START_Y, ROT_LOGO_SPLIT_OFFSET_X, ROT_LOGO_SPL
             -IT_OFFSET_Y);
                      //UserSetOSDRotation();
                  }
                  
              
              //////////////////////////////////////////
                  GMAPI_DisableGamma();
                  OSDTurnOnOSD();
                  PanelPowerOnSequence(TRUE);
              }
              #else
1255          code UCHAR LogoFont2Bit[]={
1256          
1257          //[2-Bit Font x 183]
1258          //[  0: 2-Bit]
1259          0x00, 0x1B, 
1260          0x00, 0x1B, 
1261          //[  1: 2-Bit]
1262          0x00, 0x16, 0x10, 0x00, 0x01, 0x1F, 0xF0, 0x1F, 
1263          0x00, 0x1B, 
1264          //[  2: 2-Bit]
1265          0x00, 0x13, 0xF0, 0x01, 0xFF, 0x01, 0xF1, 0xFF, 0x04, 
1266          0x00, 0x1B, 
1267          //[  3: 2-Bit]
1268          0x00, 0x10, 0x70, 0x00, 0x01, 0xFF, 0x09, 
1269          0x00, 0x1B, 
1270          //[  4: 2-Bit]
1271          0x00, 0x0F, 0xFF, 0x01, 0xF0, 0xFF, 0x0A, 
1272          0x00, 0x1B, 
1273          //[  5: 2-Bit]
1274          0x00, 0x0D, 0xF0, 0x00, 0x01, 0xFF, 0x0C, 
1275          0x00, 0x1B, 
1276          //[  6: 2-Bit]
1277          0x00, 0x0E, 0xF8, 0xFF, 0x0C, 
1278          0x00, 0x1B, 
1279          //[  7: 2-Bit]
1280          0x00, 0x0F, 0xFE, 0xFF, 0x0B, 
1281          0x00, 0x1B, 
1282          //[  8: 2-Bit]
1283          0x00, 0x11, 0xFF, 0x0A, 
1284          0x00, 0x1B, 
1285          //[  9: 2-Bit]
1286          0x00, 0x12, 0xE0, 0xFF, 0x08, 
1287          0x00, 0x1B, 
1288          //[ 10: 2-Bit]
1289          0x00, 0x14, 0xE0, 0xF0, 0xFF, 0x05, 
1290          0x00, 0x1B, 
1291          //[ 11: 2-Bit]
1292          0x00, 0x17, 0xC0, 0xE0, 0xFF, 0x02, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 25  

1293          0x00, 0x1B, 
1294          //[ 12: 2-Bit]
1295          0x00, 0x19, 0x10, 0x00, 0x01, 
1296          0x00, 0x1B, 
1297          //[ 13: 2-Bit]
1298          0x00, 0x0F, 0x01, 0x30, 0x00, 0x01, 0x1F, 0xF0, 0x07, 0xFF, 0x01, 0xF1, 0x3F, 0xFF, 0x03, 
1299          0x00, 0x1B, 
1300          //[ 14: 2-Bit]
1301          0x00, 0x07, 0x30, 0x00, 0x01, 0x0F, 0xF0, 0x07, 0xFF, 0x01, 0xF1, 0x7F, 0xFF, 0x0C, 
1302          0x00, 0x1B, 
1303          //[ 15: 2-Bit]
1304          0x00, 0x01, 0x30, 0x00, 0x01, 0x3F, 0xF0, 0x1F, 0xFF, 0x01, 0xF7, 0xFF, 0x13, 
1305          0x00, 0x1B, 
1306          //[ 16: 2-Bit]
1307          0xFF, 0x1B, 
1308          0x00, 0x1B, 
1309          //[ 17: 2-Bit]
1310          0x80, 0x0F, 0xFF, 0x19, 
1311          0x00, 0x1B, 
1312          //[ 18: 2-Bit]
1313          0x00, 0x05, 0xF0, 0xF0, 0xEF, 0xFF, 0x13, 
1314          0x00, 0x1B, 
1315          //[ 19: 2-Bit]
1316          0x00, 0x0A, 0x0C, 0xFC, 0xF8, 0xFF, 0x0E, 
1317          0x00, 0x1B, 
1318          //[ 20: 2-Bit]
1319          0x00, 0x0E, 0x80, 0x00, 0x01, 0x0E, 0xFC, 0xF8, 0xFF, 0x08, 
1320          0x00, 0x1B, 
1321          //[ 21: 2-Bit]
1322          0x00, 0x16, 0x0E, 0xF8, 0xF0, 0xCF, 0xFF, 0x01, 
1323          0x00, 0x1B, 
1324          //[ 22: 2-Bit]
1325          0x00, 0x0A, 0x10, 0x00, 0x01, 0x03, 0xF0, 0x00, 0x01, 0x1F, 0xF0, 0x03, 0x7F, 0xF0, 0x0F, 0xFF, 0x01, 0xF3
             -, 0x7F, 0xFF, 0x03, 
1326          0x00, 0x1B, 
1327          //[ 23: 2-Bit]
1328          0x07, 0xF0, 0x00, 0x01, 0x3F, 0xF0, 0x07, 0xFF, 0x01, 0xF1, 0x3F, 0xFF, 0x12, 
1329          0x00, 0x1B, 
1330          //[ 24: 2-Bit]
1331          0x00, 0x02, 0xC0, 0x00, 0x01, 0x0F, 0xFE, 0xF8, 0xEF, 0xFF, 0x13, 
1332          0x00, 0x1B, 
1333          //[ 25: 2-Bit]
1334          0x00, 0x0A, 0x08, 0xE0, 0x80, 0x0F, 0xFE, 0xF8, 0xEF, 0xFF, 0x0A, 
1335          0x00, 0x1B, 
1336          //[ 26: 2-Bit]
1337          0x00, 0x13, 0x08, 0xE0, 0x00, 0x01, 0x0F, 0xFC, 0xF0, 0xCF, 0xFF, 0x01, 
1338          0x00, 0x1B, 
1339          //[ 27: 2-Bit]
1340          0x00, 0x12, 0x01, 0x30, 0x00, 0x01, 0x07, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x01, 
1341          0x00, 0x1B, 
1342          //[ 28: 2-Bit]
1343          0x03, 0x70, 0x00, 0x01, 0x0F, 0xF0, 0x01, 0x3F, 0xF0, 0x07, 0xFF, 0x01, 0xF0, 0x1F, 0xFF, 0x01, 0xF3, 0x7F
             -, 0xFF, 0x01, 0xF7, 0xFF, 0x0A, 
1344          0x00, 0x1B, 
1345          //[ 29: 2-Bit]
1346          0x00, 0x02, 0x80, 0x00, 0x01, 0x0E, 0xF0, 0xC0, 0x0F, 0xFE, 0xF0, 0xCF, 0xFF, 0x10, 
1347          0x00, 0x1B, 
1348          //[ 30: 2-Bit]
1349          0x00, 0x0E, 0x80, 0x00, 0x01, 0x0E, 0xF0, 0x80, 0x0F, 0xFE, 0xF0, 0x8F, 0xFF, 0x01, 0xFE, 0xFF, 0x02, 
1350          0x00, 0x1B, 
1351          //[ 31: 2-Bit]
1352          0x00, 0x0F, 0x01, 0x10, 0x00, 0x01, 0x01, 0x30, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 26  

             -, 
1353          0x00, 0x1B, 
1354          //[ 32: 2-Bit]
1355          0x3F, 0xF0, 0x03, 0x7F, 0xF0, 0x0F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF3, 0x7F, 0xFF, 0x01, 0xF7, 0xFF
             -, 0x0D, 
1356          0x00, 0x1B, 
1357          //[ 33: 2-Bit]
1358          0x00, 0x01, 0x08, 0xC0, 0x00, 0x01, 0x0F, 0xF8, 0xC0, 0x0F, 0xFE, 0xF0, 0xCF, 0xFF, 0x01, 0xFE, 0xFF, 0x0E
             -, 
1359          0x00, 0x1B, 
1360          //[ 34: 2-Bit]
1361          0x00, 0x10, 0x08, 0xC0, 0x00, 0x01, 0x0E, 0xF0, 0x80, 0x0F, 0xFC, 0xE0, 0x0F, 0xFF, 0x01, 
1362          0x00, 0x1B, 
1363          //[ 35: 2-Bit]
1364          0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x03, 0x3F, 0xF0, 0x07, 0x7F, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01
             -, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x7F, 
1365          0x00, 0x1B, 
1366          //[ 36: 2-Bit]
1367          0xFF, 0x04, 0x0F, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01
             -, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 
1368          0x00, 0x1B, 
1369          //[ 37: 2-Bit]
1370          0xFF, 0x04, 0x0F, 0x00, 0x16, 
1371          0x00, 0x1B, 
1372          //[ 38: 2-Bit]
1373          0xFF, 0x05, 0x00, 0x16, 
1374          0x00, 0x1B, 
1375          //[ 39: 2-Bit]
1376          0xFF, 0x06, 0x3F, 0x70, 0x00, 0x01, 0x01, 0x00, 0x11, 
1377          0x00, 0x1B, 
1378          //[ 40: 2-Bit]
1379          0xFF, 0x0D, 0xF3, 0x1F, 0xFF, 0x01, 0xF0, 0x0F, 0x7F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x1F, 0xF0, 0x01, 
1380          0x00, 0x1B, 
1381          //[ 41: 2-Bit]
1382          0xFF, 0x10, 0xEF, 0xFF, 0x01, 0xFC, 0x8F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xE0, 0x0F, 0xFC, 
1383          0x00, 0x1B, 
1384          //[ 42: 2-Bit]
1385          0xFF, 0x07, 0x8F, 0xFF, 0x01, 0xE0, 0x0F, 0xF8, 0x00, 0x01, 0x0E, 0xC0, 0x00, 0x0C, 
1386          0x00, 0x1B, 
1387          //[ 43: 2-Bit]
1388          0xFF, 0x04, 0x0F, 0xF8, 0x00, 0x15, 
1389          0x00, 0x1B, 
1390          //[ 44: 2-Bit]
1391          0xFF, 0x05, 0x0F, 0x07, 0x00, 0x14, 
1392          0x00, 0x1B, 
1393          //[ 45: 2-Bit]
1394          0xFF, 0x0A, 0xF3, 0x0F, 0x3F, 0xF0, 0x01, 0x0F, 0x70, 0x00, 0x01, 0x03, 0x10, 0x00, 0x07, 
1395          0x00, 0x1B, 
1396          //[ 46: 2-Bit]
1397          0xFF, 0x17, 0x7F, 0xFF, 0x01, 0xF3, 0x3F, 
1398          0x00, 0x1B, 
1399          //[ 47: 2-Bit]
1400          0xFF, 0x07, 0x0F, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01
             -, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 
1401          0x00, 0x1B, 
1402          //[ 48: 2-Bit]
1403          0xFF, 0x07, 0x3F, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03
             -, 0x20, 0x00, 0x07, 
1404          0x00, 0x1B, 
1405          //[ 49: 2-Bit]
1406          0xFF, 0x06, 0xFE, 0x8F, 0xFF, 0x01, 0xE0, 0x0F, 0xF8, 0x00, 0x01, 0x0F, 0xE0, 0x00, 0x01, 0x0C, 0x80, 0x00
             -, 0x09, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 27  

1407          0x00, 0x1B, 
1408          //[ 50: 2-Bit]
1409          0xFF, 0x04, 0x3F, 0xF8, 0x00, 0x15, 
1410          0x00, 0x1B, 
1411          //[ 51: 2-Bit]
1412          0xFF, 0x07, 0xF0, 0x01, 0x07, 0x30, 0x00, 0x01, 0x01, 0x00, 0x0E, 
1413          0x00, 0x1B, 
1414          //[ 52: 2-Bit]
1415          0xFF, 0x10, 0xF7, 0x3F, 0xFF, 0x01, 0xF1, 0x0F, 0x7F, 0xF0, 0x07, 0x3F, 0xF0, 0x03, 
1416          0x00, 0x1B, 
1417          //[ 53: 2-Bit]
1418          0xFF, 0x12, 0xFE, 0xCF, 0xFF, 0x01, 0xF8, 0x0F, 0xFF, 0x01, 0xE0, 0x0F, 0xFE, 
1419          0x00, 0x1B, 
1420          //[ 54: 2-Bit]
1421          0xFF, 0x07, 0xCF, 0xFF, 0x01, 0xF0, 0x0F, 0xFC, 0x00, 0x01, 0x0F, 0xE0, 0x00, 0x01, 0x08, 0x00, 0x0A, 
1422          0x00, 0x1B, 
1423          //[ 55: 2-Bit]
1424          0xFF, 0x04, 0x0F, 0xFC, 0x00, 0x01, 0x0C, 0x00, 0x13, 
1425          0x00, 0x1B, 
1426          //[ 56: 2-Bit]
1427          0xFF, 0x04, 0x3F, 0x00, 0x16, 
1428          0x00, 0x1B, 
1429          //[ 57: 2-Bit]
1430          0xFF, 0x07, 0xF1, 0x01, 0x07, 0x10, 0x00, 0x10, 
1431          0x00, 0x1B, 
1432          //[ 58: 2-Bit]
1433          0xFF, 0x0E, 0x3F, 0xFF, 0x01, 0xF1, 0x0F, 0x3F, 0xF0, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x07, 0x30, 0x00, 0x01
             -, 
1434          0x00, 0x1B, 
1435          //[ 59: 2-Bit]
1436          0xF8, 0xCF, 0xFF, 0x01, 0xFC, 0xEF, 0xFF, 0x16, 
1437          0x00, 0x1B, 
1438          //[ 60: 2-Bit]
1439          0x00, 0x08, 0x80, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0E, 0xF0, 0x80, 0x0F, 0xF8, 0xC0, 0x0F, 0xFE, 0xE0
             -, 0x0F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 
1440          0x00, 0x1B, 
1441          //[ 61: 2-Bit]
1442          0x00, 0x0A, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01
             -, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 
1443          0x00, 0x1B, 
1444          //[ 62: 2-Bit]
1445          0xFF, 0x01, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0xFF, 0x16, 
1446          0x00, 0x1B, 
1447          //[ 63: 2-Bit]
1448          0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01
             -, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 
1449          0x00, 0x1B, 
1450          //[ 64: 2-Bit]
1451          0x00, 0x03, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01
             -, 0x03, 0x30, 0x00, 0x01, 0x03, 0x00, 0x08, 
1452          0x00, 0x1B, 
1453          //[ 65: 2-Bit]
1454          0x00, 0x03, 0xFF, 0x10, 0x0F, 0x00, 0x07, 
1455          0x00, 0x1B, 
1456          //[ 66: 2-Bit]
1457          0x00, 0x03, 0xC0, 0x0F, 0xFF, 0x01, 0xF8, 0xCF, 0xFF, 0x01, 0xFC, 0xEF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01
             -, 0xFC, 0x8F, 0xFF, 0x01, 0xF0, 0x0F, 0x00, 0x07, 
1458          0x00, 0x1B, 
1459          //[ 67: 2-Bit]
1460          0x1F, 0xF0, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x03, 0x3F, 0xF0
             -, 0x07, 0x7F, 0xF0, 0x0F, 0xFF, 0x01, 0xF1, 0x3F, 0xFF, 0x01, 0xF7, 0xFF, 0x01, 
1461          0x00, 0x1B, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 28  

1462          //[ 68: 2-Bit]
1463          0xC0, 0x0F, 0xF8, 0x80, 0x0F, 0xF0, 0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C, 0xC0
             -, 0x00, 0x01, 0x0C, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 
1464          0x00, 0x1B, 
1465          //[ 69: 2-Bit]
1466          0x00, 0x0D, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x03, 0x00, 0x08, 
1467          0x00, 0x1B, 
1468          //[ 70: 2-Bit]
1469          0x00, 0x03, 0x1F, 0xF0, 0x0F, 0xFF, 0x01, 0xF1, 0x3F, 0xFF, 0x01, 0xF7, 0xFF, 0x08, 0x0F, 0x00, 0x07, 
1470          0x00, 0x1B, 
1471          //[ 71: 2-Bit]
1472          0x00, 0x04, 0x0C, 0xF0, 0xC0, 0x0F, 0xFE, 0xE0, 0x0F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xFC, 0xCF, 0xFF
             -, 0x01, 0xFC, 0x0F, 0x00, 0x07, 
1473          0x00, 0x1B, 
1474          //[ 72: 2-Bit]
1475          0xFF, 0x01, 0xF1, 0x0F, 0xFF, 0x01, 0xF0, 0x07, 0x7F, 0xF0, 0x07, 0x3F, 0xF0, 0x03, 0x3F, 0xF0, 0x03, 0x1F
             -, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 
1476          0x00, 0x1B, 
1477          //[ 73: 2-Bit]
1478          0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01
             -, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 
1479          0x00, 0x1B, 
1480          //[ 74: 2-Bit]
1481          0x00, 0x10, 0x10, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 
1482          0x00, 0x1B, 
1483          //[ 75: 2-Bit]
1484          0x00, 0x01, 0x30, 0x00, 0x01, 0x1F, 0xF0, 0x03, 0xFF, 0x01, 0xF0, 0x1F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01
             -, 0xF7, 0xFF, 0x0D, 
1485          0x00, 0x1B, 
1486          //[ 76: 2-Bit]
1487          0x00, 0x02, 0xF0, 0xC0, 0x0F, 0xFE, 0xF0, 0x8F, 0xFF, 0x01, 0xF8, 0xCF, 0xFF, 0x01, 0xFC, 0xEF, 0xFF, 0x01
             -, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 
1488          0x00, 0x1B, 
1489          //[ 77: 2-Bit]
1490          0x3F, 0xF0, 0x03, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F
             -, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 
1491          0x00, 0x1B, 
1492          //[ 78: 2-Bit]
1493          0xC0, 0x0F, 0xF8, 0x80, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xE0, 0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0C, 0xC0
             -, 0x00, 0x01, 0x0C, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x00, 0x04, 
1494          0x00, 0x1B, 
1495          //[ 79: 2-Bit]
1496          0x00, 0x13, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 
1497          0x00, 0x1B, 
1498          //[ 80: 2-Bit]
1499          0x00, 0x03, 0x01, 0xF0, 0x00, 0x01, 0x3F, 0xF0, 0x0F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF3, 0x7F, 0xFF
             -, 0x01, 0xF7, 0xFF, 0x0A, 
1500          0x00, 0x1B, 
1501          //[ 81: 2-Bit]
1502          0x00, 0x03, 0x80, 0x0F, 0xFF, 0x01, 0xFC, 0xEF, 0xFF, 0x13, 
1503          0x00, 0x1B, 
1504          //[ 82: 2-Bit]
1505          0x00, 0x0B, 0x80, 0x00, 0x01, 0x0C, 0xE0, 0x00, 0x01, 0x0E, 0xF0, 0x00, 0x01, 0x0F, 0xF8, 0x80, 0x0F, 0xF8
             -, 0x80, 0x0F, 0xFC, 
1506          0x00, 0x1B, 
1507          //[ 83: 2-Bit]
1508          0x01, 0x10, 0x00, 0x19, 
1509          0x00, 0x1B, 
1510          //[ 84: 2-Bit]
1511          0xFF, 0x07, 0xF7, 0x7F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01
             -, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 
1512          0x00, 0x1B, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 29  

1513          //[ 85: 2-Bit]
1514          0xFC, 0xCF, 0xFF, 0x01, 0xFE, 0xFF, 0x17, 
1515          0x00, 0x1B, 
1516          //[ 86: 2-Bit]
1517          0x00, 0x08, 0x80, 0x00, 0x01, 0x08, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0F
             -, 0xF0, 0x80, 0x0F, 0xF8, 0xC0, 0x0F, 0xFC, 
1518          0x00, 0x1B, 
1519          //[ 87: 2-Bit]
1520          0x01, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x10
             -, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x00, 0x02, 
1521          0x00, 0x1B, 
1522          //[ 88: 2-Bit]
1523          0x00, 0x0D, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03
             -, 0x30, 0x00, 0x01, 
1524          0x00, 0x1B, 
1525          //[ 89: 2-Bit]
1526          0x00, 0x0D, 0xF0, 0xFF, 0x0D, 
1527          0x00, 0x1B, 
1528          //[ 90: 2-Bit]
1529          0x00, 0x0E, 0xFF, 0x01, 0xFC, 0xEF, 0xFF, 0x01, 0xFE, 0xFF, 0x08, 
1530          0x00, 0x1B, 
1531          //[ 91: 2-Bit]
1532          0xFF, 0x04, 0xF7, 0x1F, 0xFF, 0x01, 0xF0, 0x07, 0x3F, 0xF0, 0x03, 0x1F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00
             -, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x30, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 
1533          0x00, 0x1B, 
1534          //[ 92: 2-Bit]
1535          0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01
             -, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0xC0, 0x00, 0x01, 0x0C, 0xC0, 
1536          0x00, 0x1B, 
1537          //[ 93: 2-Bit]
1538          0x00, 0x0C, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x00, 0x05, 
1539          0x00, 0x1B, 
1540          //[ 94: 2-Bit]
1541          0x00, 0x0C, 0xFF, 0x0D, 0xF7, 0x7F, 
1542          0x00, 0x1B, 
1543          //[ 95: 2-Bit]
1544          0x00, 0x0C, 0xFF, 0x0F, 
1545          0x00, 0x1B, 
1546          //[ 96: 2-Bit]
1547          0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0xFF, 0x0C
             -, 0xDF, 0xFF, 0x01, 0xF1, 
1548          0x00, 0x1B, 
1549          //[ 97: 2-Bit]
1550          0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30
             -, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 
1551          0x00, 0x1B, 
1552          //[ 98: 2-Bit]
1553          0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF
             -, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x01, 
1554          0x00, 0x1B, 
1555          //[ 99: 2-Bit]
1556          0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0
             -, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 
1557          0x00, 0x1B, 
1558          //[100: 2-Bit]
1559          0x00, 0x0E, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x08, 0x80, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x0C
             -, 0xE0, 
1560          0x00, 0x1B, 
1561          //[101: 2-Bit]
1562          0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x30
             -, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x01, 0x10, 0x00, 0x07, 
1563          0x00, 0x1B, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 30  

1564          //[102: 2-Bit]
1565          0xFF, 0x19, 0xF7, 0x7F, 
1566          0x00, 0x1B, 
1567          //[103: 2-Bit]
1568          0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0x80, 0x0F, 0xF8
             -, 0x80, 0x0F, 0xF8, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0E, 0xE0, 
1569          0x00, 0x1B, 
1570          //[104: 2-Bit]
1571          0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01
             -, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x3F, 
1572          0x00, 0x1B, 
1573          //[105: 2-Bit]
1574          0xC0, 0x0F, 0xFE, 0xE0, 0x0F, 0xFE, 0xE0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x8F, 0xFF, 0x01
             -, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 
1575          0x00, 0x1B, 
1576          //[106: 2-Bit]
1577          0xFF, 0x07, 0xF7, 0x7F, 0xFF, 0x01, 0xF7, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0x1F, 0xFF, 0x01
             -, 0xF1, 0x1F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x07, 
1578          0x00, 0x1B, 
1579          //[107: 2-Bit]
1580          0x03, 0x30, 0x00, 0x01, 0x03, 0x30, 0x00, 0x01, 0x03, 0x00, 0x14, 
1581          0x00, 0x1B, 
1582          //[108: 2-Bit]
1583          0xFF, 0x07, 0x0F, 0x00, 0x13, 
1584          0x00, 0x1B, 
1585          //[109: 2-Bit]
1586          0xFF, 0x01, 0xEF, 0xFF, 0x01, 0xFC, 0x8F, 0xFF, 0x01, 0xF0, 0x0F, 0x00, 0x13, 
1587          0x00, 0x1B, 
1588          //[110: 2-Bit]
1589          0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x07, 0x70, 0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0F, 0xF0
             -, 0x01, 0x1F, 0xF0, 0x03, 0x7F, 0xF0, 0x0F, 0xFF, 0x01, 0xF1, 0x3F, 0xFF, 0x01, 0xF7, 0xFF, 0x01, 
1590          0x00, 0x1B, 
1591          //[111: 2-Bit]
1592          0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0E, 0xF0, 0x00, 0x01, 0x0F, 0xF8, 0xC0, 0x0F, 0xFC, 0xE0, 0x0F, 0xFF
             -, 0x01, 0xF8, 0xCF, 0xFF, 0x01, 0xFE, 0xEF, 0xFF, 0x07, 
1593          0x00, 0x1B, 
1594          //[112: 2-Bit]
1595          0x00, 0x16, 0x08, 0xC0, 0x00, 0x01, 0x0E, 0xF8, 
1596          0x00, 0x1B, 
1597          //[113: 2-Bit]
1598          0xFF, 0x01, 0xF3, 0x1F, 0x7F, 0xF0, 0x03, 0x07, 0x00, 0x14, 
1599          0x00, 0x1B, 
1600          //[114: 2-Bit]
1601          0xFF, 0x08, 0x7F, 0x00, 0x12, 
1602          0x00, 0x1B, 
1603          //[115: 2-Bit]
1604          0xFF, 0x03, 0xFE, 0x8F, 0xFF, 0x01, 0xE0, 0x0F, 0xC0, 0x00, 0x12, 
1605          0x00, 0x1B, 
1606          //[116: 2-Bit]
1607          0x1F, 0xFE, 0x81, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x1F, 0xF0, 0x01
             -, 0x1F, 0xF0, 0x01, 0x7F, 0xF0, 0x1F, 0xFF, 0x01, 0xF3, 0xFF, 0x01, 
1608          0x00, 0x1B, 
1609          //[117: 2-Bit]
1610          0x00, 0x01, 0x0E, 0xF0, 0x00, 0x01, 0x0F, 0xF0, 0x80, 0x0F, 0xF8, 0xC0, 0x0F, 0xFE, 0xF0, 0x8F, 0xFF, 0x01
             -, 0xFC, 0xEF, 0xFF, 0x0A, 
1611          0x00, 0x1B, 
1612          //[118: 2-Bit]
1613          0x00, 0x14, 0x80, 0x00, 0x01, 0x0C, 0xE0, 0x00, 0x01, 0x0F, 0xFC, 
1614          0x00, 0x1B, 
1615          //[119: 2-Bit]
1616          0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF1, 0x0F, 0x3F, 0xF0, 0x01, 0x01, 0x00, 0x11, 
1617          0x00, 0x1B, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 31  

1618          //[120: 2-Bit]
1619          0xFF, 0x04, 0xEF, 0xFF, 0x01, 0xFC, 0x0F, 0xFF, 0x01, 0x80, 0x0F, 0x00, 0x10, 
1620          0x00, 0x1B, 
1621          //[121: 2-Bit]
1622          0x00, 0x01, 0x0C, 0x80, 0x00, 0x16, 0x30, 0x00, 0x01, 
1623          0x00, 0x1B, 
1624          //[122: 2-Bit]
1625          0x00, 0x07, 0x10, 0x00, 0x01, 0x01, 0x30, 0x00, 0x01, 0x07, 0xF0, 0x00, 0x01, 0x1F, 0xF0, 0x03, 0x3F, 0xF0
             -, 0x0F, 0xFF, 0x01, 0xF1, 0x7F, 0xFF, 0x03, 
1626          0x00, 0x1B, 
1627          //[123: 2-Bit]
1628          0xFF, 0x01, 0xF3, 0x7F, 0xFF, 0x01, 0xF7, 0xFF, 0x10, 0xFC, 0x0F, 0xFF, 0x01, 0xC0, 0x0F, 0xE0, 
1629          0x00, 0x1B, 
1630          //[124: 2-Bit]
1631          0xFF, 0x11, 0xE7, 0x7F, 0xFC, 0x07, 0x7F, 0xF0, 0x07, 0x7F, 0xF0, 0x0F, 
1632          0x00, 0x1B, 
1633          //[125: 2-Bit]
1634          0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF
             -, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0xCF, 0xFF, 0x01, 
1635          0x00, 0x1B, 
1636          //[126: 2-Bit]
1637          0x7F, 0xF0, 0x03, 0x3F, 0xF0, 0x01, 0x1F, 0xF0, 0x01, 0x0F, 0x70, 0x00, 0x01, 0x07, 0x30, 0x00, 0x01, 0x01
             -, 0x10, 0x00, 0x0A, 
1638          0x00, 0x1B, 
1639          //[127: 2-Bit]
1640          0xFF, 0x16, 0xF7, 0x3F, 0xFF, 0x01, 0xF3, 0x1F, 
1641          0x00, 0x1B, 
1642          //[128: 2-Bit]
1643          0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0xFC, 0xFF, 0x16, 
1644          0x00, 0x1B, 
1645          //[129: 2-Bit]
1646          0x00, 0x04, 0xF0, 0xFF, 0x16, 
1647          0x00, 0x1B, 
1648          //[130: 2-Bit]
1649          0x00, 0x03, 0x01, 0xF0, 0xFF, 0x16, 
1650          0x00, 0x1B, 
1651          //[131: 2-Bit]
1652          0x07, 0xF0, 0x03, 0xFF, 0x18, 
1653          0x00, 0x1B, 
1654          //[132: 2-Bit]
1655          0xE0, 0xCF, 0xFF, 0x19, 
1656          0x00, 0x1B, 
1657          //[133: 2-Bit]
1658          0x00, 0x04, 0x08, 0xF8, 0xFF, 0x15, 
1659          0x00, 0x1B, 
1660          //[134: 2-Bit]
1661          0x00, 0x06, 0xFF, 0x15, 
1662          0x00, 0x1B, 
1663          //[135: 2-Bit]
1664          0x03, 0xF0, 0x01, 0xFF, 0x01, 0xF0, 0xFF, 0x16, 
1665          0x00, 0x1B, 
1666          //[136: 2-Bit]
1667          0x00, 0x01, 0x08, 0x80, 0xFF, 0x18, 
1668          0x00, 0x1B, 
1669          //[137: 2-Bit]
1670          0x03, 0x30, 0x00, 0x01, 0xFF, 0x18, 
1671          0x00, 0x1B, 
1672          //[138: 2-Bit]
1673          0xFE, 0xEF, 0xFF, 0x19, 
1674          0x00, 0x1B, 
1675          //[139: 2-Bit]
1676          0x00, 0x03, 0xFF, 0x18, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 32  

1677          0x00, 0x1B, 
1678          //[140: 2-Bit]
1679          0x0F, 0xF0, 0x00, 0x01, 0xFF, 0x18, 
1680          0x00, 0x1B, 
1681          //[141: 2-Bit]
1682          0xF8, 0xEF, 0xFF, 0x19, 
1683          0x00, 0x1B, 
1684          //[142: 2-Bit]
1685          0x00, 0x04, 0x0C, 0xFC, 0xFF, 0x15, 
1686          0x00, 0x1B, 
1687          //[143: 2-Bit]
1688          0x00, 0x07, 0x0C, 0xF0, 0x80, 0x0F, 0xFC, 0xE0, 0x8F, 0xFF, 0x01, 0xFC, 0xFF, 0x0B, 
1689          0x00, 0x1B, 
1690          //[144: 2-Bit]
1691          0x0F, 0x00, 0x12, 0x08, 0xE0, 0xC0, 0xCF, 0xFF, 0x04, 
1692          0x00, 0x1B, 
1693          //[145: 2-Bit]
1694          0xFC, 0x0F, 0x00, 0x17, 0xFC, 0xFF, 0x01, 
1695          0x00, 0x1B, 
1696          //[146: 2-Bit]
1697          0x00, 0x16, 0x30, 0x00, 0x01, 0x1F, 0xF0, 0xFF, 0x01, 
1698          0x00, 0x1B, 
1699          //[147: 2-Bit]
1700          0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x0F, 0xFF, 0x01, 0xF0, 0x1F, 0xFF, 0x01, 0xF1, 0x1F, 0xFF, 0x01
             -, 0xF1, 0x1F, 0xFF, 0x01, 0xF1, 0x3F, 0xFF, 0x01, 0xF3, 0x3F, 0xFF, 0x01, 0xF3, 0xFF, 0x04, 
1701          0x00, 0x1B, 
1702          //[148: 2-Bit]
1703          0xFC, 0xCF, 0xFF, 0x01, 0xFC, 0x8F, 0xFF, 0x01, 0xF8, 0x8F, 0xFF, 0x01, 0xF8, 0x0F, 0xFF, 0x01, 0xF0, 0x0F
             -, 0xFF, 0x01, 0xE0, 0x0F, 0xFE, 0xE0, 0x0F, 0xFE, 0xC0, 0x0F, 0xFC, 0xC0, 0x0F, 0xF8, 
1704          0x00, 0x1B, 
1705          //[149: 2-Bit]
1706          0xFF, 0x01, 0xF0, 0x07, 0x7F, 0xF0, 0x03, 0x1F, 0xF0, 0x00, 0x01, 0x07, 0x30, 0x00, 0x01, 0x03, 0x10, 0x00
             -, 0x0D, 
1707          0x00, 0x1B, 
1708          //[150: 2-Bit]
1709          0xFF, 0x11, 0x3F, 0xFF, 0x01, 0xF1, 0x0F, 0x7F, 0xF0, 0x03, 0x1F, 0x70, 0x00, 0x01, 
1710          0x00, 0x1B, 
1711          //[151: 2-Bit]
1712          0xFF, 0x0D, 0xEF, 0xFF, 0x01, 0xFE, 0xCF, 0xFF, 0x01, 0xFC, 0x8F, 0xFF, 0x01, 0xF0, 0x0F, 0xFE, 0xC0, 0x0F
             -, 0xF8, 
1713          0x00, 0x1B, 
1714          //[152: 2-Bit]
1715          0x00, 0x01, 0x0F, 0xF0, 0x00, 0x01, 0x0E, 0xE0, 0x00, 0x01, 0x0C, 0xC0, 0x00, 0x01, 0x08, 0x80, 0x00, 0x0F
             -, 
1716          0x00, 0x1B, 
1717          //[153: 2-Bit]
1718          0x03, 0x00, 0x1A, 
1719          0x00, 0x1B, 
1720          //[154: 2-Bit]
1721          0xFF, 0x04, 0xF7, 0x3F, 0xFF, 0x01, 0xF0, 0x07, 0x1F, 0xF0, 0x00, 0x01, 0x03, 0x00, 0x0E, 
1722          0x00, 0x1B, 
1723          //[155: 2-Bit]
1724          0xFF, 0x10, 0xF3, 0x0F, 0x3F, 0xF0, 0x00, 0x01, 0x01, 0x00, 0x05, 
1725          0x00, 0x1B, 
1726          //[156: 2-Bit]
1727          0xFF, 0x17, 0x3F, 0x7F, 0xF0, 0x00, 0x01, 
1728          0x00, 0x1B, 
1729          //[157: 2-Bit]
1730          0xFF, 0x19, 0xCF, 0xFF, 0x01, 
1731          0x00, 0x1B, 
1732          //[158: 2-Bit]
1733          0xFF, 0x15, 0xF8, 0x0F, 0xF0, 0x00, 0x01, 0x08, 0x00, 0x01, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 33  

1734          0x00, 0x1B, 
1735          //[159: 2-Bit]
1736          0xFF, 0x0F, 0xF8, 0x0F, 0xFC, 0x00, 0x01, 0x0E, 0x00, 0x07, 
1737          0x00, 0x1B, 
1738          //[160: 2-Bit]
1739          0xFF, 0x07, 0xEF, 0xFF, 0x01, 0xF0, 0x0F, 0xF8, 0x00, 0x01, 0x0E, 0x80, 0x00, 0x0C, 
1740          0x00, 0x1B, 
1741          //[161: 2-Bit]
1742          0xFF, 0x03, 0xF0, 0x0F, 0xF8, 0x00, 0x01, 0x0C, 0x00, 0x13, 
1743          0x00, 0x1B, 
1744          //[162: 2-Bit]
1745          0xFF, 0x03, 0x00, 0x18, 
1746          0x00, 0x1B, 
1747          //[163: 2-Bit]
1748          0xFF, 0x04, 0xF0, 0x01, 0x03, 0x00, 0x14, 
1749          0x00, 0x1B, 
1750          //[164: 2-Bit]
1751          0xFF, 0x0A, 0xF3, 0x0F, 0x3F, 0xF0, 0x00, 0x01, 0x03, 0x00, 0x0B, 
1752          0x00, 0x1B, 
1753          //[165: 2-Bit]
1754          0xFF, 0x13, 0xF3, 0x0F, 0x3F, 0x70, 0x00, 0x04, 
1755          0x00, 0x1B, 
1756          //[166: 2-Bit]
1757          0xFF, 0x1A, 0x3F, 
1758          0x00, 0x1B, 
1759          //[167: 2-Bit]
1760          0xFF, 0x13, 0xEF, 0xFF, 0x01, 0xF8, 0x0F, 0xFE, 0x00, 0x01, 0x0F, 0xC0, 
1761          0x00, 0x1B, 
1762          //[168: 2-Bit]
1763          0xFF, 0x07, 0xEF, 0xFF, 0x01, 0xFC, 0x0F, 0xFF, 0x01, 0xE0, 0x0F, 0xF8, 0x00, 0x01, 0x0F, 0xC0, 0x00, 0x01
             -, 0x08, 0x00, 0x07, 
1764          0x00, 0x1B, 
1765          //[169: 2-Bit]
1766          0x00, 0x01, 0x0F, 0xE0, 0x00, 0x01, 0x0C, 0x80, 0x00, 0x15, 
1767          0x00, 0x1B, 
1768          //[170: 2-Bit]
1769          0xFF, 0x02, 0x3F, 0x1F, 0x10, 0x00, 0x16, 
1770          0x00, 0x1B, 
1771          //[171: 2-Bit]
1772          0xFF, 0x07, 0x20, 0x00, 0x13, 
1773          0x00, 0x1B, 
1774          //[172: 2-Bit]
1775          0xFF, 0x08, 0x3F, 0x00, 0x12, 
1776          0x00, 0x1B, 
1777          //[173: 2-Bit]
1778          0xFF, 0x09, 0x00, 0x12, 
1779          0x00, 0x1B, 
1780          //[174: 2-Bit]
1781          0xFF, 0x07, 0x1F, 0xFE, 0x00, 0x12, 
1782          0x00, 0x1B, 
1783          //[175: 2-Bit]
1784          0xFF, 0x06, 0xF0, 0x0F, 0x00, 0x13, 
1785          0x00, 0x1B, 
1786          //[176: 2-Bit]
1787          0xFF, 0x03, 0xE0, 0x0F, 0xC0, 0x00, 0x15, 
1788          0x00, 0x1B, 
1789          //[177: 2-Bit]
1790          0xC0, 0x0F, 0x80, 0x00, 0x18, 
1791          0x00, 0x1B, 
1792          //[178: 2-Bit]
1793          0x7F, 0xF0, 0x00, 0x19, 
1794          0x00, 0x1B, 
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 34  

1795          //[179: 2-Bit]
1796          0xFF, 0x05, 0x0F, 0x0F, 0x00, 0x14, 
1797          0x00, 0x1B, 
1798          //[180: 2-Bit]
1799          0xFF, 0x08, 0x1F, 0x00, 0x12, 
1800          0x00, 0x1B, 
1801          //[181: 2-Bit]
1802          0xFF, 0x06, 0xFC, 0x0F, 0xC0, 0x00, 0x12, 
1803          0x00, 0x1B, 
1804          //[182: 2-Bit]
1805          0xFF, 0x01, 0x0F, 0xFF, 0x01, 0x80, 0x0F, 0xC0, 0x00, 0x15, 
1806          0x00, 0x1B, 
1807          
1808          
1809          };
1810          code OSDFontTable ucLogoFont2BitTable = {
1811              sizeof(LogoFont2Bit),
1812              OSD_FONTBITS_2b,
1813              0,
1814              LogoFont2Bit
1815          };
1816          
1817          code UCHAR LogoFontMapIndex[]={
1818              0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 
1819              8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1820              0, 0, 0, 0, 0, 0, 0, 0, 12, 13, 14, 15, 16, 16, 16, 16, 
1821              16, 16, 16, 16, 16, 16, 16, 17, 18, 19, 20, 21, 0, 0, 0, 0, 
1822              0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 22, 23, 16, 16, 16, 16, 
1823              16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 
1824              25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 16, 16, 16, 
1825              16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
1826              16, 16, 16, 16, 16, 29, 30, 0, 0, 0, 0, 0, 0, 31, 32, 16, 
1827              16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
1828              16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 33, 34, 0, 0, 0, 0, 
1829              35, 16, 16, 16, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
1830              47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 16, 16, 59, 60, 
1831              0, 0, 61, 62, 16, 16, 16, 63, 64, 65, 66, 0, 67, 68, 69, 70, 
1832              71, 0, 72, 73, 74, 75, 76, 0, 77, 78, 79, 80, 81, 82, 83, 84, 
1833              16, 16, 85, 86, 0, 87, 16, 16, 16, 16, 63, 88, 89, 90, 83, 91, 
1834              92, 93, 94, 95, 95, 96, 73, 97, 16, 98, 0, 99, 100, 101, 102, 16, 
1835              103, 0, 104, 16, 16, 16, 105, 0, 0, 106, 16, 16, 16, 63, 107, 108, 
1836              109, 12, 110, 111, 112, 113, 114, 115, 116, 73, 97, 16, 98, 0, 99, 117, 
1837              118, 119, 120, 121, 122, 123, 124, 16, 16, 125, 0, 0, 126, 127, 16, 16, 
1838              128, 129, 129, 130, 131, 16, 16, 132, 133, 134, 135, 16, 136, 137, 16, 138, 
1839              139, 140, 16, 141, 142, 143, 144, 145, 146, 147, 16, 16, 148, 0, 0, 0, 
1840              149, 150, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
1841              16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 151, 152, 
1842              0, 0, 0, 0, 153, 154, 155, 156, 16, 16, 16, 16, 16, 16, 16, 16, 
1843              157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 16, 16, 16, 16, 16, 167, 
1844              168, 169, 0, 0, 0, 0, 0, 0, 0, 0, 153, 170, 171, 172, 173, 173, 
1845              174, 175, 176, 177, 0, 0, 0, 0, 0, 0, 0, 0, 178, 179, 180, 173, 
1846              181, 182, 0, 0, 0, 0, 0, 
1847          
1848          };
1849          
1850          code UCHAR LogoPaletteData[]={
1851              (UCHAR)0xFFFF, (UCHAR)(0xFFFF>>8),
1852                  (UCHAR)0xFFFF, (UCHAR)(0xFFFF>>8),
1853                  (UCHAR)0xFFFF, (UCHAR)(0xFFFF>>8),
1854                  (UCHAR)0xFFFF, (UCHAR)(0xFFFF>>8),
1855          };
1856          
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 35  

1857          code OSDPaletteTable ucLogoPaletteData = {
1858              sizeof(LogoPaletteData),
1859              0,
1860              LogoPaletteData
1861          };
1862          void ShowLogo(void)
1863          #if 0
              {
                  USHRT i,l,m;
                  
                  EnableDclk();
                  #if 0
                  Force2Background(0x00, 0x00, 0xFF); // Enable free run mode
                  SetPostBGColor(0x00, 0x00, 0xFF);
                  MTXAPI_SetRGBGain(255, 255, 255);
                  MTXAPI_SetContrast(128);
                  SetBrightness(MAXIMUM_BRIGHTNESS_PWM);
                  #else
                  
                  Force2Background(0xE0, 0xF0, 0xF8); // Enable free run mode
                  SetPostBGColor(0x40, 0x10, 0x60); // Force BG color as 0xe0,0xf0,0xf8
                  MTXAPI_SetRGBGain(255, 255, 255);
                  MTXAPI_SetContrast(128);
                  SetBrightness(MAXIMUM_BRIGHTNESS_PWM);
                  #endif
                  OSDCloseAll();
                  OSDAPI_LoadPalette(&ucLogoPaletteData);
                  OSDAPI_SetHVZoom(0);
                  OSDAPI_SetFontSize(OSD_FONT_12X18);
                  OSDInitFrame(LOGO_WIDTH, LOGO_HEIGHT, LOGO_MAIN_FRAME_COLOR);
                  OSDAPI_SetPosition(50, 50);
                  m = OSDAPI_GetOSDFrameSize(LOGO_WIDTH, LOGO_HEIGHT);
                  OSDAPI_Set1BitFontAddr(m);
                  OSDAPI_Set2BitsFontAddr(m);
                  OSDAPI_LoadFont(OSD_FONT_COMPRESSED, &ucLogoFont2BitTable);
              
                  SC_INDEX_CTRL = 0x40; //Font Index Only
                  SC_INDEX_ADDR_LO = 0x00;
                  SC_INDEX_ADDR_HI = 0x00;
              
                  l = LOGO_WIDTH * LOGO_HEIGHT;
              
                  ResetWDTimer();
                  for(i=0; i<l; i++) {
                      SC_INDEX_DATA = (USHRT)LogoFontMapIndex[i];
                  }
                  ResetWDTimer();
                
                  PanelPowerOnSequence(TRUE);
                  OSDTurnOnOSD(); 
              }
              #else
1909          {
1910   1          USHRT i;//i, l, 
1911   1          //UCHAR x, y, ucIndex=0;
1912   1      
1913   1          Custom_System.bLogoONState = ON;
1914   1      
1915   1          EnableDclk();
1916   1          Force2Background(0xE0, 0xF0, 0xF8); // Enable free run mode
1917   1          SetPostBGColor(0x40, 0x10, 0x60); // Force BG color as 0xe0,0xf0,0xf8
1918   1          MTXAPI_SetRGBGain(255, 255, 255);
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 36  

1919   1          MTXAPI_SetContrast(128);
1920   1          SetBrightness(MAXIMUM_BRIGHTNESS_PWM);
1921   1          OSDCloseAll();
1922   1          
1923   1          OSDAPI_LoadPalette(&ucLogoPaletteData);
1924   1          OSDAPI_SetHVZoom(0);
1925   1      
1926   1          BFAPI_DisableWindow(BF_WINDOW_1); 
1927   1          BFAPI_DisableWindow(BF_WINDOW_2); 
1928   1          
1929   1          OSDAPI_SetFontSize(OSD_FONT_12X18);
1930   1          OSDInitFrame(LOGO_WIDTH, LOGO_HEIGHT, LOGO_MAIN_FRAME_COLOR); 
1931   1          OSDAPI_SetPosition(50, 50);
1932   1      #if ENABLE_OSD_ROTATION == ON
1933   1          OSDAPI_Set1BitFontAddr(OSDSRAM_ADDR_CEILING(OSDAPI_GetOSDFrameSize(LOGO_WIDTH, LOGO_HEIGHT)));
1934   1          //OSDAPI_Set2BitsFontAddr(OSDSRAM_ADDR_FLOOR(OSD_ROT_RAM_SIZE - 1854));
1935   1      #else
                  OSDAPI_Set1BitFontAddr(OSDSRAM_ADDR_CEILING(OSDAPI_GetOSDFrameSize(LOGO_WIDTH, LOGO_HEIGHT)));
                  //OSDAPI_Set2BitsFontAddr(OSD_RAM_SIZE - 1854);
              #endif
1939   1      
1940   1      //////////////////////////new add
1941   1          OSDAPI_Set2BitsFontAddr(OSDAPI_GetOSDFrameSize(LOGO_WIDTH, LOGO_HEIGHT)+512*9);
1942   1      
1943   1          //OSDAPI_LoadFont(OSD_FONT_COMPRESSED, &ucSpaceOneBitFontTable);
1944   1         // OSDAPI_LoadFont(OSD_FONT_COMPRESSED, &ucBenqLogoFont1BitTable);
1945   1          
1946   1          OSDAPI_LoadFont(OSD_FONT_COMPRESSED, &ucLogoFont2BitTable);
1947   1      
1948   1      
1949   1      #if ENABLE_OSD_ROTATION == ON
1950   1      #if !lrd_dis_benq
                  UserData.bOSDRotation = bIsOSDRotationActive();
              #endif
1953   1      #endif
1954   1      
1955   1      
1956   1          SC_INDEX_CTRL = 0x40; //Font Index Only
1957   1          SC_INDEX_ADDR_LO = 0x00;
1958   1          SC_INDEX_ADDR_HI = 0x00;
1959   1      
1960   1      
1961   1      
1962   1          if(UserData.bOSDRotation == FALSE){
1963   2      
1964   2              ResetWDTimer();
1965   2              for(i=0; i<(LOGO_WIDTH * LOGO_HEIGHT); i++) {
1966   3                  SC_INDEX_DATA = (USHRT)LogoFontMapIndex[i];
1967   3              }
1968   2              ResetWDTimer();
1969   2              //Set Split
1970   2            //  LogoSetSplit(LOGO_SPLIT_START_X, LOGO_SPLIT_START_Y, LOGO_SPLIT_OFFSET_X, LOGO_SPLIT_OFFSET_Y);
1971   2          }
1972   1          else
1973   1          {
1974   2      
1975   2              ResetWDTimer();
1976   2              for(i=0; i<(LOGO_WIDTH * LOGO_HEIGHT); i++) {
1977   3                  SC_INDEX_DATA = (USHRT)LogoFontMapIndex[i];
1978   3              }
1979   2              ResetWDTimer();  
1980   2              //Set Split
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 37  

1981   2              //UserSetOSDRotation();
1982   2          }
1983   1          
1984   1      
1985   1      //////////////////////////////////////////
1986   1          GMAPI_DisableGamma();
1987   1          OSDTurnOnOSD();
1988   1          PanelPowerOnSequence(TRUE);
1989   1      }
1990          
1991          #endif
1992          #endif
1993          //******************************************************************************
1994          // Prototype: 
1995          //  void CloseLogo(void)
1996          // Parameters:
1997          //  None
1998          // Return:
1999          //  None
2000          // Purpose:
2001          //  Close logo and init some user setting
2002          // Notes:
2003          //  None
2004          //******************************************************************************
2005          void CloseLogo(void)
2006          {
2007   1          PanelPowerOffSequence();
2008   1          GMAPI_EnableGamma();    
2009   1          Custom_System.bLogoONState = OFF;    
2010   1          OSDCloseAll();
2011   1          SetPostBGColor(0, 0, 0);
2012   1          UserSetBrightness();
2013   1          UserSetContrast();
2014   1          UserSetColorTemp();
2015   1          OSDInitialize(TRUE);
2016   1      }
2017          #if 0
              void DrawBenqLogo(UCHAR pos_x, UCHAR pos_y)
              {
                  UCHAR x, y, ucIndex=0;
              
                  for(y=0; y<LOGO_PART1_H; y++) {
                      for(x=0; x<LOGO_PART1_W; x++){            
                          ucIndex = BenqLogoFontMapIndex[LOGO_PART1_W*y+x];        
                          OSDAPI_WriteXYChar(0, pos_x+x, pos_y+y, ucIndex);
                      }
                  }
              }    
              #endif
2030          #if ENABLE_LOGO_ENERGYSTART == ON
              void DrawEnergyStarLogo(UCHAR pos_x, UCHAR pos_y)
              {
                  UCHAR x, y, ucIndex=0;
                  
                  for(y=0; y<LOGO_PART2_H; y++) {
                      for(x=0; x<LOGO_PART2_W; x++){            
                          ucIndex = eStarFontMapIndex[LOGO_PART2_W*y+x];        
                          OSDAPI_WriteXYChar(0, pos_x+x, pos_y+y, ucIndex);
                      }
                      OSDAPI_FillLineAttr(pos_x, pos_y+y, LOGO_PART2_W, LOGO_MAIN_FRAME_COLOR|ONEBITFONT1);
                  }
              }
C51 COMPILER V9.54   LOGO                                                                  01/06/2017 14:57:10 PAGE 38  

              #endif
2044          #if LOGOWITH_EYE_CARE == ON
              void DrawEyeCareLogo(UCHAR pos_x, UCHAR pos_y)
              {
                  UCHAR x, y, ucIndex=0;
                  
                  for(y=0; y<LOGO_PART3_H; y++) {
                      for(x=0; x<LOGO_PART3_W; x++){            
                          ucIndex = EyeCareFontMapIndex[LOGO_PART3_W*y+x]+ESTAR_1BIT_FONT_NUM;        
                          OSDAPI_WriteXYChar(0, pos_x+x, pos_y+y, ucIndex);
                      }
                      OSDAPI_FillLineAttr(pos_x, pos_y+y, LOGO_PART3_W, LOGO_MAIN_FRAME_COLOR|ONEBITFONT1);
                  }
              }
              #endif
2058          void LogoSetSplit(UCHAR Hstart, UCHAR Vstar, UCHAR Hoffset, UCHAR Voffset)
2059          {
2060   1          SC_OSD_HOR_SPLIT_START_LO = Hstart|BIT7;
2061   1          SC_OSD_HOR_SPLIT_WIDTH_LO = Hoffset;
2062   1          SC_OSD_VER_SPLIT_START_LO = Vstar|BIT7;
2063   1          SC_OSD_VER_SPLIT_WIDTH_LO = Voffset;
2064   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    336    ----
   CONSTANT SIZE    =   3457    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
