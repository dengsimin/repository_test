C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE COLORCONFIG
OBJECT MODULE PLACED IN .\Bin\ColorConfig.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE App\ColorConfig.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\App\OSD;
                    -.\App\User;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\Phy\SI\NVT
                    -\Keypad;.\Sys;.\Sys\SI\NVT;.\Phy\SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_MODULE,LVIEW_25
                    -60X1440,FLASH_BANK=8) PRINT(.\Lst\ColorConfig.lst) TABS(2) OBJECT(.\Bin\ColorConfig.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          //******************************************************************************
  14          // G L O B A L   D E F I N I T I O N S
  15          //******************************************************************************
  16          #define DBC_ULTRA_LOW
  17          #ifdef DBC_ULTRA_LOW
  18          #define DBC_TIME_TO_OFF     10000
  19          #define DBC_BACKLIGHT_OFF   ULTRA_MIN_BACKLIGHT_VALUE
  20          #define DBC_LTHD_BLANK      4
  21          #define DBC_HTHD_BLANK      7
  22          #endif
  23          #define MapDBCBacklight(s)  ((ULONG)s * (1023 - MIN_BACKLIGHT_VALUE) / 1023 + MIN_BACKLIGHT_VALUE)
  24          //******************************************************************************
  25          // S T A T I C   V A R I A B L E S
  26          //******************************************************************************
  27          #if  OSDTYPE == OSD_BENQ_V1
              #if defined(AUO_M238DAN01_0)
              static code IGBlock IGModes[NUMBER_IG_MODES] = {
                  {16,   0,  64, 128,  192,  256,  320,  384,  448,  512,  576,  640,   704,  768,  832,  896,   960,   
             -1024},  //IG_MOVIE   0909 Stanley
                  {16,   0,  0,    0,  0x4c, 0xa4, 0xf8, 0x148,0x18d,0x1dd,0x229,0x275, 0x2b2,0x2fa,0x336,0x376, 0x3A6, 
             -1024},  //IG_CAD
                  {16,   0,  0x54,0xa8,0xd8, 0x110,0x140,0x180,0x1c0,0x200,0x240,0x280, 0x2c0,0x300,0x340,0x380, 0x3c0, 
             -1024},  //IG_PHOTO   0909 Stanley
                  {16,   0,  0x5c,0x90,0xc0, 0x100,0x140,0x180,0x1c0,0x200,0x240,0x280, 0x2c0,0x300,0x340,0x380, 0x3c0, 
             -1024},  //IG_M_BOOK    
                  {16,0x10,  0x6c,0xb4,0xe8, 0x120,0x150,0x180,0x1c0,0x200,0x240,0x280, 0x2c0,0x300,0x340,0x380, 0x3c0, 
             -1024},  //IG_PRESENTATION
                  {16,   0,  58, 116, 168, 228, 288, 356, 428, 504, 584, 660, 732, 800, 860, 920, 972, 1024},  //IG_S_CU
             -RVE
                  {16,   0,  58, 128, 216, 288, 352, 412, 468, 520, 568, 620, 676, 736, 800, 872, 964, 1024},  //IG_RS_C
             -URVE
                  {16,   0,  48, 100, 152, 204, 260, 320, 380, 440, 504, 572, 640, 712, 784, 864, 964, 1024},  //IG_RC_C
             -URVE
                  {16,   0,  84, 164, 240, 312, 384, 452, 520, 584, 648, 708, 764, 820, 876, 928, 976, 1024},  //IG_C_CU
             -RVE
                  {16,   0,  64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960, 1024},  //IG_ANIM
             -ATION   //test
                  {16,   0,  48, 108, 164, 228, 276, 340, 408, 488, 540, 596, 664, 736, 804, 876, 948, 1024},  //IG_NVT_
             -CURVE_2
                  {16,   0,  64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960, 1024},  //IG_DEFA
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 2   

             -ULT
              };
              
              static code UCHAR DefaultMinIGPoints[] = {
                  58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58
              };
              
              static code HHBlock HHModes[NUMBER_HH_MODES] = {
                  {
                      24,    //Benq HH Movie 0909 Stanley
                      0x00,        
                      0x00,0x20,0x10,0x00,
                      0x20,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                  },
                  {        //Benq HH CAD
                      24,
                      0x00,
                      0x01,0x20,0x10,0x00,
                      0x20,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x21,0x00,0x00,0x00,
                  },
                  {        //Benq HH photo 0909 Stanley
                      24,
                      0x00,
                      0x00,0x01,0x10,0x03,
                      0x20,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                  },
                  {         //Benq HH M-Book
                      24,
                      0x00,
                      0x00,0x05,0x10,0x00,
                      0x20,0x00,0x00,0x00,
                      0x00,0x00,0x83,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x02,0x02,0x20,0x00,
                  },
                  {         //Benq HH PRESENTATION
                      24,
                      0x00,
                      0x00,0x00,0x00,0x00,
                      0x04,0x00,0x00,0x00,
                      0x00,0x08,0x08,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x10,
                      0x27,0x28,0x24,0x00,
                  },
                  {
                      24,    //Benq HH Animation 0909 Stanley
                      0x00,        
                      0x00,0x20,0x10,0x00,
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 3   

                      0x20,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                  },
              };
              
              static code HSBlock HSModes[NUMBER_HS_MODES] = {
                  {
                      24,        //Benq HS Movie 0909 Stanley
                      0x00,
                      0x98,0x88,0x90,0x90,
                      0x90,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x90,        
                  },
                  {
                      24,        //Benq HS CAD
                      0x00,
                      0x68,0x88,0x90,0x90,
                      0x70,0x80,0x80,0x80,
                      0x68,0x80,0x80,0x80,
                      0x70,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x68,0x80,0x80,
                  },{
                      24,        //Benq HS Photo 0909 Stanley
                      0x00,
                      0x88,0x80,0x90,0x88,
                      0x90,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x90,
                  },
                  {
                      24,         //Benq HS M-book
                      0x00,
                      0x90,0x70,0x80,0x90,
                      0x90,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x70,0x90,
                  },
                  {
                      24,         //Benq HS PRESENTATION
                      0x00,
                      0x70,0x78,0x80,0x80,
                      0x90,0x90,0x80,0x80,
                      0x80,0x90,0x90,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x90,
                      0x90,0x88,0x78,0x70,
                  },
                  {
                      24,        //Benq HS animation 0909 Stanley
                      0x00,
                      0x98,0x88,0x90,0x90,
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 4   

                      0x90,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x90,        
                  },
              };
              #elif defined(AUO_M238DAN01_3)
              static code IGBlock IGModes[NUMBER_IG_MODES] = {
                  {16,   0,  0x54, 0x98,  0xdc,  0x110,  0x144,  0x180,  0x1c0,  0x200,  0x240,  0x280,   0x2c0,  0x300,
             -  0x340,  0x380,   0x3c0,   1024},  //IG_MOVIE   0909 Stanley
                  {16,   0,  0x10, 0x34,  0x70, 0xbc, 0xfc, 0x148,0x195,0x1dd,0x229,0x275, 0x2ba,0x2fa,0x336,0x376, 0x3A
             -E, 1024},  //IG_CAD
                  {16,   0,  0x44, 0x8c,0xd8, 0x118, 0x150,0x189,0x1c0,0x200,0x240,0x280, 0x2c0,0x300,0x340,0x380, 0x3c0
             -, 1024},  //IG_PHOTO   0909 Stanley
                  {16,   0,  0x44, 0x88,  0xc8, 0x100,0x140,0x180,0x1c0,0x200,0x240,0x280, 0x2c0,0x300,0x340,0x380, 0x3c
             -0, 1024},  //IG_M_BOOK    
                  {16,  0x28,  0x8c,0xd8,0x114, 0x14c,0x181,0x1b9,0x1ed,0x225,0x259,0x28d, 0x2c0,0x300,0x340,0x380, 0x3c
             -0, 1024},  //IG_PRESENTATION
                  {16,   0,  58, 116, 168, 228, 288, 356, 428, 504, 584, 660, 732, 800, 860, 920, 972, 1024},  //IG_S_CU
             -RVE
                  {16,   0,  58, 128, 216, 288, 352, 412, 468, 520, 568, 620, 676, 736, 800, 872, 964, 1024},  //IG_RS_C
             -URVE
                  {16,   0,  48, 100, 152, 204, 260, 320, 380, 440, 504, 572, 640, 712, 784, 864, 964, 1024},  //IG_RC_C
             -URVE
                  {16,   0,  84, 164, 240, 312, 384, 452, 520, 584, 648, 708, 764, 820, 876, 928, 976, 1024},  //IG_C_CU
             -RVE
                  {16,   0,  0x50, 0x90, 0xcc, 0x106, 0x146, 0x186, 0x1c6, 0x200, 0x245, 0x284, 0x2c3, 0x300, 0x340, 0x3
             -80, 0x3c0, 1024},  //IG_ANIMATION   //test
                  {16,   0,  48, 108, 164, 228, 276, 340, 408, 488, 540, 596, 664, 736, 804, 876, 948, 1024},  //IG_NVT_
             -CURVE_2
                  {16,   0,  64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960, 1024},  //IG_DEFA
             -ULT
              };
              
              static code UCHAR DefaultMinIGPoints[] = {
                  58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58
              };
              
              static code HHBlock HHModes[NUMBER_HH_MODES] = {
                  {
                      24,    //Benq HH Movie 0909 Stanley
                      0x00,        
                      0x00,0x20,0x08,0x00,
                      0x20,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                  },
                  {        //Benq HH CAD
                      24,
                      0x00,
                      0xf0,0x08,0x10,0x10,
                      0x08,0xf0,0x10,0x10,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0xf0,
                      0x00,0x00,0x00,0x00,
                      0x00,0xe0,0xe0,0xe0,
                  },
                  {        //Benq HH photo 0909 Stanley
                      24,
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 5   

                      0x00,
                      0x00,0x10,0x20,0x13,
                      0x20,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                  },
                  {         //Benq HH M-Book
                      24,
                      0x00,
                      0x00,0x05,0x20,0x28,
                      0x10,0x08,0xe8,0xe8,
                      0x08,0x00,0x00,0x00,
                      0xf0,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x02,0x02,0xf4,0x00,
                  },
                  {         //Benq HH PRESENTATION
                      24,
                      0x00,
                      0x00,0xf8,0xf8,0x00,
                      0x04,0x00,0xf0,0x00,
                      0xf0,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x20,0x30,
                      0x30,0x28,0x20,0x00,
                  },
                  {         //Benq HH animation
                      24,
                      0x00,
                      0x00,0xd8,0xfa,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                  }
              };
              
              static code HSBlock HSModes[NUMBER_HS_MODES] = {
                  {
                      24,        //Benq HS Movie 0909 Stanley
                      0x00,
                      0x98,0x85,0x8a,0x80,
                      0x90,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x90,        
                  },
                  {
                      24,        //Benq HS CAD
                      0x00,
                      0x90,0x90,0x90,0x90,
                      0x90,0x90,0x90,0x90,
                      0x90,0x80,0x80,0x80,
                      0x70,0x80,0x88,0x90,
                      0x90,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                  },{
                      24,        //Benq HS Photo 0909 Stanley
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 6   

                      0x00,
                      0x88,0x85,0x8a,0x80,
                      0x90,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x90,
                  },
                  {
                      24,         //Benq HS M-book
                      0x00,
                      0x78,0x88,0x88,0x90,
                      0x88,0x78,0x70,0x70,
                      0x70,0x70,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x78,0x78,
                  },
                  {
                      24,         //Benq HS PRESENTATION
                      0x00,
                      0x70,0x70,0x78,0x70,
                      0x70,0x88,0x88,0x70,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x88,0x90,
                      0x90,0x80,0x70,0x60,
                  },
                  {
                      24,         //Benq HS animation
                      0x00,
                      0x80,0x78,0x78,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                  }
              };
              #endif
              static code CMBlock CMModes[PICTURE_MODE_NUM] = {
              #if OSDTYPE == OSD_BENQ_V1
                  {// Benq SRGB
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x80,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_DEFAULT],
                      NULLPTR, // HH Table
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 7   

                      NULLPTR, // HS Table
                      NULLPTR, // HI Table
                  },
              #if ENABLE_PICTURE_MODE_CAD == ON
              {// Benq CAD
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                  0x90,    // Saturation
                      0x80,    // Intensity
                  0x82,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x01,    // Sharpness
                      0x01,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_CAD],
                      &HHModes[HH_MODE_CAD],
                      &HSModes[HS_MODE_CAD],
                      NULLPTR, // HI Table
                  },
              #endif
              #if ENABLE_PICTURE_MODE_ANIMATION == ON
              {// Benq Animation
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                  0x90,    // Saturation
                      0x80,    // Intensity
                  0x82,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                  0x01,    // Sharpness
                  0x01,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                    &IGModes[IG_ANIMATION],
                      &HHModes[HH_MODE_ANIMATION],
                      &HSModes[HS_MODE_ANIMATION],
                      NULLPTR, // HI Table
                  },
              #endif
              #if ENABLE_PRESENTATION_MODE == ON
              {// Benq Presentation
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x80,    // Saturation
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 8   

                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_PRESENTATION],
                      &HHModes[HH_MODE_PRESENTATION],
                      &HSModes[HS_MODE_PRESENTATION],
                      NULLPTR, // HI Table
                  },
              #endif    
              #endif
                  {// Benq Standard
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x80,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_DEFAULT],
                      NULLPTR, // HH Table
                      NULLPTR, // HS Table
                      NULLPTR, // HI Table
                  },
                  {// Benq Low Blue Light
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x98,    // Saturation
                      0x80,    // Intensity
                      0x82,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x01,    // Sharpness
                      0x01,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_DEFAULT],
                      NULLPTR,
                      NULLPTR,
                      NULLPTR, // HI Table
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 9   

                  },
              #if ENABLE_PICTURE_MODE_MOVIE == ON   
                  {// Benq Movie
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x90,    // Saturation
                      0x80,    // Intensity
                      0x82,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x01,    // Sharpness
                      0x01,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_MOVIE],
                      &HHModes[HH_MODE_Movie],
                      &HSModes[HS_MODE_Movie],
                      NULLPTR, // HI Table
                      },
              #endif        
              #if ENABLE_PICTURE_MODE_GAME == ON            
                      {/// Benq Game
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x82,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_DEFAULT],
                      NULLPTR,
                      NULLPTR,
                      NULLPTR, // HI Table
                      },
              #endif        
              #if ENABLE_PICTURE_MODE_PHOTO== ON   
                      {// Benq Photo
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x82,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 10  

                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_PHOTO],
                      &HHModes[HH_MODE_Photo],
                      &HSModes[HS_MODE_Photo],
                      NULLPTR, // HI Table
                  },
              #endif    
              #if OSDTYPE == OSD_BENQ
                  {// Benq SRGB
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x80,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_DEFAULT],
                      NULLPTR, // HH Table
                      NULLPTR, // HS Table
                      NULLPTR, // HI Table
                  },
              #endif
                  {// Benq ECO
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x80,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_DEFAULT],
                      NULLPTR, // HH Table
                      NULLPTR, // HS Table
                      NULLPTR, // HI Table        
              #if ENABLE_PICTURE_MODE_MBOOK == ON
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 11  

                  },
                  {// Benq M-Book
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                  0x90,    // Saturation
                      0x80,    // Intensity
                  0x82,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                  0x01,    // Sharpness
                  0x01,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                  &IGModes[IG_M_BOOK],
                  &HHModes[HH_MODE_M_Book],
                  &HSModes[HS_MODE_M_Book],
                      NULLPTR, // HI Table     
              #endif  
                  },
                  {//OFF
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x80,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_DEFAULT],
                      NULLPTR, // HH Table
                      NULLPTR, // HS Table
                      NULLPTR, // HI Table
                  },
              };
              
              static code CTGamma CT5800K[5]={
              {
                0,  //R_offset
                (-5), //G_offset
                (-5), //B_offset
              },
              {
                0,  //R_offset
                (-3), //G_offset
                (-3), //B_offset
              },
              {
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 12  

                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                (2),  //B_offset
              },
              {
                0,  //R_offset
                2,  //G_offset
                (2),  //B_offset
              },
              };
              
              static code CTGamma CT9300K[5]={
              {
                (-9),//(-15), //R_offset
                (-7),//(-12), //G_offset
                0,  //B_offset
              },
              {
                (-3),//(-8),  //R_offset
                (-4),//(-8),  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
                4,  //R_offset
                2,  //G_offset
                0,  //B_offset
              },
              {
                (-12),//6,  //R_offset
                4,  //G_offset
                0,  //B_offset
              },
              
              };
              
              static code CTGamma CT6500K[5]={
              {
                0,  //R_offset
                (-4), //G_offset
                (-3), //B_offset
              },
              {
                0,  //R_offset
                (-4), //G_offset
                (-3), //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 13  

                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              
              };
              #elif OSDTYPE == OSD_BENQ_V2
 723          static code IGBlock IGModes[NUMBER_IG_MODES] = {
 724              {16,   0,  64, 128,  192,  256,  320,  384,  448,  512,  576,  640,   704,  768,  832,  896,   960,   
             -1024},  //IG_MOVIE   0909 Stanley
 725              {16,   0,  0x10, 0x34,  0x70, 0xBC, 0xFC, 0x148,0x195,0x1dd,0x229,0x275, 0x2BA,0x2fa,0x336,0x376, 0x3A
             -E, 1024},  //IG_CAD
 726              {16,   0,  0x54,0xa8,0xd8, 0x110,0x140,0x180,0x1c0,0x200,0x240,0x280, 0x2c0,0x300,0x340,0x380, 0x3c0, 
             -1024},  //IG_PHOTO   0909 Stanley
 727              {16,   0,  0x5c,0x90,0xc0, 0x100,0x140,0x180,0x1c0,0x200,0x240,0x280, 0x2c0,0x300,0x340,0x380, 0x3c0, 
             -1024},  //IG_M_BOOK    
 728              {16,0x10,  0x6c,0xb4,0xe8, 0x120,0x150,0x180,0x1c0,0x200,0x240,0x280, 0x2c0,0x300,0x340,0x380, 0x3c0, 
             -1024},  //IG_PRESENTATION
 729              {16,   0,  58, 116, 168, 228, 288, 356, 428, 504, 584, 660, 732, 800, 860, 920, 972, 1024},  //IG_S_CU
             -RVE
 730              {16,   0,  58, 128, 216, 288, 352, 412, 468, 520, 568, 620, 676, 736, 800, 872, 964, 1024},  //IG_RS_C
             -URVE
 731              {16,   0,  48, 100, 152, 204, 260, 320, 380, 440, 504, 572, 640, 712, 784, 864, 964, 1024},  //IG_RC_C
             -URVE
 732              {16,   0,  84, 164, 240, 312, 384, 452, 520, 584, 648, 708, 764, 820, 876, 928, 976, 1024},  //IG_C_CU
             -RVE
 733              {16,   0,  0x80, 0xD4, 0x11C, 0x15D, 0x195, 0x1CD, 0x205, 0x23D, 0x26D, 0x2A1, 0x2DE, 0x312, 0x340, 0x
             -380, 0x3C0, 1024},  //IG_ANIMATION   //test
 734              {16,   0,  0x74, 0xCC, 0x11C, 0x15D, 0x195, 0x1CD, 0x201, 0x235, 0x265, 0x299, 0x2CE, 0x302, 0x33A, 0x
             -372, 0x3B6, 1024},  //IG_DARKROOM
 735              {16,   0,  64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960, 1024},  //IG_DEFA
             -ULT
 736          };
 737          
 738          static code UCHAR DefaultMinIGPoints[] = {
 739              58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58
 740          };
 741          
 742          static code HHBlock HHModes[NUMBER_HH_MODES] = {
 743              {
 744                  24,    //Benq HH Movie 0909 Stanley
 745                  0x00,        
 746                  0x00,0x20,0x10,0x00,
 747                  0x20,0x00,0x00,0x00,
 748                  0x00,0x00,0x00,0x00,
 749                  0x00,0x00,0x00,0x00,
 750                  0x00,0x00,0x00,0x00,
 751                  0x00,0x00,0x00,0x00,
 752              },
 753              {        //Benq HH CAD
 754                  24,
 755                  0x00,
 756                  0x00,0x00,0x00,0x00,
 757                  0x00,0x00,0x00,0x00,
 758                  0x00,0x00,0x00,0x00,
 759                  0x00,0x00,0x00,0x00,
 760                  0x00,0x00,0x00,0x00,
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 14  

 761                  0x00,0x00,0x00,0x00,
 762              },
 763              {        //Benq HH photo 0909 Stanley
 764                  24,
 765                  0x00,
 766                  0x00,0x01,0x10,0x03,
 767                  0x20,0x00,0x00,0x00,
 768                  0x00,0x00,0x00,0x00,
 769                  0x00,0x00,0x00,0x00,
 770                  0x00,0x00,0x00,0x00,
 771                  0x00,0x00,0x00,0x00,
 772              },
 773              {         //Benq HH M-Book
 774                  24,
 775                  0x00,
 776                  0x00,0x05,0x10,0x00,
 777                  0x20,0x00,0x00,0x00,
 778                  0x00,0x00,0x83,0x00,
 779                  0x00,0x00,0x00,0x00,
 780                  0x00,0x00,0x00,0x00,
 781                  0x02,0x02,0x20,0x00,
 782              },
 783              {         //Benq HH PRESENTATION
 784                  24,
 785                  0x00,
 786                  0x00,0x00,0x00,0x00,
 787                  0x04,0x00,0x00,0x00,
 788                  0x00,0x08,0x08,0x00,
 789                  0x00,0x00,0x00,0x00,
 790                  0x00,0x00,0x00,0x10,
 791                  0x27,0x28,0x24,0x00,
 792              },
 793              {
 794                  24,    //Benq HH Animation 
 795                  0x00,        
 796                  0x00,0x00,0x00,0x00,
 797                  0x00,0x00,0x00,0x00,
 798                  0x00,0x00,0x00,0x00,
 799                  0x00,0x00,0x00,0x00,
 800                  0x00,0x00,0x00,0x00,
 801                  0x00,0x00,0x00,0x00,
 802              },
 803          };
 804          
 805          static code HSBlock HSModes[NUMBER_HS_MODES] = {
 806              {
 807                  24,        //Benq HS Movie 0909 Stanley
 808                  0x00,
 809                  0x98,0x88,0x90,0x90,
 810                  0x90,0x80,0x80,0x80,
 811                  0x80,0x80,0x80,0x80,
 812                  0x80,0x80,0x80,0x80,
 813                  0x80,0x80,0x80,0x80,
 814                  0x80,0x80,0x80,0x90,        
 815              },
 816              {
 817                  24,        //Benq HS CAD 20160525
 818                  0x00,
 819                  0x78,0x88,0x90,0x90,
 820                  0x88,0x80,0x80,0x80,
 821                  0x78,0x80,0x80,0x80,
 822                  0x78,0x80,0x80,0x80,
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 15  

 823                  0x80,0x80,0x80,0x80,
 824                  0x80,0x85,0x80,0x80,
 825              },{
 826                  24,        //Benq HS Photo 0909 Stanley
 827                  0x00,
 828                  0x88,0x80,0x90,0x88,
 829                  0x90,0x80,0x80,0x80,
 830                  0x80,0x80,0x80,0x80,
 831                  0x80,0x80,0x80,0x80,
 832                  0x80,0x80,0x80,0x80,
 833                  0x80,0x80,0x80,0x90,
 834              },
 835              {
 836                  24,         //Benq HS M-book
 837                  0x00,
 838                  0x90,0x70,0x80,0x90,
 839                  0x90,0x80,0x80,0x80,
 840                  0x80,0x80,0x80,0x80,
 841                  0x80,0x80,0x80,0x80,
 842                  0x80,0x80,0x80,0x80,
 843                  0x80,0x80,0x70,0x90,
 844              },
 845              {
 846                  24,         //Benq HS PRESENTATION
 847                  0x00,
 848                  0x70,0x78,0x80,0x80,
 849                  0x90,0x90,0x80,0x80,
 850                  0x80,0x90,0x90,0x80,
 851                  0x80,0x80,0x80,0x80,
 852                  0x80,0x80,0x80,0x90,
 853                  0x90,0x88,0x78,0x70,
 854              },
 855              {
 856                  24,        //Benq HS animation 20160525
 857                  0x00,
 858                  0x80,0x78,0x78,0x80,
 859                  0x80,0x80,0x80,0x80,
 860                  0x80,0x80,0x80,0x80,
 861                  0x80,0x80,0x80,0x80,
 862                  0x80,0x80,0x80,0x80,
 863                  0x80,0x80,0x80,0x80,        
 864              },
 865          };
 866          static code CMBlock CMModes[PICTURE_MODE_NUM] = {
 867              {// Benq Standard
 868                  0x80,    //R Offset
 869                  0x80,    //G Offset
 870                  0x80,    //B Offset
 871                  0x80,    //R Gain
 872                  0x80,    //G Gain
 873                  0x80,    //B Gain
 874                  0x80,    // Saturation
 875                  0x80,    // Intensity
 876                  0x80,    // Hue
 877                  0x80,    // BlueMore
 878                  0x80,    // GreenMore
 879                  0x80,    // RedMore
 880                  0x00,    // FTMore
 881                  0x00,    // Sharpness
 882                  0x00,    // Peaking
 883                  0x00,    // TextEn
 884                  BF_COLOR_INIT,
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 16  

 885                  &IGModes[IG_DEFAULT],
 886                  NULLPTR, // HH Table
 887                  NULLPTR, // HS Table
 888                  NULLPTR, // HI Table
 889              },
 890          #if ENABLE_PICTURE_MODE_REC709== ON
 891              {// Benq Rec709
 892                  0x80,    //R Offset
 893                  0x80,    //G Offset
 894                  0x80,    //B Offset
 895                  0x80,    //R Gain
 896                  0x80,    //G Gain
 897                  0x80,    //B Gain
 898                  0x80,    // Saturation
 899                  0x80,    // Intensity
 900                  0x80,    // Hue
 901                  0x80,    // BlueMore
 902                  0x80,    // GreenMore
 903                  0x80,    // RedMore
 904                  0x00,    // FTMore
 905                  0x00,    // Sharpness
 906                  0x00,    // Peaking
 907                  0x00,    // TextEn
 908                  BF_COLOR_INIT,
 909                  &IGModes[IG_DEFAULT],
 910                  NULLPTR, // HH Table
 911                  NULLPTR, // HS Table
 912                  NULLPTR, // HI Table
 913              },
 914          #endif
 915              {// Benq SRGB
 916                  0x80,    //R Offset
 917                  0x80,    //G Offset
 918                  0x80,    //B Offset
 919                  0x80,    //R Gain
 920                  0x80,    //G Gain
 921                  0x80,    //B Gain
 922                  0x80,    // Saturation
 923                  0x80,    // Intensity
 924                  0x80,    // Hue
 925                  0x80,    // BlueMore
 926                  0x80,    // GreenMore
 927                  0x80,    // RedMore
 928                  0x00,    // FTMore
 929                  0x00,    // Sharpness
 930                  0x00,    // Peaking
 931                  0x00,    // TextEn
 932                  BF_COLOR_INIT,
 933                  &IGModes[IG_DEFAULT],
 934                  NULLPTR, // HH Table
 935                  NULLPTR, // HS Table
 936                  NULLPTR, // HI Table
 937              },
 938          #if ENABLE_PICTURE_MODE_CAD == ON
 939          {// Benq CAD
 940                  0x80,    //R Offset
 941                  0x80,    //G Offset
 942                  0x80,    //B Offset
 943                  0x80,    //R Gain
 944                  0x80,    //G Gain
 945                  0x80,    //B Gain
 946              0x90,    // Saturation
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 17  

 947                  0x80,    // Intensity
 948              0x82,    // Hue
 949                  0x80,    // BlueMore
 950                  0x80,    // GreenMore
 951                  0x80,    // RedMore
 952                  0x00,    // FTMore
 953                  0x01,    // Sharpness
 954                  0x01,    // Peaking
 955                  0x00,    // TextEn
 956                  BF_COLOR_INIT,
 957                  &IGModes[IG_CAD],
 958                  &HHModes[HH_MODE_CAD],
 959                  &HSModes[HS_MODE_CAD],
 960                  NULLPTR, // HI Table
 961              },
 962          #endif
 963          #if ENABLE_PICTURE_MODE_ANIMATION == ON
 964          {// Benq Animation
 965                  0x80,    //R Offset
 966                  0x80,    //G Offset
 967                  0x80,    //B Offset
 968                  0x80,    //R Gain
 969                  0x80,    //G Gain
 970                  0x80,    //B Gain
 971              0x90,    // Saturation
 972                  0x80,    // Intensity
 973              0x82,    // Hue
 974                  0x80,    // BlueMore
 975                  0x80,    // GreenMore
 976                  0x80,    // RedMore
 977                  0x00,    // FTMore
 978              0x01,    // Sharpness
 979              0x01,    // Peaking
 980                  0x00,    // TextEn
 981                  BF_COLOR_INIT,
 982                &IGModes[IG_ANIMATION],
 983                  &HHModes[HH_MODE_ANIMATION],
 984                  &HSModes[HS_MODE_ANIMATION],
 985                  NULLPTR, // HI Table
 986              },
 987          #endif
 988          #if ENABLE_PRESENTATION_MODE == ON
              {// Benq Presentation
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x80,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_PRESENTATION],
                      &HHModes[HH_MODE_PRESENTATION],
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 18  

                      &HSModes[HS_MODE_PRESENTATION],
                      NULLPTR, // HI Table
                  },
              #endif    
1013              {// Benq Low Blue Light
1014                  0x80,    //R Offset
1015                  0x80,    //G Offset
1016                  0x80,    //B Offset
1017                  0x80,    //R Gain
1018                  0x80,    //G Gain
1019                  0x80,    //B Gain
1020                  0x98,    // Saturation
1021                  0x80,    // Intensity
1022                  0x82,    // Hue
1023                  0x80,    // BlueMore
1024                  0x80,    // GreenMore
1025                  0x80,    // RedMore
1026                  0x00,    // FTMore
1027                  0x01,    // Sharpness
1028                  0x01,    // Peaking
1029                  0x00,    // TextEn
1030                  BF_COLOR_INIT,
1031                  &IGModes[IG_DEFAULT],
1032                  NULLPTR,
1033                  NULLPTR,
1034                  NULLPTR, // HI Table
1035              },
1036          #if ENABLE_PICTURE_MODE_MOVIE == ON       
1037              {// Benq Movie
1038                  0x80,    //R Offset
1039                  0x80,    //G Offset
1040                  0x80,    //B Offset
1041                  0x80,    //R Gain
1042                  0x80,    //G Gain
1043                  0x80,    //B Gain
1044                  0x90,    // Saturation
1045                  0x80,    // Intensity
1046                  0x82,    // Hue
1047                  0x80,    // BlueMore
1048                  0x80,    // GreenMore
1049                  0x80,    // RedMore
1050                  0x00,    // FTMore
1051                  0x01,    // Sharpness
1052                  0x01,    // Peaking
1053                  0x00,    // TextEn
1054                  BF_COLOR_INIT,
1055                  &IGModes[IG_MOVIE],
1056                  &HHModes[HH_MODE_Movie],
1057                  &HSModes[HS_MODE_Movie],
1058                  NULLPTR, // HI Table
1059                  },
1060          #endif        
1061          #if ENABLE_PICTURE_MODE_GAME == ON            
1062                  {/// Benq Game
1063                  0x80,    //R Offset
1064                  0x80,    //G Offset
1065                  0x80,    //B Offset
1066                  0x80,    //R Gain
1067                  0x80,    //G Gain
1068                  0x80,    //B Gain
1069                  0x82,    // Saturation
1070                  0x80,    // Intensity
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 19  

1071                  0x80,    // Hue
1072                  0x80,    // BlueMore
1073                  0x80,    // GreenMore
1074                  0x80,    // RedMore
1075                  0x00,    // FTMore
1076                  0x00,    // Sharpness
1077                  0x00,    // Peaking
1078                  0x00,    // TextEn
1079                  BF_COLOR_INIT,
1080                  &IGModes[IG_DEFAULT],
1081                  NULLPTR,
1082                  NULLPTR,
1083                  NULLPTR, // HI Table
1084                  },
1085          #endif 
1086          #if ENABLE_PICTURE_MODE_PHOTO== ON       
1087                  {// Benq Photo
1088                  0x80,    //R Offset
1089                  0x80,    //G Offset
1090                  0x80,    //B Offset
1091                  0x80,    //R Gain
1092                  0x80,    //G Gain
1093                  0x80,    //B Gain
1094                  0x82,    // Saturation
1095                  0x80,    // Intensity
1096                  0x80,    // Hue
1097                  0x80,    // BlueMore
1098                  0x80,    // GreenMore
1099                  0x80,    // RedMore
1100                  0x00,    // FTMore
1101                  0x00,    // Sharpness
1102                  0x00,    // Peaking
1103                  0x00,    // TextEn
1104                  BF_COLOR_INIT,
1105                  &IGModes[IG_PHOTO],
1106                  &HHModes[HH_MODE_Photo],
1107                  &HSModes[HS_MODE_Photo],
1108                  NULLPTR, // HI Table
1109              },
1110          #endif  
1111          #if ENABLE_PICTURE_MODE_DARKROOM == ON
1112              {// Benq DarkRoom
1113                  0x80,    //R Offset
1114                  0x80,    //G Offset
1115                  0x80,    //B Offset
1116                  0x80,    //R Gain
1117                  0x80,    //G Gain
1118                  0x80,    //B Gain
1119                  0x80,    // Saturation
1120                  0x80,    // Intensity
1121                  0x80,    // Hue
1122                  0x80,    // BlueMore
1123                  0x80,    // GreenMore
1124                  0x80,    // RedMore
1125                  0x00,    // FTMore
1126                  0x00,    // Sharpness
1127                  0x00,    // Peaking
1128                  0x00,    // TextEn
1129                  BF_COLOR_INIT,
1130                  &IGModes[IG_DARKROOM],
1131                  NULLPTR, // HH Table
1132                  NULLPTR, // HS Table
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 20  

1133                  NULLPTR, // HI Table
1134              },
1135          #endif
1136              {// Benq ECO
1137                  0x80,    //R Offset
1138                  0x80,    //G Offset
1139                  0x80,    //B Offset
1140                  0x80,    //R Gain
1141                  0x80,    //G Gain
1142                  0x80,    //B Gain
1143                  0x80,    // Saturation
1144                  0x80,    // Intensity
1145                  0x80,    // Hue
1146                  0x80,    // BlueMore
1147                  0x80,    // GreenMore
1148                  0x80,    // RedMore
1149                  0x00,    // FTMore
1150                  0x00,    // Sharpness
1151                  0x00,    // Peaking
1152                  0x00,    // TextEn
1153                  BF_COLOR_INIT,
1154                  &IGModes[IG_DEFAULT],
1155                  NULLPTR, // HH Table
1156                  NULLPTR, // HS Table
1157                  NULLPTR, // HI Table        
1158          #if ENABLE_PICTURE_MODE_MBOOK == ON
1159              },
1160              {// Benq M-Book
1161                  0x80,    //R Offset
1162                  0x80,    //G Offset
1163                  0x80,    //B Offset
1164                  0x80,    //R Gain
1165                  0x80,    //G Gain
1166                  0x80,    //B Gain
1167              0x90,    // Saturation
1168                  0x80,    // Intensity
1169              0x82,    // Hue
1170                  0x80,    // BlueMore
1171                  0x80,    // GreenMore
1172                  0x80,    // RedMore
1173                  0x00,    // FTMore
1174              0x01,    // Sharpness
1175              0x01,    // Peaking
1176                  0x00,    // TextEn
1177                  BF_COLOR_INIT,
1178              &IGModes[IG_M_BOOK],
1179              &HHModes[HH_MODE_M_Book],
1180              &HSModes[HS_MODE_M_Book],
1181                  NULLPTR, // HI Table     
1182          #endif  
1183              },
1184              {//OFF
1185                  0x80,    //R Offset
1186                  0x80,    //G Offset
1187                  0x80,    //B Offset
1188                  0x80,    //R Gain
1189                  0x80,    //G Gain
1190                  0x80,    //B Gain
1191                  0x80,    // Saturation
1192                  0x80,    // Intensity
1193                  0x80,    // Hue
1194                  0x80,    // BlueMore
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 21  

1195                  0x80,    // GreenMore
1196                  0x80,    // RedMore
1197                  0x00,    // FTMore
1198                  0x00,    // Sharpness
1199                  0x00,    // Peaking
1200                  0x00,    // TextEn
1201                  BF_COLOR_INIT,
1202                  &IGModes[IG_DEFAULT],
1203                  NULLPTR, // HH Table
1204                  NULLPTR, // HS Table
1205                  NULLPTR, // HI Table
1206              },
1207          };
1208          
1209          static code CTGamma CT5800K[5]={
1210          {
1211            0,  //R_offset
1212            (-5), //G_offset
1213            (-5), //B_offset
1214          },
1215          {
1216            0,  //R_offset
1217            (-3), //G_offset
1218            (-3), //B_offset
1219          },
1220          {
1221            0,  //R_offset
1222            0,  //G_offset
1223            0,  //B_offset
1224          },
1225          {
1226            0,  //R_offset
1227            0,  //G_offset
1228            (2),  //B_offset
1229          },
1230          {
1231            0,  //R_offset
1232            2,  //G_offset
1233            (2),  //B_offset
1234          },
1235          };
1236          
1237          static code CTGamma CT9300K[5]={
1238          {
1239            (-9),//(-15), //R_offset
1240            (-7),//(-12), //G_offset
1241            0,  //B_offset
1242          },
1243          {
1244            (-3),//(-8),  //R_offset
1245            (-4),//(-8),  //G_offset
1246            0,  //B_offset
1247          },
1248          {
1249            0,  //R_offset
1250            0,  //G_offset
1251            0,  //B_offset
1252          },
1253          {
1254            4,  //R_offset
1255            2,  //G_offset
1256            0,  //B_offset
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 22  

1257          },
1258          {
1259            (-12),//6,  //R_offset
1260            4,  //G_offset
1261            0,  //B_offset
1262          },
1263          
1264          };
1265          
1266          static code CTGamma CT6500K[5]={
1267          {
1268            0,  //R_offset
1269            (-4), //G_offset
1270            (-3), //B_offset
1271          },
1272          {
1273            0,  //R_offset
1274            (-4), //G_offset
1275            (-3), //B_offset
1276          },
1277          {
1278            0,  //R_offset
1279            0,  //G_offset
1280            0,  //B_offset
1281          },
1282          {
1283            0,  //R_offset
1284            0,  //G_offset
1285            0,  //B_offset
1286          },
1287          {
1288            0,  //R_offset
1289            0,  //G_offset
1290            0,  //B_offset
1291          },
1292          };
1293          #else 
              static code IGBlock IGModes[NUMBER_IG_MODES] = {
              #if defined(AUO_M270DAN02_0)
                  {16,   0,  84, 140, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960,1024}, //IG_MOVIE
                  {16,   0,  76, 136, 200, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960,1024}, //IG_PHOTO
                  {16,   0,  72, 136, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960,1024}, //IG_GAME
              #elif defined(AUO_M270DAN02_00B)
                      {16,   0,  84, 140, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960,1024}, //IG_MO
             -VIE
                      {16,   0,  96, 176, 251, 312, 361, 413, 461, 512, 576, 640, 704, 768, 832, 896, 960, 1024}, //IG_P
             -HOTO
                      {16,   0,  80, 152, 216, 272, 332, 389, 448, 512, 576, 640, 704, 768, 832, 896, 960, 1024}, //IG_G
             -AME
              #elif defined(AUO_M270DAN01_0)
                  {16,   28,  108, 152, 212, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960,1024}, //IG_MOVI
             -E
                  {16,   0,  116, 152, 220, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960,1024}, //IG_PHOTO
                  {16,   0,  58, 116, 168, 228, 288, 356, 428, 504, 584, 660, 732, 800, 860, 920, 972,1024}, //IG_GAME
              #else 
                  {16,   28,  108, 152, 212, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960,1024}, //IG_MOVI
             -E
                  {16,   0,  116, 152, 220, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960,1024}, //IG_PHOTO
                  {16,   0,  58, 116, 168, 228, 288, 356, 428, 504, 584, 660, 732, 800, 860, 920, 972,1024}, //IG_GAME
              #endif
                  {16,   0,  58, 128, 216, 288, 352, 412, 468, 520, 568, 620, 676, 736, 800, 872, 964,1024}, //IG_RS_CUR
             -VE
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 23  

                  {16,   0,  48, 100, 152, 204, 260, 320, 380, 440, 504, 572, 640, 712, 784, 864, 964,1024}, //IG_RC_CUR
             -VE
                  {16,   0,  84, 164, 240, 312, 384, 452, 520, 584, 648, 708, 764, 820, 876, 928, 976,1024}, //IG_C_CURV
             -E
                  {16,   0,  64, 116, 184, 252, 332, 408, 472, 552, 620, 676, 732, 800, 860, 920, 972,1024}, //IG_ANIMAT
             -ION
                  {16,   0,  48, 108, 164, 228, 276, 340, 408, 488, 540, 596, 664, 736, 804, 876, 948,1024}, //IG_NVT_CU
             -RVE_2
                  {16,   0,  64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960,1024}, //IG_DEFAUL
             -T
              };
              
              static code UCHAR DefaultMinIGPoints[] = {
                  58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58
              };
              
              static code HHBlock HHModes[NUMBER_HH_MODES] = {
              #if defined(AUO_M270DAN02_0) //color tune 1107
                  {
                      24,    //Benq HH Movie
                      0x00,        
                      0xE8,0x08,0x28,0x0C,
                      0xE0,0xA8,0xA8,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x10,
                      0x08,0x10,0xFF,0xE8,
                  },
                  {        //Benq HH Game
                      24,
                      0x00,
                      0x18,0x10,0x20,0x08,
                      0x08,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x08,0x08,0x00,
                      0x00,0x00,0x00,0x00,
                  },
                  {        //Benq HH photo
                      24,
                      0x00,
                      0x00,0x10,0x18,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x10,0x08,
                      0x00,0x00,0x00,0x00,
                  },
              #elif defined(AUO_M270DAN02_00B) 
                  {
                      24,    //Benq HH Movie
                      0x00,        
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0xF0,0xF5,
                      0xF5,0xF8,0xFE,0xFE,
                      0xFE,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                  },
                  {        //Benq HH Game
                      24,
                      0x00,
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 24  

                      0x00,0x10,0x08,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0xF0,0xF0,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x10,0x10,
              
                  },
                  {        //Benq HH photo
                      24,
                      0x00,
                      0x00,0x10,0x18,0xF5,
                      0x00,0xF0,0xF0,0xF0,
                      0x00,0x00,0x00,0x00,
                      0xF5,0x00,0x00,0x00,
                      0x00,0x00,0x10,0x08,
                      0x00,0x00,0x15,0x00,
                  },    
              #elif defined(AUO_M270DAN01_0)    
                  {
                      24,    //Benq HH Movie
                      0x00,        
                      0x00,0x00,0x17,0xF0,
                      0x32,0x20,0x00,0x30,
                      0x00,0xD0,0x9A,0x95,
                      0xAD,0xCC,0x17,0x02,
                      0x0F,0x00,0x00,0x00,
                      0x02,0x10,0x47,0x08,
                  },{        //Benq HH Game
                      24,
                      0x00,
                      0x29,0x1B,0x1F,0x16,
                      0x55,0x9D,0xD3,0xBB,
                      0x50,0x11,0xAF,0xEF,
                      0xE3,0xBF,0xFF,0xF0,
                      0x3C,0x00,0x00,0x00,
                      0xBF,0xD7,0x00,0xD0,
                  },{        //Benq HH photo
                      24,
                      0x00,
                      0x00,0x00,0x00,0xF2,
                      0x30,0x00,0x05,0x00,
                      0x00,0xF2,0xF1,0xF8,
                      0x80,0xD0,0xFF,0xE7,
                      0x00,0x00,0x00,0x00,
                      0xBF,0x00,0x00,0xFF,        
                  },
              #else   
                  {
                      24,    //Benq HH Movie
                      0x00,        
                      0x00,0x00,0x17,0xF0,
                      0x32,0x20,0x00,0x30,
                      0x00,0xD0,0x9A,0x95,
                      0xAD,0xCC,0x17,0x02,
                      0x0F,0x00,0x00,0x00,
                      0x02,0x10,0x47,0x08,
                  },{        //Benq HH Game
                      24,
                      0x00,
                      0x29,0x1B,0x1F,0x16,
                      0x55,0x9D,0xD3,0xBB,
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 25  

                      0x50,0x11,0xAF,0xEF,
                      0xE3,0xBF,0xFF,0xF0,
                      0x3C,0x00,0x00,0x00,
                      0xBF,0xD7,0x00,0xD0,
                  },{        //Benq HH photo
                      24,
                      0x00,
                      0x00,0x00,0x00,0xF2,
                      0x30,0x00,0x05,0x00,
                      0x00,0xF2,0xF1,0xF8,
                      0x80,0xD0,0xFF,0xE7,
                      0x00,0x00,0x00,0x00,
                      0xBF,0x00,0x00,0xFF,        
                  },
              #endif    
                  {         //Benq HH M-Book
                      24,
                      0x00,
                      0x00,0x04,0x02,0x04,
                      0x18,0x20,0x83,0x04,
                      0x08,0x04,0x00,0x00,
                      0x00,0x08,0x10,0x08,
                      0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x10,
                  },
              };
              
              static code HSBlock HSModes[NUMBER_HS_MODES] = {
              #if defined(AUO_M270DAN02_0) //color tune 1107
                  {
                      24,        //Benq HS Movie
                      0x00,
                      0x84,0x70,0x78,0x80,
                      0x90,0x80,0x80,0x80,
                      0x78,0x78,0x78,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                  },{
                      24,        //Benq HS Game
                      0x00,
                      0x94,0x90,0x90,0x88,
                      0x88,0x80,0x80,0x80,
                      0x80,0x88,0x88,0x88,
                      0x80,0x80,0x88,0x80,
                      0x80,0x88,0x88,0x80,
                      0x80,0x80,0x88,0x88,
                  },{
                      24,        //Benq HS Photo
                      0x00,
                      0x84,0x88,0x88,0x88,
                      0x88,0x80,0x80,0x80,
                      0x80,0x84,0x84,0x84,
                      0x80,0x80,0x84,0x80,
                      0x80,0x88,0x88,0x80,
                      0x80,0x80,0x80,0x80,
                  },
              #elif defined(AUO_M270DAN02_00B) //color tune 1107
              {
                  24,        //Benq HS Movie
                  0x00,
                  0x70,0x70,0x70,0x70,
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 26  

                  0x70,0x75,0x75,0x75,
                  0x75,0x75,0x75,0x80,
                  0x80,0x80,0x80,0x80,
                  0x80,0x80,0x80,0x80,
                  0x70,0x70,0x70,0x70,
              },{
                  24,        //Benq HS Game
                  0x00,
                  0x78,0x78,0x70,0x75,
                  0x80,0x80,0x78,0x78,
                  0x78,0x75,0x70,0x80,
                  0x80,0x80,0x75,0x80,
                  0x80,0x88,0x88,0x80,
                  0x80,0x78,0x83,0x80,
              
                  
              },{
                  24,        //Benq HS Photo
                  0x00,
                  0x78,0x75,0x75,0x76,
                  0x80,0x75,0x80,0x80,
                  0x78,0x78,0x80,0x80,
                  0x70,0x80,0x80,0x80,
                  0x80,0x80,0x80,0x80,
                  0x80,0x80,0x80,0x80,
              },
              #elif defined(AUO_M270DAN01_0)    
                  {
                      24,        //Benq HS Movie
                      0x00,
                      0x80,0x80,0x80,0x80,
                      0x80,0x60,0x70,0x90,
                      0x70,0x70,0x80,0x80,
                      0x80,0x90,0xA0,0x80,
                      0x80,0x80,0x80,0x80,
                      0xA0,0xA0,0xA0,0xA0,    
                  },{
                      24,        //Benq HS Game
                      0x00,
                      0xC0,0xB0,0x80,0xA0,
                      0x80,0x80,0x80,0x80,
                      0xB0,0xB0,0xB0,0xB0,
                      0xB0,0xA0,0xA0,0xB0,
                      0xA0,0x80,0x80,0x80,
                      0x80,0x80,0x70,0xA0,
                  },{
                      24,        //Benq HS Photo
                      0x00,
                      0x90,0xA0,0x80,0x90,
                      0x80,0x90,0xA0,0x8A,
                      0x80,0x80,0x80,0x80,
                      0x80,0x90,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0xA0,0x90,0x80,
                  },
              #else    
                  {
                      24,        //Benq HS Movie
                      0x00,
                      0x80,0x80,0x80,0x80,
                      0x80,0x60,0x70,0x90,
                      0x70,0x70,0x80,0x80,
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 27  

                      0x80,0x90,0xA0,0x80,
                      0x80,0x80,0x80,0x80,
                      0xA0,0xA0,0xA0,0xA0,    
                  },{
                      24,        //Benq HS Game
                      0x00,
                      0xC0,0xB0,0x80,0xA0,
                      0x80,0x80,0x80,0x80,
                      0xB0,0xB0,0xB0,0xB0,
                      0xB0,0xA0,0xA0,0xB0,
                      0xA0,0x80,0x80,0x80,
                      0x80,0x80,0x70,0xA0,
                  },{
                      24,        //Benq HS Photo
                      0x00,
                      0x90,0xA0,0x80,0x90,
                      0x80,0x90,0xA0,0x8A,
                      0x80,0x80,0x80,0x80,
                      0x80,0x90,0x80,0x80,
                      0x80,0x80,0x80,0x80,
                      0x80,0xA0,0x90,0x80,
                  },
              #endif    
                  {
                      24,         //Benq HS M-book
                      0x00,
                      0x8e,0x90,0x70,0xA0,
                      0xa8,0xa8,0x98,0x88,
                      0x90,0x88,0x80,0x80,
                      0x80,0x90,0xa0,0x90,
                      0x80,0x80,0x80,0x80,
                      0x80,0x80,0x80,0x90,
                  },
              };
              
              static code CMBlock CMModes[PICTURE_MODE_NUM] = {
                 {// Benq Standard
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x80,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_DEFAULT],
                      NULLPTR, // HH Table
                      NULLPTR, // HS Table
                      NULLPTR, // HI Table
                  },{// Benq Low Blue Light
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 28  

                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x98,    // Saturation
                      0x80,    // Intensity
                      0x82,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x01,    // Sharpness
                      0x01,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_DEFAULT],
                      NULLPTR,
                      NULLPTR,
                      NULLPTR, // HI Table
                  },{// Benq Movie
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x90,    // Saturation
                      0x80,    // Intensity
                      0x82,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x01,    // Sharpness
                      0x01,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_MOVIE],
                      &HHModes[HH_MODE_1],
                      &HSModes[HS_MODE_1],
                      NULLPTR, // HI Table
                  },{/// Benq Game
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x82,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
              #if defined(AUO_M270DAN02_0) //color tune 1107
                      &IGModes[IG_GAME],
              #elif defined(AUO_M270DAN02_00B)
                      &IGModes[IG_GAME],        
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 29  

              #else        
                      &IGModes[IG_DEFAULT],
              #endif        
                      &HHModes[HH_MODE_2],
                      &HSModes[HS_MODE_2],
                      NULLPTR, // HI Table
                  },{// Benq Photo
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x82,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_PHOTO],
                      &HHModes[HH_MODE_3],
                      &HSModes[HS_MODE_3],
                      NULLPTR, // HI Table
                  },
                  {// Benq SRGB
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x80,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_DEFAULT],
                      NULLPTR, // HH Table
                      NULLPTR, // HS Table
                      NULLPTR, // HI Table
                  },{// Benq ECO
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x80,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 30  

                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_DEFAULT],
                      NULLPTR, // HH Table
                      NULLPTR, // HS Table
                      NULLPTR, // HI Table        
              #if ENABLE_PICTURE_MODE_MBOOK == ON
                  },{// Benq M-Book
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x80,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_DEFAULT],
                      &HHModes[HH_MODE_4],
                      &HSModes[HS_MODE_4],
                      NULLPTR, // HI Table     
              #endif  
                  },{//OFF
                      0x80,    //R Offset
                      0x80,    //G Offset
                      0x80,    //B Offset
                      0x80,    //R Gain
                      0x80,    //G Gain
                      0x80,    //B Gain
                      0x80,    // Saturation
                      0x80,    // Intensity
                      0x80,    // Hue
                      0x80,    // BlueMore
                      0x80,    // GreenMore
                      0x80,    // RedMore
                      0x00,    // FTMore
                      0x00,    // Sharpness
                      0x00,    // Peaking
                      0x00,    // TextEn
                      BF_COLOR_INIT,
                      &IGModes[IG_DEFAULT],
                      NULLPTR, // HH Table
                      NULLPTR, // HS Table
                      NULLPTR, // HI Table
                  },
              };
              static code CTGamma CT5800K[5]={
              {
                0,  //R_offset
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 31  

                0,  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              };
              
              static code CTGamma CT9300K[5]={
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              };
              static code CTGamma CT6500K[5]={
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 32  

              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              {
                0,  //R_offset
                0,  //G_offset
                0,  //B_offset
              },
              };
              #endif
1884          
1885          //=== AOC ===
1886          #define ACE_PARTITIONS 16 // 4,8,16
1887          #define BF_DYNAMIC_ARRAY
1888          #define BF_SMOOTH_AUTOACE
1889          #define BF_DYNAMIC_ACC_TIME     5
1890          
1891          static code long float BF_H[7]={0.125,0.21,0.25,0.333,0.5,0.5,1};
1892          static code long float BF_V[7]={0.125,0.21,0.25,0.333,0.5,1,1};
1893          static code UCHAR BrightnessTab[]={ 90,20,40,60,80,100};
1894          static code UCHAR ContrastTab[]=  { 50,50,50,50,50,50};
1895          static xdata USHRT usBFWindowWidth = PANEL_WIDTH;
1896          static xdata USHRT usBFWindowHeight= PANEL_HEIGHT;
1897          static xdata USHRT usBFWindowBegin = 0;
1898          
1899          //static xdata UCHAR ucAOC_ColorConfig_Byte;
1900          extern xdata ULONG ulCurHisgrmTotal;
1901          extern xdata USHRT usCurHisgrm[BF_IG_PARTITIONS];
1902          BOOL Standard_Gamma = 0;
1903          //******************************************************************************
1904          // Prototype: 
1905          //  void InitColor(void)
1906          // Parameters:
1907          //  None
1908          // Return:
1909          //  None
1910          // Purpose:
1911          //  Color setting initialization.
1912          // Notes:
1913          //  None
1914          //******************************************************************************
1915          void InitColor(void)
1916          {
1917   1          #if ENABLE_CM2 == ON
1918   1              BFAPI_Init(BF_TWO_GEN);
1919   1          #else
                      BFAPI_Init(BF_ONE_GEN);
                  #endif
1922   1              BFAPI_SetActiveWindow(BF_WINDOW_1);
1923   1      
1924   1      #ifdef NVT_72314_3840X2160_FP//using sRGB 1:1 BF2 to cover Y issue 
                 // BFAPI_SetActiveWindow(BF_WINDOW_2);
                  //BFAPI_SetWindowSize(BF_WINDOW_FULLSCREEN);
                 // BFAPI_EnableWindow(BF_WINDOW_2);    
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 33  

                 // MTXAPI_SelMatrix(MTX_LOCAL);
                 // MTXAPI_EnableLocalMatrix(TRUE);
                 // MTXAPI_SetRGBGain(128,128,128);      
              
              #endif
1933   1              // Always access global 3x3 matrix when adjust contrast and colortemp.
1934   1              // P.S. MTXAPI_EnableLocalMatrix must be after BFAPI_Init.
1935   1              MTXAPI_SelMatrix(MTX_GLOBAL);
1936   1          //MTXAPI_EnableLocalMatrix(FALSE);
1937   1      }
1938              
1939          //******************************************************************************
1940          // Prototype: 
1941          //  void SetThemeMode(UCHAR mode)
1942          // Parameters:
1943          //  None
1944          // Return:
1945          //  None
1946          // Purpose:
1947          //  Set Color Theme
1948          // Notes:
1949          //  None
1950          //******************************************************************************
1951          void SetThemeMode(UCHAR mode)
1952          {
1953   1          //UCHAR tmp = GetSPIIndex();
1954   1      #if ENABLE_PICTURE_DUAL_MODE == ON
1955   1        if(Custom_System.bDualviewAdjust == TRUE){
1956   2              BFAPI_SetActiveWindow(BF_WINDOW_2);    
1957   2          }
1958   1          else
1959   1      #endif
1960   1          {
1961   2              BFAPI_SetActiveWindow(BF_WINDOW_1);    
1962   2          }
1963   1          BFAPI_EnableCM(CM_ALL);
1964   1          BFAPI_SetROffset(CMModes[mode].ROffset);
1965   1          BFAPI_SetGOffset(CMModes[mode].GOffset);
1966   1          BFAPI_SetBOffset(CMModes[mode].BOffset);
1967   1          BFAPI_SetRGain(CMModes[mode].RGain);
1968   1          BFAPI_SetGGain(CMModes[mode].GGain);
1969   1          BFAPI_SetBGain(CMModes[mode].BGain);
1970   1          if(mode == PICTURE_MODE_USER){
1971   2              UserSetSaturation();
1972   2              UserSetHue();    
1973   2          }
1974   1          else{
1975   2              BFAPI_SetHue(CMModes[mode].Hue);
1976   2              BFAPI_SetSaturation(CMModes[mode].Saturation);
1977   2          }
1978   1          BFAPI_SetIntensity(CMModes[mode].Intensity);
1979   1          BFAPI_CorrectFleshTone(CMModes[mode].FTMore);
1980   1          BFAPI_EnhanceRed(CMModes[mode].RedMore);
1981   1          BFAPI_EnhanceGreen(CMModes[mode].GreenMore);
1982   1          BFAPI_EnhanceBlue(CMModes[mode].BlueMore);
1983   1          //UserSetSharpness();//BFAPI_SetSharpness(CMModes[mode].Sharpness);
1984   1          BFAPI_SetYPeaking(CMModes[mode].Peaking);
1985   1          BFAPI_SetTextEnhancement(CMModes[mode].TextEn);
1986   1          BFAPI_ColorEnhance(CMModes[mode].ClrMode);
1987   1          if (!UserData.bDCRMode) {
1988   2              BFAPI_SetPreACEMode(CMModes[mode].pIG);
1989   2          }
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 34  

1990   1          BFAPI_SetHHTable(CMModes[mode].pHH);
1991   1          BFAPI_SetHSTable(CMModes[mode].pHS);
1992   1          BFAPI_SetHITable(CMModes[mode].pHI);
1993   1          
1994   1          //SelectSPIIndex(_All);
1995   1          SetDemo();    //Set Window Size
1996   1      #if ENABLE_PICTURE_DUAL_MODE == ON
1997   1        if(Custom_System.bDualviewAdjust == TRUE){
1998   2              BFAPI_EnableWindow(BF_WINDOW_2);    
1999   2          }
2000   1          else
2001   1      #endif
2002   1          {
2003   2              BFAPI_EnableWindow(BF_WINDOW_1);    
2004   2          }
2005   1          //SelectSPIIndex(tmp);     
2006   1      }
2007          
2008          #ifdef DBC_ULTRA_LOW
2009          //******************************************************************************
2010          // Prototype: 
2011          //  static BOOL IsBlankVideo(void)
2012          // Parameters:
2013          //  None
2014          // Return:
2015          //  Return TRUE/FALSE
2016          // Purpose:
2017          //  Check the current input video is blank or not.
2018          // Notes:
2019          //  None
2020          //******************************************************************************
2021          static BOOL IsBlankVideo(void)
2022          {
2023   1      #if ((ENABLE_HDMI == ON) || (INPUT_INTERFACE&INPUT_DP) || (INPUT_INTERFACE&INPUT_DP1))
2024   1      #define Y_Sample_Cnt 4
2025   1      #define BLACK_PATTERN_THD 26//10
2026   1      #define BLACK_PATTERN_MAXTHD 26//16
2027   1      
2028   1          static BOOL blank_flag = FALSE;
2029   1          UCHAR Yavg, Ymax;
2030   1      
2031   1          if ((SC_DBC_CTRL&BIT0) == 0x00)  {
2032   2              SC_DBC_CTRL |= BIT0;
2033   2              SC_DBC_CTRL &= ~BIT1;
2034   2          }
2035   1      
2036   1          Yavg = SC_DBC_AVG_Y;
2037   1          Ymax = SC_EFFECTIVE_COLOR_VALUE;
2038   1          
2039   1        //  printf("Yavg Ymax=%d,%d\r\n",(USHRT)Yavg,(USHRT)Ymax);
2040   1          if (Yavg < BLACK_PATTERN_THD && Ymax < BLACK_PATTERN_MAXTHD) {
2041   2              blank_flag = TRUE;
2042   2          }
2043   1          else {
2044   2              blank_flag = FALSE;
2045   2          }
2046   1      /*
2047   1          WaitDisVSync();
2048   1          SC_BYPASS_CTRL |= BIT2;
2049   1          Sleep(25);
2050   1          SC_DBC_CTRL = tmpreg;
2051   1          Sleep(25);
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 35  

2052   1          WaitDisVSync();
2053   1          SC_BYPASS_CTRL &= ~BIT2;
2054   1      */
2055   1          return blank_flag;
2056   1      #else
                  static BOOL blank_flag = FALSE;
                  UCHAR rcode, gcode, bcode;
              
                  if (DCR_IsReadyToGetMax()) {
                      rcode = DCR_GetRMax();
                      gcode = DCR_GetGMax();
                      bcode = DCR_GetBMax(); 
              
                      if ((rcode < DBC_LTHD_BLANK) && (gcode < DBC_LTHD_BLANK) && (bcode < DBC_LTHD_BLANK)) {
                          blank_flag = TRUE;
                      }
                      else if ((rcode > DBC_HTHD_BLANK) || (gcode > DBC_HTHD_BLANK) || (bcode > DBC_HTHD_BLANK)) {
                          blank_flag = FALSE;
                      }
                  }
              
                  return blank_flag;
              #endif    
2075   1      }
2076          
2077          #if 0
              //******************************************************************************
              // Prototype:
              //  static void PerformDBC(void)
              // Parameters:
              //  None
              // Return:
              //  None
              // Purpose:
              //  Periodic DBC routine
              // Notes:
              //  None
              //******************************************************************************
              static void PerformDBC(void)
              {
                  static BOOL is_spr_dcr = FALSE;
                  static xdata USHRT local_timer = 0;
              
                  if (!IsBlankVideo()) {
                      local_timer = GetTimerTick();
              
                      if (is_spr_dcr) {
                          is_spr_dcr = FALSE;
                          DCR_ResetDymBacklight(0);
                      }
                  }
                  else {
                      if ((GetTimerTick() - local_timer) > DBC_TIME_TO_OFF) {
                          local_timer = GetTimerTick();
                          if (is_spr_dcr == FALSE) {
                              is_spr_dcr = TRUE;
                              SetBrightness(DBC_BACKLIGHT_OFF);
                          }
                      }
                  }
              
                  if (is_spr_dcr == FALSE) {
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 36  

                      DCR_SetDymBacklight();
                  }
              }
              #endif
2118          #endif
2119          //******************************************************************************
2120          // Prototype:
2121          //  void PerformDCR(UCHAR reset)
2122          // Parameters:
2123          //  None
2124          // Return:
2125          //  None
2126          // Purpose:
2127          //  Periodic DCR routine
2128          // Notes:
2129          //  None
2130          //******************************************************************************
2131          #if 0//BF_DYNAMIC_BACKLIGHT==1
                     #define DCR_OFFBKL              ON 
                      #define DCR_Black_Degree_1 11//10  // Totaol Histogram - Histogram[0]
                  #define DCR_Black_Degree_2 400//10  // Totaol Histogram - Histogram[0]
                  #define DCR_White_Level_1  15// 1   // the biggest white level 0~255 in a frame
                  #define DCR_White_Level_2 18     // 5 // the biggest white level 0~255 in a frame
                  #define MX_DCR_Transit_Speed 1
                  
                  USHRT usDCRStableCount = 0;
                  USHRT usDCRStableCount2 = 0;
                  static UCHAR ucNewDynBk = 0;//ucNewDynBk : new brightness value on OSD
                  //iCurDynBk : current brightness value on OSD
                  void BF_SetDymBacklight(void);
              #endif
2145          #if 0
              void PerformDCR(UCHAR reset)
              {
                  if (reset) {
                      DCR_SetDynACEType(ACE_SMOOTH);
                      DCR_SetDynACEPnts(DefaultMinIGPoints);//v31_110803_0930_SYS#1
                  }
              
                  if (UserData.bDCRMode) {
                      DCR_UpdateHistogram(reset);
                      
              #if BF_DYNAMIC_BACKLIGHT == 0
                      DCR_SetDymACE(reset);
                      if (reset) {
                          DCR_ResetDymBacklight(GetBrightness1023());
                      }
                      else {
                         DCR_SetDymBacklight();
                      }
              #else
                      if (reset) {
                 #if NT72314_RST_PORT ==  MCU_PORT_NULL       
                          SC_DBC_CTRL = 0x01;
                 #endif
                          DCR_ResetDymBacklight(GetBrightness1023());
                      }
                      else {
                      #ifdef DBC_ULTRA_LOW
                          PerformDBC();
                      #else
                          //DCR_GetHistogram();
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 37  

                          BF_SetDymBacklight();
                      #endif
                      }
              #endif
                      }
                 if (AOC_ColorBoostBuffer.bTempAutoDetect) {
                          BF_SetDymACEMode(0);
                  }
                  
              }
              #endif
2187          //******************************************************************************
2188          // Prototype:
2189          //  void DCR_BenQ_SetDymBacklight(UCHAR reset)
2190          // Parameters:
2191          //  None
2192          // Return:
2193          //  None
2194          // Purpose:
2195          //  Periodic DCR routine
2196          // Notes:
2197          //  None
2198          //******************************************************************************
2199          #define DCR_BenQ_BKSTEP 4 //2010-12-21, 
2200          #define DBC_MAX_BACKLIGHT 1023
2201          #if ENABLE_BENQ_DCR
2202          #define DBC_MIN_BACKLIGHT 550//200
2203          #else
              #define DBC_MIN_BACKLIGHT 500
              #endif
2206          #if defined(AUO_M240HW02_V1)
              #define DCR_LEVEL_1 DBC_MAX_BACKLIGHT*0.04//0.205
              #define DCR_LEVEL_2 DBC_MAX_BACKLIGHT*0.02//0.179
              #define DCR_LEVEL_3 DBC_MAX_BACKLIGHT*0.01//0.150//0.154
              #define DCR_LEVEL_4 DBC_MAX_BACKLIGHT*0.005//0.123//0.128 
              #define DCR_LEVEL_5 DBC_MAX_BACKLIGHT*0.005//0.082//0.107
              #else //if defined(AUO_M270HW02_V0) 
2213          #define DCR_LEVEL_1 DBC_MAX_BACKLIGHT*0.04
2214          #define DCR_LEVEL_2 DBC_MAX_BACKLIGHT*0.03
2215          #define DCR_LEVEL_3 DBC_MAX_BACKLIGHT*0.02
2216          #define DCR_LEVEL_4 DBC_MAX_BACKLIGHT*0.01
2217          #define DCR_LEVEL_5 DBC_MAX_BACKLIGHT*0.01
2218          #endif
2219          
2220          //static xdata DBCType ucDBCMode = DBC_MODE3;
2221          static xdata USHRT usTargetBacklight = DBC_MAX_BACKLIGHT;
2222          static xdata USHRT usCurrentBacklight;
2223          static BOOL bSuperDCR = FALSE;
2224          static xdata USHRT usSuperDCRTimer = 0;
2225          static BOOL bForceSetBK = FALSE;
2226          static BOOL bInitDCR = FALSE;
2227          
2228          #if ENABLE_BENQ_DCR
2229          static xdata USHRT usDBCMinBackLight = DBC_MIN_BACKLIGHT;
2230          #endif
2231          void DCR_BenQ_Reset(void)
2232          {
2233   1      
2234   1          usTargetBacklight = DBC_MAX_BACKLIGHT;
2235   1          usCurrentBacklight = GetBrightness1023();
2236   1      }
2237          void DCR_BenQ_SetDymBacklight(void)
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 38  

2238          {
2239   1          USHRT tmp;
2240   1          static UCHAR ucUpdateBK = 0;
2241   1          if (ulCurHisgrmTotal == 0)
2242   1              return;
2243   1          
2244   1      #if ENABLE_BENQ_DCR
2245   1          usDBCMinBackLight = DBC_MIN_BACKLIGHT - ((USHRT)UserData.ucDynamicContrast) * 100; 
2246   1          if (IsHDMI())
2247   1              tmp = (ulCurHisgrmTotal-(usCurHisgrm[0]+usCurHisgrm[1]))*(DBC_MAX_BACKLIGHT-usDBCMinBackLight)/ulC
             -urHisgrmTotal+usDBCMinBackLight;
2248   1          else
2249   1              tmp = (ulCurHisgrmTotal-usCurHisgrm[0])*(DBC_MAX_BACKLIGHT-usDBCMinBackLight)/ulCurHisgrmTotal+usD
             -BCMinBackLight;
2250   1      
2251   1          if (tmp != usTargetBacklight) {
2252   2              usTargetBacklight = tmp;
2253   2              if (usTargetBacklight < usDBCMinBackLight)
2254   2                  usTargetBacklight = usDBCMinBackLight;
2255   2              else if (usTargetBacklight > DBC_MAX_BACKLIGHT)
2256   2                  usTargetBacklight = DBC_MAX_BACKLIGHT;
2257   2          }
2258   1      
2259   1      #if DCR_SMOOTH_PWM==ON
2260   1          if ((IsBlankVideo() == TRUE) && (usTargetBacklight == usDBCMinBackLight) && (usCurrentBacklight == usD
             -BCMinBackLight)) { //Harry-2010-04-01: For Supper DCR
2261   2      #else
                  if ((IsBlankVideo() == TRUE) && (OSDAPI_IsOSDOn() == FALSE) && (usTargetBacklight == usDBCMinBackLight
             -) && (usCurrentBacklight == usDBCMinBackLight)) { //Harry-2010-04-01: For Supper DCR
              #endif
2264   2      
2265   2      #else /*24" panel */
                  tmp = (ulCurHisgrmTotal-usCurHisgrm[0])*
                        (DBC_MAX_BACKLIGHT-DBC_MIN_BACKLIGHT)/
                        ulCurHisgrmTotal+DBC_MIN_BACKLIGHT;
              
                  if (tmp != usTargetBacklight) {
                      usTargetBacklight = tmp;
                      if (usTargetBacklight < DBC_MIN_BACKLIGHT)
                          usTargetBacklight = DBC_MIN_BACKLIGHT;
                      else if (usTargetBacklight > DBC_MAX_BACKLIGHT)
                          usTargetBacklight = DBC_MAX_BACKLIGHT;
                  }
              #if DCR_SMOOTH_PWM==ON 
                  if ((IsBlankVideo() == TRUE) && (usTargetBacklight == DBC_MIN_BACKLIGHT) && (usCurrentBacklight == DBC
             -_MIN_BACKLIGHT)) { //Harry-2010-04-01: For Supper DCR
              #else
                  if ((IsBlankVideo() == TRUE) && (OSDAPI_IsOSDOn() == FALSE) && (usTargetBacklight == DBC_MIN_BACKLIGHT
             -) && (usCurrentBacklight == DBC_MIN_BACKLIGHT)) { //Harry-2010-04-01: For Supper DCR
              #endif
              
              #endif /*panel size */
2284   2              if (((GetTimerTick() - usSuperDCRTimer) > 3000) && (OSDAPI_IsOSDOn() == FALSE)) { //Harry-2010-04-
             -04: Wait 3 Secs then enter Supper DCR
2285   3                  if (bSuperDCR == FALSE) {
2286   4                      bSuperDCR = TRUE;
2287   4                      bForceSetBK = TRUE;
2288   4                  }
2289   3              }
2290   2      #if DCR_SMOOTH_PWM==ON
2291   2              if ((OSDAPI_IsOSDOn() == TRUE) && (IsBackLightOn() == FALSE)) { //when super dcr 5, and user call 
             -OSD On
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 39  

2292   3                  BacklightOn();
2293   3                  usTargetBacklight = DBC_MAX_BACKLIGHT;
2294   3              }
2295   2      #endif
2296   2          }
2297   1          else {
2298   2              usSuperDCRTimer = GetTimerTick();
2299   2              if (bSuperDCR == TRUE) {
2300   3                  BacklightOn(); //Harry-2010-08-20: Whatever LED or Non-LED Panel We always use black light off
             - to do SuperDCR, Recover from SuperDCR, must use BacklightOn();
2301   3                  bSuperDCR = FALSE;
2302   3                  bForceSetBK = TRUE;
2303   3              }
2304   2          }
2305   1      
2306   1          //Harry-2010-04-08: Add "&& (bForceSetBK == FALSE)" for little change pattern into ALL BLACK still can
             - enter SuperDCR
2307   1          //Harry-2010-07-01: Add "&& (usTargetBacklight != usDBCMinBackLight)" for Enter SuperDCR do not be blo
             -cked here.
2308   1      
2309   1      #if ENABLE_BENQ_DCR
2310   1          if ( (abs(usCurrentBacklight - usTargetBacklight) < 100) && (ucUpdateBK == 0) && (bForceSetBK == FALSE
             -) && (usTargetBacklight != usDBCMinBackLight) ) {
2311   2              return;
2312   2          }
2313   1      #else
                  if ( (abs(usCurrentBacklight - usTargetBacklight) < 100) && (ucUpdateBK == 0) && (bForceSetBK == FALSE
             -) && (usTargetBacklight != DBC_MIN_BACKLIGHT) ) {
                      return;
                  }
              #endif
2318   1      
2319   1      #if DCR_SMOOTH_PWM==ON
2320   1          if ((ucUpdateBK == 0) && //(bForceSetBK == FALSE) && 
2321   1              (bSuperDCR==TRUE) &&  (UserData.ucDynamicContrast==5) && (OSDAPI_IsOSDOn() == FALSE)) {           
             -   
2322   2              BacklightOff();
2323   2          }
2324   1      #endif
2325   1      
2326   1          ucUpdateBK = 1;
2327   1          if ((usCurrentBacklight != usTargetBacklight) || (bForceSetBK == TRUE)) { //Harry-2010-04-08: Add "|| 
             -(bForceSetBK == TRUE)" for little change pattern into ALL BLACK still can enter SuperDCR 
2328   2              if (abs(usCurrentBacklight - usTargetBacklight) < 512) {
2329   3                  if (usCurrentBacklight < usTargetBacklight) {
2330   4                      if (abs(usTargetBacklight - usCurrentBacklight) >= DCR_BenQ_BKSTEP)
2331   4                          usCurrentBacklight+=DCR_BenQ_BKSTEP;
2332   4                      else
2333   4                          usCurrentBacklight = usTargetBacklight;
2334   4                  }
2335   3                  else {
2336   4                      if (abs(usTargetBacklight - usCurrentBacklight) >= DCR_BenQ_BKSTEP)
2337   4                          usCurrentBacklight-=DCR_BenQ_BKSTEP;
2338   4                      else
2339   4                          usCurrentBacklight = usTargetBacklight;
2340   4                  }
2341   3              }
2342   2              else {
2343   3                  if (usCurrentBacklight < usTargetBacklight) {
2344   4                      usCurrentBacklight = usTargetBacklight;
2345   4                  }
2346   3                  else {
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 40  

2347   4                      if (abs(usTargetBacklight - usCurrentBacklight) >= DCR_BenQ_BKSTEP)
2348   4                          usCurrentBacklight-=DCR_BenQ_BKSTEP;
2349   4                      else
2350   4                          usCurrentBacklight = usTargetBacklight;
2351   4                  }
2352   3              }
2353   2      
2354   2              SetDBCBacklight(usCurrentBacklight, bSuperDCR);
2355   2              bForceSetBK = FALSE;
2356   2          }
2357   1          else
2358   1              ucUpdateBK = 0;
2359   1      }
2360          
2361          //******************************************************************************
2362          // Prototype:
2363          //  void DCR_BenQ_ResetDynBacklight(USHRT backlight)
2364          // Parameters:
2365          //  None
2366          // Return:
2367          //  None
2368          // Purpose:
2369          //  Periodic DCR routine
2370          // Notes:
2371          //  None
2372          //******************************************************************************
2373          
2374          void DCR_BenQ_ResetDynBacklight(USHRT backlight)
2375          {
2376   1          usCurrentBacklight = backlight;
2377   1          DCR_BenQ_SetDymBacklight();
2378   1      }
2379          
2380          
2381          //******************************************************************************
2382          // Prototype:
2383          //  void DCR_BenQ_FroceSetBk()
2384          // Parameters:
2385          //  None
2386          // Return:
2387          //  None
2388          // Purpose:
2389          //  Force to set backlight immediately if user change DCR_LEVEL
2390          // Notes:
2391          //  None
2392          //******************************************************************************
2393          
2394          void DCR_BenQ_FroceSetBk()
2395          {
2396   1          bForceSetBK = 1;
2397   1      }
2398          
2399          //******************************************************************************
2400          // Prototype:
2401          //  BOOL DCR_BenQ_Init()
2402          // Parameters:
2403          //  None
2404          // Return:
2405          //  None
2406          // Purpose:
2407          //  Force to set backlight immediately if user change DCR_LEVEL
2408          // Notes:
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 41  

2409          //  None
2410          //******************************************************************************
2411          
2412          BOOL DCR_BenQ_Init()
2413          {
2414   1          if ( !bInitDCR ) {
2415   2              bInitDCR = TRUE;
2416   2      //        usCurrentBacklight = GetScalerPWM(BKL_PWM_PORT);
2417   2              return TRUE;
2418   2          }
2419   1          return FALSE;
2420   1      }
2421          //******************************************************************************
2422          // Prototype:
2423          //  void PerformDCR(UCHAR reset)
2424          // Parameters:
2425          //  None
2426          // Return:
2427          //  None
2428          // Purpose:
2429          //  Periodic DCR routine
2430          // Notes:
2431          //  None
2432          //******************************************************************************
2433          #if 1//!lrd_dis_benq
2434          void PerformDCR(UCHAR reset)
2435          {
2436   1          if (reset) {
2437   2              DCR_SetDynACEType(ACE_SMOOTH);
2438   2          }
2439   1      
2440   1          //if (UserData.bDCRMode) {
2441   1          if ( UserData.ucDynamicContrast > 0 ) {
2442   2              DCR_UpdateHistogram(reset);
2443   2              DCR_SetDymACE(reset);
2444   2              if (reset) {
2445   3      #if 1//BF_DYNAMIC_BACKLIGHT == ON
2446   3                  WaitDisVSync();
2447   3                  SC_BYPASS_CTRL |= BIT2;
2448   3                  Sleep(25);
2449   3                  SC_DBC_CTRL = 0x01;
2450   3                  Sleep(25);
2451   3                  WaitDisVSync();
2452   3                  SC_BYPASS_CTRL &= ~BIT2;
2453   3      #endif
2454   3      #if DCR_SMOOTH_PWM==ON
2455   3                  DCR_BenQ_ResetDynBacklight(GetScalerPWM(BKL_PWM_PORT));
2456   3      #else
                          DCR_BenQ_ResetDynBacklight(GetBrightness1023());
              #endif
2459   3              }
2460   2              else {
2461   3                  DCR_BenQ_SetDymBacklight();
2462   3              }
2463   2          }
2464   1      }
2465          #else
              static void PerformDBC(void)
              {
                  static BOOL is_spr_dcr = FALSE;
                  static xdata USHRT local_timer = 0;
              
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 42  

                  if (!IsBlankVideo()) {
                      local_timer = GetTimerTick();
              
                      if (is_spr_dcr) {
                          is_spr_dcr = FALSE;
                          DCR_ResetDymBacklight(0);
                      }
                  }
                  else {
                      if ((GetTimerTick() - local_timer) > DBC_TIME_TO_OFF) {
                          local_timer = GetTimerTick();
                          if (is_spr_dcr == FALSE) {
                              is_spr_dcr = TRUE;
                              SetBrightness(DBC_BACKLIGHT_OFF);
                          }
                      }
                  }
              
                  if (is_spr_dcr == FALSE) {
                      DCR_SetDymBacklight();
                  }
              }
              
              void PerformDCR(UCHAR reset)
              {
                  if (reset) {
                      DCR_SetDynACEType(ACE_SMOOTH);
                      DCR_SetDynACEPnts(DefaultMinIGPoints);
                  }
              
                  if ( UserData.ucDCRMode == BKL_CTRL_DCR ) {
                      DCR_UpdateHistogram(reset);
                      DCR_SetDymACE(reset);
                      if (reset) {
                          DCR_ResetDymBacklight(GetBrightness1023());
                      }
                      else {
                      #ifdef DBC_ULTRA_LOW
                          PerformDBC();
                      #else
                          DCR_SetDymBacklight();
                      #endif
                      }
                  }
              }
              
              #endif
2518          //******************************************************************************
2519          // Prototype: 
2520          //  void DisableDCR(void)
2521          // Parameters:
2522          //  None
2523          // Return:
2524          //  None
2525          // Purpose:
2526          //  Recall brightness setting while turn off DCR function
2527          // Notes:
2528          //  None
2529          //******************************************************************************
2530          void DisableDCR(void)
2531          {
2532   1      //    UserSetBF();
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 43  

2533   1          UserSetBrightness();
2534   1      }
2535          
2536          //******************************************************************************
2537          // Prototype: 
2538          //  void DisableDCR(void)
2539          // Parameters:
2540          //  None
2541          // Return:
2542          //  None
2543          // Purpose:
2544          //  Recall brightness setting while turn off DCR function
2545          // Notes:
2546          //  None
2547          //******************************************************************************
2548          //void DisableDCR(void)
2549          //{
2550          //#if BF_DYNAMIC_BACKLIGHT==ON
2551          //   #if NT72314_RST_PORT ==  MCU_PORT_NULL       
2552          //      SC_DBC_CTRL = 0x00; //Laurence Mark,dont operate 0x430 at normal display
2553          //   #endif
2554          //#endif
2555          //    UserSetBF();
2556          //    UserSetBrightness();
2557          //}
2558          
2559          //******************************************************************************
2560          // Prototype: 
2561          //  void SetDBCBacklight(USHRT brightness, BOOL bSuperDCR)
2562          // Parameters:
2563          //  brightness : range is 0~1023
2564          // Return:
2565          //  None
2566          // Purpose:
2567          //  This is call-back function for ColorEngine library.
2568          // Notes:
2569          //  None
2570          //******************************************************************************
2571          void SetDBCBacklight(USHRT brightness, BOOL bSuperDCR)
2572          {
2573   1          code USHRT SuperDCRLevel[6] = {
2574   1              DBC_MAX_BACKLIGHT,
2575   1              DCR_LEVEL_1,
2576   1              DCR_LEVEL_2,
2577   1              DCR_LEVEL_3,
2578   1              DCR_LEVEL_4,
2579   1              DCR_LEVEL_5,
2580   1          };
2581   1      
2582   1      #if ENABLE_BENQ_DCR
2583   1          if ((bSuperDCR == TRUE) && (brightness == usDBCMinBackLight)){
2584   2      //        if(UserData.ucDynamicContrast == 5)
2585   2      //            BacklightOff(); //Harry-2010-04-04: By Philips Request for Super DCR
2586   2              brightness = SuperDCRLevel[UserData.ucDynamicContrast];
2587   2          }
2588   1          else if (brightness < usDBCMinBackLight) {//Harry-2010-03-17: To avoid backlight shutdown
2589   2              brightness = usDBCMinBackLight;
2590   2          }
2591   1      #else
                  if ((bSuperDCR == TRUE) && (brightness == DBC_MIN_BACKLIGHT)){
              //        if(UserData.ucDynamicContrast == 5)
              //            BacklightOff(); //Harry-2010-04-04: By Philips Request for Super DCR
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 44  

                      brightness = SuperDCRLevel[UserData.ucDynamicContrast];
                  }
                  else if (brightness < DBC_MIN_BACKLIGHT) {//Harry-2010-03-17: To avoid backlight shutdown
                      brightness = DBC_MIN_BACKLIGHT;
                  }
              
              #endif
2602   1          SetBrightness(brightness);
2603   1      }
2604          
2605          //******************************************************************************
2606          // Prototype: 
2607          //  void SetColorTemperature(UCHAR mode)
2608          // Parameters:
2609          //  None
2610          // Return:
2611          //  None
2612          // Purpose:
2613          //  Set Color Temperature
2614          // Notes:
2615          //  None
2616          //******************************************************************************
2617          #if ENABLE_NVT_FGA == ON
              void SetColorTemperature(UCHAR mode)
              {
                  USHRT r,g,b,GammaTemp;
                  UCHAR CTGain[3];  
                  GammaTemp = GetGammaNum();//current Gamma no.
                  
                  
                  switch (mode) {
                      /*case CLRTMP_5000K:
                          r = CalibData.uc5000KRGain;
                          g = CalibData.uc5000KGGain;
                          b = CalibData.uc5000KBGain;
                          break;*/
                      default:
                      case CLRTMP_6500K:
                        LG_FGA_LoadColorTemp(GammaTemp, CT_6500K,&CTGain[0],&CTGain[1],&CTGain[2]); 
                          r = CTGain[0];
                          g = CTGain[1];
                          b = CTGain[2];
                    //printf("6500 %d,%d,%d\r\n",(USHRT)r,(USHRT)g,(USHRT)b);  
                          break;
                      #if 0
                      case CLRTMP_7500K:
                          r = CalibData.uc7500KRGain;
                          g = CalibData.uc7500KGGain;
                          b = CalibData.uc7500KBGain;
                          break;
                      case CLRTMP_8200K:
                          r = CalibData.uc8200KRGain;
                          g = CalibData.uc8200KGGain;
                          b = CalibData.uc8200KBGain;
                          break;
                      #endif    
                      case CLRTMP_9300K:          
                        LG_FGA_LoadColorTemp(GammaTemp, CT_9300K,&CTGain[0],&CTGain[1],&CTGain[2]);           
                          r = CTGain[0];
                          g = CTGain[1];
                          b = CTGain[2];
                          //printf("9300 %d,%d,%d\r\n",(USHRT)r,(USHRT)g,(USHRT)b);  
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 45  

                          break;
                      case CLRTMP_5800K:
                          LG_FGA_LoadColorTemp(GammaTemp, CT_5800K,&CTGain[0],&CTGain[1],&CTGain[2]);                 
                          r = CTGain[0];
                          g = CTGain[1];
                          b = CTGain[2];
                          //printf("5800 %d,%d,%d\r\n",(USHRT)r,(USHRT)g,(USHRT)b);  
                          break;
                      #if 0
                      case CLRTMP_11500K:
                          r = CalibData.uc11500KRGain;
                          g = CalibData.uc11500KGGain;
                          b = CalibData.uc11500KBGain;
                          break;
                      #endif
                      case CLRTMP_sRGB:
                          LG_FGA_LoadColorTemp(GammaTemp, CT_6500K,&CTGain[0],&CTGain[1],&CTGain[2]);           
                          r = CTGain[0];
                          g = CTGain[1];
                          b = CTGain[2];
                          //printf("sRGB %d,%d,%d\r\n",(USHRT)r,(USHRT)g,(USHRT)b);  
                          break;
                      case CLRTMP_USER:
                          r = (USHRT)GetRGain255();
                          g = (USHRT)GetGGain255();
                          b = (USHRT)GetBGain255();
                          break;
                  };  
                  
                  // To bypass the 3x3 matrix, we need to assign 0x100 to MTXAPI_SetRGBGain.
                  // However, the max gain value in this function is 0xFF.
                  // So, we plus one to achieve bypassing 3x3 matrix
                  // Jude 2011/07/28
              #if ENABLE_PICTURE_DUAL_MODE == ON
                  if(UserData.ucBFMode == PICTURE_MODE_LOW_BL){
              #if ENABLE_LBL_BASE_FGA == OFF
                      switch(UserData.ucLBLMode) {
                          case MULTIMEDIA:
                              r = DEF_MULTIMEDIA_RGain + 1;
                              g = DEF_MULTIMEDIA_GGain + 1;
                              b = DEF_MULTIMEDIA_BGain + 1;
                              break;
                          case WEB_SURFING:
                              r = DEF_WEB_SURFING_RGain + 1;
                              g = DEF_WEB_SURFING_GGain + 1;
                              b = DEF_WEB_SURFING_BGain + 1;
                              break;
                          case OFFICE:
                              r = DEF_OFFICE_RGain + 1;
                              g = DEF_OFFICE_GGain + 1;
                              b = DEF_OFFICE_BGain + 1;
                              break;
                          case READING:
                              r = DEF_READING_RGain + 1;
                              g = DEF_READING_GGain + 1;
                              b = DEF_READING_BGain + 1;
                              break;
              #else
                      LG_FGA_LoadColorTemp(GammaTemp, CT_6500K,&CTGain[0],&CTGain[1],&CTGain[2]);
                      switch(UserData.ucLBLMode) {
                          case MULTIMEDIA:
                              r = CTGain[0] + DEF_MULTIMEDIA_RGain_Shift+ 1;
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 46  

                              g = CTGain[1] + DEF_MULTIMEDIA_GGain_Shift + 1;
                              b = CTGain[2] + DEF_MULTIMEDIA_BGain_Shift + 1;
                              break;
                          case WEB_SURFING:
                              r = CTGain[0] + DEF_WEB_SURFING_RGain_Shift + 1;
                              g = CTGain[1] + DEF_WEB_SURFING_GGain_Shift + 1;
                              b = CTGain[2] + DEF_WEB_SURFING_BGain_Shift + 1;
                              break;
                          case OFFICE:
                              r = CTGain[0] + DEF_OFFICE_RGain_Shift + 1;
                              g = CTGain[1] + DEF_OFFICE_GGain_Shift + 1;
                              b = CTGain[2] + DEF_OFFICE_BGain_Shift + 1;
                              break;
                          case READING:
                              r = CTGain[0] + DEF_READING_RGain_Shift + 1;
                              g = CTGain[1] + DEF_READING_GGain_Shift + 1;
                              b = CTGain[2] + DEF_READING_BGain_Shift + 1;
                              break;     
              #endif
                          default:
                              break;     
                      }   
              #endif
                  }    
              
                  MTXAPI_SetRGBGain(r + 1,g + 1,b + 1);
              }
              #else
2747          void SetColorTemperature(UCHAR mode)
2748          { 
2749   1          USHRT r,g,b,GammaTemp;
2750   1          GammaTemp = GetGammaNum();
2751   1          switch (mode) {
2752   2              /*case CLRTMP_5000K:
2753   2                  r = CalibData.uc5000KRGain;
2754   2                  g = CalibData.uc5000KGGain;
2755   2                  b = CalibData.uc5000KBGain;
2756   2                  break;*/
2757   2              default:
2758   2              case CLRTMP_6500K:
2759   2                  r = CalibData.uc6500KRGain;//+CT6500K[GammaTemp].ROffset;
2760   2                  g = CalibData.uc6500KGGain;//+CT6500K[GammaTemp].GOffset;
2761   2                  b = CalibData.uc6500KBGain;//+CT6500K[GammaTemp].BOffset;
2762   2                  break;
2763   2              /*case CLRTMP_7500K:
2764   2                  r = CalibData.uc7500KRGain;
2765   2                  g = CalibData.uc7500KGGain;
2766   2                  b = CalibData.uc7500KBGain;
2767   2                  break;*/
2768   2              /*case CLRTMP_8200K:
2769   2                  r = CalibData.uc8200KRGain;
2770   2                  g = CalibData.uc8200KGGain;
2771   2                  b = CalibData.uc8200KBGain;
2772   2                  break;*/
2773   2              case CLRTMP_9300K:
2774   2                  r = CalibData.uc9300KRGain;//+CT9300K[GammaTemp].ROffset;
2775   2                  g = CalibData.uc9300KGGain;//+CT9300K[GammaTemp].GOffset;
2776   2                  b = CalibData.uc9300KBGain;//+CT9300K[GammaTemp].BOffset;
2777   2                  break;
2778   2              case CLRTMP_5800K:
2779   2                  r = CalibData.uc5800KRGain;//+CT5800K[GammaTemp].ROffset;
2780   2                  g = CalibData.uc5800KGGain;//+CT5800K[GammaTemp].GOffset;
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 47  

2781   2                  b = CalibData.uc5800KBGain;//+CT5800K[GammaTemp].BOffset;
2782   2                  break;
2783   2                  
2784   2              /*case CLRTMP_11500K:
2785   2                  r = CalibData.uc11500KRGain;
2786   2                  g = CalibData.uc11500KGGain;
2787   2                  b = CalibData.uc11500KBGain;
2788   2                  break;*/
2789   2              case CLRTMP_sRGB:
2790   2                  r = CalibData.ucsRGBRGain;//+CT6500K[GammaTemp].ROffset;
2791   2                  g = CalibData.ucsRGBGGain;//+CT6500K[GammaTemp].GOffset;
2792   2                  b = CalibData.ucsRGBBGain;//+CT6500K[GammaTemp].ROffset; 
2793   2                  break;
2794   2              case CLRTMP_USER:
2795   2                  r = (USHRT)GetRGain255();
2796   2                  g = (USHRT)GetGGain255();
2797   2                  b = (USHRT)GetBGain255();
2798   2                  break;
2799   2          };  
2800   1          
2801   1          // To bypass the 3x3 matrix, we need to assign 0x100 to MTXAPI_SetRGBGain.
2802   1          // However, the max gain value in this function is 0xFF.
2803   1          // So, we plus one to achieve bypassing 3x3 matrix
2804   1          // Jude 2011/07/28
2805   1          MTXAPI_SetRGBGain(r + 1,g + 1,b + 1);
2806   1      }
2807          #endif
2808          #if 0
              //==== AOC ===============
              
              void SetBF_Brightness(void)
              {
                  UCHAR tmp;
                  tmp = ((USHRT)200*UserData.ucBF_Brightness/100+55);
                  BFAPI_SetROffset(tmp);
                  BFAPI_SetGOffset(tmp);
                  BFAPI_SetBOffset(tmp);
              }
              
              void SetBF_Contrast(void)
              {
                  UCHAR tmp;
                 
                  tmp = ((USHRT)200*UserData.ucBF_Contrast/100+55);
                  BFAPI_SetRGain(tmp);
                  BFAPI_SetGGain(tmp);
                  BFAPI_SetBGain(tmp);
                  
              }
              #endif
2831          
2832          
2833          /*
2834          
2835          void GetCLRTMP_BriCon(void)
2836          {
2837              //printf("colortemp=%x\r\n",(USHRT)UserData.ucColorTemp);    
2838              switch(UserData.ucColorTemp) {
2839                  case CLRTMP_6500K:    
2840                      UserData.ucBrightness = UserData.ucBrightness_6500;
2841                      UserData.ucContrast = UserData.ucContrast_6500;
2842                      break;
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 48  

2843                  case CLRTMP_9300K:
2844                      UserData.ucBrightness = UserData.ucBrightness_9300;
2845                      UserData.ucContrast = UserData.ucContrast_9300;
2846                      break;
2847                  case CLRTMP_7500K:
2848                      UserData.ucBrightness = UserData.ucBrightness_NORMAL;
2849                      UserData.ucContrast = UserData.ucContrast_NORMAL;
2850                      break;
2851                  case CLRTMP_USER:        
2852                      UserData.ucBrightness = UserData.ucBrightness_USER;
2853                      UserData.ucContrast = UserData.ucContrast_USER;
2854                      break;
2855                  case CLRTMP_sRGB:
2856                      UserData.ucBrightness = UserData.ucBrightness_sRGB;
2857                      UserData.ucContrast = UserData.ucContrast_sRGB;
2858                      break;
2859                  default:
2860                      UserData.ucBrightness = UserData.ucBrightness;
2861                      UserData.ucContrast = UserData.ucContrast;
2862                      break;
2863                }
2864          }
2865          */
2866          void SetCLRTMP_BriCon(void)
2867          {
2868   1          if(Custom_System.bDualviewAdjust == FALSE){
2869   2          switch(UserData.ucBFMode) {
2870   3              case PICTURE_MODE_SRGB:
2871   3               UserData.ucBrightness_sRGB = UserData.ucBrightness;
2872   3               UserData.ucContrast_sRGB = UserData.ucContrast;
2873   3                  break;
2874   3      #if ENABLE_PICTURE_MODE_CAD == ON
2875   3              case PICTURE_MODE_CAD: 
2876   3                  UserData.ucBrightness_CAD= UserData.ucBrightness;
2877   3                  UserData.ucContrast_CAD = UserData.ucContrast;
2878   3                  break;
2879   3      #endif
2880   3      #if ENABLE_PICTURE_MODE_ANIMATION == ON
2881   3              case PICTURE_MODE_ANIMATION:            
2882   3                  UserData.ucBrightness_Animation= UserData.ucBrightness;
2883   3                  UserData.ucContrast_Animation = UserData.ucContrast;
2884   3                  break;
2885   3      #endif
2886   3      #if ENABLE_PRESENTATION_MODE == ON
                      case PICTURE_MODE_PRESENTATION:            
                          UserData.ucBrightness_Presentation= UserData.ucBrightness;
                          UserData.ucContrast_Presentation = UserData.ucContrast;
                          break;
              #endif            
2892   3              case PICTURE_MODE_STANDARD:
2893   3               UserData.ucBrightness_Standard = UserData.ucBrightness;
2894   3               UserData.ucContrast_Standard = UserData.ucContrast;
2895   3               UserData.ucColorTemp_Standard = UserData.ucColorTemp;         
2896   3               break;
2897   3      #if ENABLE_PICTURE_MODE_REC709 == ON 
2898   3              case PICTURE_MODE_REC709:
2899   3                  UserData.ucBrightness_Rec709= UserData.ucBrightness;
2900   3                  UserData.ucContrast_Rec709= UserData.ucContrast;            
2901   3                  break;            
2902   3      #endif
2903   3              case PICTURE_MODE_LOW_BL:
2904   3               SetLBLMode_BriCon();
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 49  

2905   3                  break;
2906   3      #if ENABLE_PICTURE_MODE_MOVIE == ON                   
2907   3              case PICTURE_MODE_MOVIE:
2908   3               UserData.ucBrightness_Movie= UserData.ucBrightness;
2909   3               UserData.ucContrast_Movie = UserData.ucContrast;
2910   3                  break;
2911   3      #endif
2912   3      #if ENABLE_PICTURE_MODE_PHOTO== ON       
2913   3              case PICTURE_MODE_PHOTO:
2914   3               UserData.ucBrightness_Photo= UserData.ucBrightness;
2915   3               UserData.ucContrast_Photo = UserData.ucContrast;
2916   3                  break;
2917   3      #endif            
2918   3      #if ENABLE_PICTURE_MODE_GAME == ON            
2919   3              case PICTURE_MODE_GAME:
2920   3               UserData.ucBrightness_Game = UserData.ucBrightness;
2921   3               UserData.ucContrast_Game = UserData.ucContrast;
2922   3                  break;            
2923   3      #endif            
2924   3      #if ENABLE_PICTURE_MODE_DARKROOM == ON 
2925   3              case PICTURE_MODE_DARKROOM:
2926   3                  UserData.ucBrightness_DarkRoom = UserData.ucBrightness;
2927   3                  UserData.ucContrast_DarkRoom = UserData.ucContrast;            
2928   3                  break;            
2929   3      #endif
2930   3              case PICTURE_MODE_ECO:
2931   3                  break;            
2932   3      #if ENABLE_PICTURE_MODE_MBOOK == ON
2933   3              case PICTURE_MODE_MBOOK:
2934   3               UserData.ucBrightness_MBOOK= UserData.ucBrightness;
2935   3               UserData.ucContrast_MBOOK = UserData.ucContrast;
2936   3                  break;          
2937   3      #endif
2938   3              case PICTURE_MODE_USER:            
2939   3               UserData.ucBrightness_USER = UserData.ucBrightness;
2940   3               UserData.ucContrast_USER = UserData.ucContrast;
2941   3               UserData.ucColorTemp_USER = UserData.ucColorTemp;         
2942   3                  break; 
2943   3              default:
2944   3                  break;
2945   3          }      
2946   2         }
2947   1      }
2948          
2949          void SetCLRTMP_Sharpness(void)
2950          {
2951   1          switch(UserData.ucBFMode) {
2952   2              case PICTURE_MODE_SRGB:
2953   2               UserData.ucSharpness_sRGB = UserData.ucSharpness;
2954   2                  break;
2955   2      #if ENABLE_PICTURE_MODE_CAD == ON
2956   2              case PICTURE_MODE_CAD: 
2957   2                  UserData.ucSharpness_CAD= UserData.ucSharpness;
2958   2                  break;
2959   2      #endif
2960   2      #if ENABLE_PICTURE_MODE_ANIMATION == ON
2961   2              case PICTURE_MODE_ANIMATION:            
2962   2                  UserData.ucSharpness_Animation= UserData.ucSharpness;
2963   2                  break;
2964   2      #endif
2965   2      #if ENABLE_PRESENTATION_MODE == ON
                      case PICTURE_MODE_PRESENTATION:            
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 50  

                          UserData.ucSharpness_Presentation= UserData.ucSharpness;
                          break;
              #endif                        
2970   2              case PICTURE_MODE_STANDARD:
2971   2               UserData.ucSharpness_Standard = UserData.ucSharpness;
2972   2               break;
2973   2              case PICTURE_MODE_LOW_BL:
2974   2               SetLBLMode_Sharpness();
2975   2                  break;
2976   2      #if ENABLE_PICTURE_MODE_MOVIE == ON                   
2977   2              case PICTURE_MODE_MOVIE:
2978   2               UserData.ucSharpness_Movie= UserData.ucSharpness;
2979   2                  break;
2980   2      #endif
2981   2      #if ENABLE_PICTURE_MODE_PHOTO== ON       
2982   2              case PICTURE_MODE_PHOTO:
2983   2               UserData.ucSharpness_Photo= UserData.ucSharpness;
2984   2                  break;
2985   2      #endif            
2986   2      #if ENABLE_PICTURE_MODE_GAME == ON            
2987   2              case PICTURE_MODE_GAME:
2988   2               UserData.ucSharpness_Game = UserData.ucSharpness;
2989   2                  break;            
2990   2      #endif            
2991   2              case PICTURE_MODE_ECO:
2992   2                  break;            
2993   2      #if ENABLE_PICTURE_MODE_MBOOK == ON
2994   2              case PICTURE_MODE_MBOOK:
2995   2               UserData.ucSharpness_MBOOK= UserData.ucSharpness;
2996   2                  break;          
2997   2      #endif
2998   2              case PICTURE_MODE_USER:            
2999   2               UserData.ucSharpness_USER = UserData.ucSharpness;
3000   2                  break;
3001   2      #if ENABLE_PICTURE_MODE_REC709== ON
3002   2              case PICTURE_MODE_REC709:
3003   2               UserData.ucSharpness_Rec709= UserData.ucSharpness;
3004   2                  break;          
3005   2      #endif
3006   2      #if ENABLE_PICTURE_MODE_DARKROOM== ON
3007   2              case PICTURE_MODE_DARKROOM:
3008   2               UserData.ucSharpness_DarkRoom= UserData.ucSharpness;
3009   2                  break;          
3010   2      #endif
3011   2              default:
3012   2                  break;
3013   2          }        
3014   1      }
3015          void SetLBLMode_Sharpness(void)
3016          {
3017   1          switch(UserData.ucLBLMode) {
3018   2              case MULTIMEDIA:
3019   2                 UserData.ucSharpness_LBL_Mult = UserData.ucSharpness;
3020   2           break;
3021   2              case WEB_SURFING:
3022   2                 UserData.ucSharpness_LBL_Web = UserData.ucSharpness;
3023   2           break;
3024   2              case OFFICE:
3025   2                 UserData.ucSharpness_LBL_Office = UserData.ucSharpness;
3026   2           break;
3027   2              case READING:        
3028   2                  UserData.ucSharpness_LBL_Read = UserData.ucSharpness;
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 51  

3029   2                  break;
3030   2              default:
3031   2                  break;
3032   2          }        
3033   1      }
3034          
3035          void SetLBLMode_BriCon(void)
3036          {
3037   1          switch(UserData.ucLBLMode) {
3038   2              case MULTIMEDIA:
3039   2               UserData.ucBrightness_LBL_Mult= UserData.ucBrightness;
3040   2               UserData.ucContrast_LBL_Mult = UserData.ucContrast;
3041   2           break;
3042   2              case WEB_SURFING:
3043   2               UserData.ucBrightness_LBL_Web= UserData.ucBrightness;
3044   2               UserData.ucContrast_LBL_Web = UserData.ucContrast;
3045   2           break;
3046   2              case OFFICE:
3047   2               UserData.ucBrightness_LBL_Office= UserData.ucBrightness;
3048   2               UserData.ucContrast_LBL_Office = UserData.ucContrast;
3049   2           break;
3050   2              case READING:        
3051   2               UserData.ucBrightness_LBL_Read= UserData.ucBrightness;
3052   2               UserData.ucContrast_LBL_Read = UserData.ucContrast;            
3053   2                  break;
3054   2              default:
3055   2                  break;
3056   2          }        
3057   1      }
3058          #if 0
              void BF_IdvColorEnhance(BF_IDV_COLOR_EN_MODE mode)
              {
                  switch(mode) {
                      case _BF_IDV_COLOR_EN_NONE_: //normal
                          BFAPI_CorrectFleshTone(0x00);
                          BFAPI_EnhanceRed(0x80);
                          BFAPI_EnhanceGreen(0x80);
                          BFAPI_EnhanceBlue(0x80);
                          break;
                      case _BF_IDV_COLOR_EN_SKIN_:
                          BFAPI_CorrectFleshTone(0x4C);
                          BFAPI_EnhanceRed(0xC6);
                          BFAPI_EnhanceGreen(0x80);
                          BFAPI_EnhanceBlue(0x80);
                          break;
                      case _BF_IDV_COLOR_EN_GREEN_:
                          BFAPI_CorrectFleshTone(0x4C);
                          BFAPI_EnhanceRed(0x80);
                          BFAPI_EnhanceGreen(0xC6);
                          BFAPI_EnhanceBlue(0x80);
                          break;
                      case _BF_IDV_COLOR_EN_BLUE_:
                          BFAPI_CorrectFleshTone(0x00);
                          BFAPI_EnhanceRed(0x80);
                          BFAPI_EnhanceGreen(0x80);
                          BFAPI_EnhanceBlue(0xC6);
                          break;
                      case _BF_IDV_COLOR_EN_ALL_:
                          BFAPI_CorrectFleshTone(0x4C);
                          BFAPI_EnhanceRed(0x97);
                          BFAPI_EnhanceGreen(0x9F);
                          BFAPI_EnhanceBlue(0x97);
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 52  

                          break;
                  }
              }
              void BF_SetWindowSize(UCHAR type)
              {
              #if SCALER_TYPE == NT68671 || SCALER_TYPE == NT68672 || SCALER_TYPE == NT68672
                      USHRT x,y,w,h;
                      UCHAR temp_position,temp_size;
              #endif
                  if (AOC_ECOData.ucBFWSize == type) {
                      return;
                  }
                  AOC_ECOData.ucBFWSize = type;
              #if SCALER_TYPE == NT68671 || SCALER_TYPE == NT68672 || SCALER_TYPE == NT68672   //v31_110923_1900_SYS#8
                      if ((type == 0) || (type == 1)){
                          temp_position = 1;
                          temp_size = type + 1;
                      }    
                      else if(type == 2){
                          temp_position = 2;
                          temp_size = 2;
                      }
                      else{
                          temp_position = 1;
                          temp_size = 1;
                      }    
                      x = ReadShortScaler(&SC_GRAPHIC_DISP_HOR_ACT_WID_LO) -(ReadShortScaler(&SC_GRAPHIC_DISP_HOR_ACT_WI
             -D_LO)/temp_position);
                      y = 0;
                      w = ReadShortScaler(&SC_GRAPHIC_DISP_HOR_ACT_WID_LO)/temp_size;
                      h = ReadShortScaler(&SC_GRAPHIC_DISP_VER_ACT_LEN_LO);
                      BFAPI_SetCustomWindow(x,y,w,h); 
                      AOC_ECOData.ucBFWSize = 0xff;
              #else
                      BFAPI_SetWindowSize(type);
              #endif
                  
                   
                  //if ((ReadIIC560(BRIGHT_FRM_HS_LI)==0x00) &&ucWidemode)
                  //{
                      //WriteIIC560(BRIGHT_FRM_HS_LI, 0x01);
                      //WriteIIC560(BRIGHT_FRM_HS_HI, 0x00);
                  //}
              }
              #endif
3135          
3136          #if ENABLE_RECALL_PREVIEW == ON
              void BF_SetSize(void) //picture_boost
              {
                   USHRT xy;
              //     xy =  H_ActiveTab[ucResolution]*BF_H[ucBF_Size] ;
                   xy =  usBFWindowWidth*BF_H[UserData.ucBF_Size] ;
              
                  SC_BRIGHT_FRM_HW_LO = xy&0xFF;
                  SC_BRIGHT_FRM_HW_HI =  xy>>8;
              
                  //WriteIIC560(BRIGHT_FRM_HW_LI, (xy&0xFF));
                  //WriteIIC560(BRIGHT_FRM_HW_HI, xy>>8);  
              
              //     xy =  V_ActiveTab[ucResolution]*BF_V[ucBF_Size] ;
                   xy =  usBFWindowHeight*BF_V[UserData.ucBF_Size] ;
              
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 53  

              
                  SC_BRIGHT_FRM_VH_LO = xy&0xFF;
                  SC_BRIGHT_FRM_VH_HI = xy>>8;
              }
              #endif
3157          #if !lrd_dis
              void BF_SetHP(void) //picture_boost
              {
              USHRT xy;
              //    xy = (ULONG)(H_ActiveTab[ucResolution]*(1-BF_H[ucBF_Size])) * ucBF_HP / 100 ;
                  xy = (ULONG)(usBFWindowWidth*(1-BF_H[UserData.ucBF_Size])) * UserData.ucBF_HP / 100 ;
                  xy += usBFWindowBegin;
                  //WriteIIC560(BRIGHT_FRM_HS_LI, (xy&0xFF)+1);
                  //WriteIIC560(BRIGHT_FRM_HS_LI, (xy&0xFF));
                  //WriteIIC560(BRIGHT_FRM_HS_HI, xy>>8);
                  SC_BRIGHT_FRM_HS_LO = xy&0xFF;
                  SC_BRIGHT_FRM_HS_HI = xy>>8;
              }
                   
              void BF_SetVP(void) //picture_boost
              {
              USHRT xy;
              //    xy = (ULONG)V_ActiveTab[ucResolution] *(1- BF_V[ucBF_Size])* ucBF_VP / 100;
                  xy = (ULONG)usBFWindowHeight*(1- BF_V[UserData.ucBF_Size])* UserData.ucBF_VP / 100;
                  //WriteIIC560(BRIGHT_FRM_VS_LI, xy&0xFF);
                  //WriteIIC560(BRIGHT_FRM_VS_HI, xy>>8);
              
                  SC_BRIGHT_FRM_VS_LO =  xy&0xFF;
                  SC_BRIGHT_FRM_VS_HI =  xy>>8;
              }
              #endif
3183          #if ENABLE_RECALL_PREVIEW == ON
              void BF_SetWindowAfterAspectRatio()
              {
              #if 1 
                 {
                      BFAPI_SetActiveWindow(BF_WINDOW_1);
                      //BFAPI_SetWindowSize(BF_WINDOW_FULLSCREEN);    
                   if (UserData.bDemo) {
                       BFAPI_SetWindowSize(BF_WINDOW_LEFTSIZE);
                    }
                    else {
                          BFAPI_SetWindowSize(BF_WINDOW_FULLSCREEN);
                     }
                       //BF_SetWindowAfterAspectRatio();//Jerry
                      
                  }
              #endif    
              
                  usBFWindowWidth = ReadShortScaler(&SC_GRAPHIC_DISP_HOR_ACT_WID_LO);
              #if ENABLE_DUAL_370
                  usBFWindowWidth *=2;
              #else
              #if ENABLE_PIP
                  if (UserData.ucPIPMode == PIP_TYPE_PBP_SBS) {
                          usBFWindowWidth *=2;
                  }
              #endif    
              #endif
                  usBFWindowBegin = ReadShortScaler(&SC_GRAPHIC_DISP_HOR_ACT_BEG_LO)-ReadShortScaler(&SC_DH_BG_BEG_LO);
                  
                  if (UserData.bBrightFrame != 0 ) {
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 54  

                      BF_SetSize();
                      BF_SetHP();
                      BF_SetVP();
                  }
              }
              #endif
3220          typedef enum _BF_REF_ACTIVE_
3221          {
3222              BF_REF_CAPTURE,
3223              BF_REF_DISPLAY,        
3224          
3225          } BF_REF_ACTIVE;
3226          
3227          
3228          
3229          void SetDemo(void)
3230          {
3231   1      #if ENABLE_PICTURE_DUAL_MODE == ON
3232   1          UCHAR tempBFMode;
3233   1      
3234   1          tempBFMode = DualViewPointoBFMode(UserData.ucDualViewMode);
3235   1      
3236   1          if ((UserData.bSensEyeDemo==PICTURE_DUALMODE_ON)&&(isOSDAllowSenseyeDemo())&& tempBFMode != UserData.u
             -cBFMode)
3237   1          {
3238   2              BFAPI_SetActiveWindow(BF_WINDOW_1);   
3239   2              BFAPI_SetCustomWindow(0, 0, UserPanelData.usWidth/2, UserPanelData.usHeight);
3240   2              BFAPI_SetActiveWindow(BF_WINDOW_2);    
3241   2              BFAPI_SetCustomWindow(UserPanelData.usWidth/2, 0, UserPanelData.usWidth/2, UserPanelData.usHeight)
             -;
3242   2          }
3243   1          else {
3244   2              BFAPI_SetActiveWindow(BF_WINDOW_1);   
3245   2              BFAPI_SetCustomWindow(0, 0, UserPanelData.usWidth, UserPanelData.usHeight);
3246   2          }
3247   1      #else
                  if ((UserData.bSensEyeDemo==TRUE)&&(isOSDAllowSenseyeDemo()))
                  {
                      BFAPI_SetCustomWindow(UserPanelData.usWidth/2, 0, UserPanelData.usWidth/2, UserPanelData.usHeight)
             -;
                  }
                  else {
                      BFAPI_SetCustomWindow(0, 0, UserPanelData.usWidth, UserPanelData.usHeight);
                  }
              #endif    
3256   1      }
3257          #if 0
              void BF_SetDymACEMode(UCHAR reset)
              {
                  DCR_UpdateHistogram(reset);
                  DCR_SetDynACEPnts(DefaultMinIGPoints);//v31_110803_0930_SYS#1
                  DCR_SetDymACE(reset);
              }
              #endif
3265          #if 0
              UCHAR GetECOBrightness(UCHAR mode)
              {
                  if (UserData.ucECOMode != pECO_Standard && UserData.ucECOMode != pECO_DCR) {
                      return BrightnessTab[mode];
                  }
                  else {
                     // GetCLRTMP_BriCon();
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 55  

                      return UserData.ucBrightness;
                  }
              }
              
              UCHAR GetECOContrast(UCHAR mode)
              {
                  if (UserData.ucECOMode != pECO_Standard && UserData.ucECOMode != pECO_DCR) {
                      return ContrastTab[mode];
                  }
                  else {
                      //GetCLRTMP_BriCon();
                      return UserData.ucContrast;
                  }
              }
              #endif
3288          
3289          void UserSetHue(void)
3290          {
3291   1      #if ENABLE_PICTURE_DUAL_MODE == ON
3292   1        if(Custom_System.bDualviewAdjust == TRUE){
3293   2              BFAPI_SetActiveWindow(BF_WINDOW_2);    
3294   2          }
3295   1          else
3296   1          {
3297   2              BFAPI_SetActiveWindow(BF_WINDOW_1);    
3298   2          }
3299   1      #endif
3300   1      
3301   1          BFAPI_SetHue(Remap100To255(UserData.ucHue));
3302   1      }
3303          
3304          void UserSetSaturation(void)
3305          {
3306   1      #if ENABLE_PICTURE_DUAL_MODE == ON
3307   1            if(Custom_System.bDualviewAdjust == TRUE){
3308   2                  BFAPI_SetActiveWindow(BF_WINDOW_2);    
3309   2              }
3310   1              else
3311   1              {
3312   2                  BFAPI_SetActiveWindow(BF_WINDOW_1);    
3313   2              }
3314   1      #endif
3315   1      
3316   1          BFAPI_SetSaturation(Remap100To255(UserData.ucSaturation));
3317   1      }
3318          #if ENABLE_PICTURE_MODE_ANIMATION == ON
3319          void UserSetAnimation(void)
3320          {
3321   1      #if OSDTYPE == OSD_BENQ_V2
3322   1      #define ANI_STEP 1
3323   1      #else
              #define ANI_STEP 6//3 
              #endif
3326   1      //    UCHAR i;
3327   1          #if ENABLE_PICTURE_DUAL_MODE == ON
3328   1          if(Custom_System.bDualviewAdjust == TRUE){
3329   2              BFAPI_SetActiveWindow(BF_WINDOW_2);    
3330   2          }
3331   1          else
3332   1          #endif   
3333   1          {
3334   2              BFAPI_SetActiveWindow(BF_WINDOW_1);    
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 56  

3335   2          }
3336   1          BFAPI_EnableCM(CM_ALL);
3337   1      /*
3338   1          //test
3339   1      //    for(i=0; i<17; i++)
3340   1          {
3341   1      //        printf("%d\r\n",(USHRT)(CMModes[PICTURE_MODE_SRGB].pIG->IGamma[i]));
3342   1              //printf("%d\r\n",(USHRT)(CMModes[PICTURE_MODE_ANIMATION].pIG->IGamma[i]-CMModes[PICTURE_MODE_SRGB
             -].pIG->IGamma[i]));
3343   1          }
3344   1      */
3345   1          if(UserData.ucAnimationMode == MINIMUM_ANIMATION_MODE){
3346   2              BFAPI_SetPreACEMode(CMModes[PICTURE_MODE_SRGB].pIG);//bypass
3347   2          }
3348   1          else if(UserData.ucAnimationMode == 1){
3349   2              BFAPI_SetPreACEMode(CMModes[PICTURE_MODE_ANIMATION].pIG);
3350   2          }   
3351   1          else{
3352   2              BFAPI_SetPreACEModeWithStep(CMModes[PICTURE_MODE_ANIMATION].pIG, (UserData.ucAnimationMode*ANI_STE
             -P));
3353   2          }
3354   1      
3355   1          BFAPI_EnableWindow(BF_WINDOW_1);
3356   1      
3357   1      }
3358          #endif
3359          void SetSenseEyeLeftMode(UCHAR mode)
3360          {
3361   1      #if ENABLE_PICTURE_DUAL_MODE == ON
3362   1          mode = mode;
3363   1          return;
3364   1      #else
                  //UCHAR tmp = GetSPIIndex();
                  BFAPI_SetActiveWindow(BF_WINDOW_2);    
              //    BFAPI_SetWindowSize(BF_WINDOW_LEFTSIZE);
                  BFAPI_SetCustomWindow(0, 0, UserPanelData.usWidth/2, UserPanelData.usHeight);
              
                  BFAPI_EnableCM(CM_ALL);
                  BFAPI_SetROffset(CMModes[mode].ROffset);
                  BFAPI_SetGOffset(CMModes[mode].GOffset);
                  BFAPI_SetBOffset(CMModes[mode].BOffset);
                  BFAPI_SetRGain(CMModes[mode].RGain);
                  BFAPI_SetGGain(CMModes[mode].GGain);
                  BFAPI_SetBGain(CMModes[mode].BGain);
                  BFAPI_SetHue(CMModes[mode].Hue);
                  BFAPI_SetSaturation(CMModes[mode].Saturation);
                  BFAPI_SetIntensity(CMModes[mode].Intensity);
                  BFAPI_CorrectFleshTone(CMModes[mode].FTMore);
                  BFAPI_EnhanceRed(CMModes[mode].RedMore);
                  BFAPI_EnhanceGreen(CMModes[mode].GreenMore);
                  BFAPI_EnhanceBlue(CMModes[mode].BlueMore);
                  //UserSetSharpness();//BFAPI_SetSharpness(CMModes[mode].Sharpness);
                  BFAPI_SetYPeaking(CMModes[mode].Peaking);
                  BFAPI_SetTextEnhancement(CMModes[mode].TextEn);
                  BFAPI_ColorEnhance(CMModes[mode].ClrMode);
                  if (!UserData.bDCRMode) {
                      BFAPI_SetPreACEMode(CMModes[mode].pIG);
                  }
                  BFAPI_SetHHTable(CMModes[mode].pHH);
                  BFAPI_SetHSTable(CMModes[mode].pHS);
                  BFAPI_SetHITable(CMModes[mode].pHI);
                 
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 57  

                  BFAPI_EnableWindow(BF_WINDOW_2);
                  
              #endif
3398   1      }
3399          
3400          #if ENABLE_NVT_FGA == ON
              #if OSDTYPE == OSD_BENQ_V2
              UCHAR GetColorTempature(void)
              {
                  UCHAR ColorTemp;
                   switch(UserData.ucBFMode){
                       case PICTURE_MODE_STANDARD:
                           ColorTemp = UserData.ucColorTemp_Standard;break;
              #if ENABLE_PICTURE_MODE_REC709== ON            
                       case PICTURE_MODE_REC709:
                           ColorTemp = UserData.ucColorTemp_Rec709;break;
              #endif            
                       case PICTURE_MODE_SRGB:
                           ColorTemp = UserData.ucColorTemp_sRGB;break;
              #if ENABLE_PICTURE_MODE_CAD == ON
                       case PICTURE_MODE_CAD:
                           ColorTemp = UserData.ucColorTemp_CAD;break;
              #endif        
              #if ENABLE_PICTURE_MODE_ANIMATION == ON
                       case PICTURE_MODE_ANIMATION:
                           ColorTemp = UserData.ucColorTemp_Animation;break;
              #endif
              #if ENABLE_PRESENTATION_MODE == ON
                       case PICTURE_MODE_PRESENTATION:
                           ColorTemp = UserData.ucColorTemp_Presentation;break;
              #endif        
                       case PICTURE_MODE_LOW_BL:
                           switch(UserData.ucLBLMode){
                               case MULTIMEDIA:
                                   ColorTemp = UserData.ucColorTemp_LBL_Mult;break;
                               case WEB_SURFING:
                                   ColorTemp = UserData.ucColorTemp_LBL_Web;break;
                               case OFFICE:
                                   ColorTemp = UserData.ucColorTemp_LBL_Office;break;
                               case READING:
                                   ColorTemp = UserData.ucColorTemp_LBL_Read;break;
                               default:break;
                           }
                           break;
              #if ENABLE_PICTURE_MODE_MOVIE == ON           
                       case PICTURE_MODE_MOVIE:
                           ColorTemp = UserData.ucColorTemp_Movie;break;            
              #endif    
              #if ENABLE_PICTURE_MODE_GAME == ON    
                       case PICTURE_MODE_GAME:
                           ColorTemp = UserData.ucColorTemp_Game;break;            
              #endif    
              #if ENABLE_PICTURE_MODE_PHOTO== ON       
                       case PICTURE_MODE_PHOTO:
                           ColorTemp = UserData.ucColorTemp_Photo;break;            
              #endif    
              #if ENABLE_PICTURE_MODE_DARKROOM == ON
                       case PICTURE_MODE_DARKROOM:
                           ColorTemp = UserData.ucColorTemp_DarkRoom;break;            
              #endif        
                       case PICTURE_MODE_ECO:
                           ColorTemp = UserData.ucColorTemp_Standard;break; 
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 58  

              #if ENABLE_PICTURE_MODE_MBOOK == ON
                       case PICTURE_MODE_MBOOK:
                           ColorTemp = UserData.ucColorTemp_MBOOK;break; 
              #endif
                       case PICTURE_MODE_USER:
                           ColorTemp = UserData.ucColorTemp_USER;break; 
                           
                       default:break;            
                   }
                
                  //printf("-->CT %bx\r\n",ColorTemp);
                  return ColorTemp;
              }
              #else
              UCHAR GetColorTempature(void)
              {
                  UCHAR ColorTemp;
                
                  if(UserData.ucBFMode == PICTURE_MODE_STANDARD){
                      ColorTemp = UserData.ucColorTemp_Standard;
                  }else if(UserData.ucBFMode == PICTURE_MODE_USER){
                      ColorTemp = UserData.ucColorTemp_USER;
                  }
                  if(UserData.ucBFMode == PICTURE_MODE_ECO
              #if ENABLE_PICTURE_MODE_MOVIE == ON               
                      || UserData.ucBFMode == PICTURE_MODE_MOVIE
              #endif        
              #if ENABLE_PICTURE_MODE_ANIMATION== ON
                      || UserData.ucBFMode == PICTURE_MODE_ANIMATION
              #endif
              #if ENABLE_PICTURE_MODE_MBOOK == ON
                      || UserData.ucBFMode == PICTURE_MODE_MBOOK
              #endif        
                      ){
                      ColorTemp = CLRTMP_6500K;
                  }
                  else if(UserData.ucBFMode == PICTURE_MODE_SRGB){
                      ColorTemp = CLRTMP_6500K;
                  }
              #if ENABLE_PICTURE_MODE_PHOTO== ON           
                  else if(UserData.ucBFMode == PICTURE_MODE_PHOTO){
                      ColorTemp = CLRTMP_9300K;
                  }
              #endif    
                  else if(FALSE
              #if ENABLE_PICTURE_MODE_CAD == ON
                      || UserData.ucBFMode == PICTURE_MODE_CAD 
              #endif
              #if ENABLE_PRESENTATION_MODE == ON
                      || UserData.ucBFMode == PICTURE_MODE_PRESENTATION
              #endif        
                      ){
                      ColorTemp = CLRTMP_5800K;
                  }
                  //printf("-->CT %bx\r\n",ColorTemp);
                  return ColorTemp;
              }
              #endif
              #endif
3516          #if OSDTYPE == OSD_BENQ_V2
3517          UCHAR GetGammaNum(void)
3518          {
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 59  

3519   1        UCHAR GammaTemp;
3520   1            switch(UserData.ucBFMode){
3521   2                case PICTURE_MODE_STANDARD:
3522   2                    GammaTemp = UserData.ucGammaNum_Standard;break;
3523   2      #if ENABLE_PICTURE_MODE_REC709== ON            
3524   2                case PICTURE_MODE_REC709:
3525   2                    GammaTemp = UserData.ucGammaNum_Rec709;break;
3526   2      #endif            
3527   2                case PICTURE_MODE_SRGB:
3528   2                    GammaTemp = UserData.ucGammaNum_sRGB;break;
3529   2      #if ENABLE_PICTURE_MODE_CAD == ON
3530   2                case PICTURE_MODE_CAD:
3531   2                    GammaTemp = UserData.ucGammaNum_CAD;break;
3532   2      #endif        
3533   2      #if ENABLE_PICTURE_MODE_ANIMATION == ON
3534   2                case PICTURE_MODE_ANIMATION:
3535   2                    GammaTemp = UserData.ucGammaNum_Animation;break;
3536   2      #endif
3537   2      #if ENABLE_PRESENTATION_MODE == ON
                        case PICTURE_MODE_PRESENTATION:
                            GammaTemp = UserData.ucGammaNum_Presentation;break;
              #endif        
3541   2                case PICTURE_MODE_LOW_BL:
3542   2                    switch(UserData.ucLBLMode){
3543   3                        case MULTIMEDIA:
3544   3                            GammaTemp = UserData.ucGammaNum_LBL_Mult;break;
3545   3                        case WEB_SURFING:
3546   3                            GammaTemp = UserData.ucGammaNum_LBL_Web;break;
3547   3                        case OFFICE:
3548   3                            GammaTemp = UserData.ucGammaNum_LBL_Office;break;
3549   3                        case READING:
3550   3                            GammaTemp = UserData.ucGammaNum_LBL_Read;break;
3551   3                        default:break;
3552   3                    }
3553   2                    break;
3554   2      #if ENABLE_PICTURE_MODE_MOVIE == ON           
3555   2                case PICTURE_MODE_MOVIE:
3556   2                    GammaTemp = UserData.ucGammaNum_Movie;break;            
3557   2      #endif    
3558   2      #if ENABLE_PICTURE_MODE_GAME == ON    
3559   2                case PICTURE_MODE_GAME:
3560   2                    GammaTemp = UserData.ucGammaNum_Game;break;            
3561   2      #endif    
3562   2      #if ENABLE_PICTURE_MODE_PHOTO== ON       
3563   2                case PICTURE_MODE_PHOTO:
3564   2                    GammaTemp = UserData.ucGammaNum_Photo;break;            
3565   2      #endif    
3566   2      #if ENABLE_PICTURE_MODE_DARKROOM == ON
3567   2                case PICTURE_MODE_DARKROOM:
3568   2                    GammaTemp = UserData.ucGammaNum_DarkRoom;break;            
3569   2      #endif        
3570   2                case PICTURE_MODE_ECO:
3571   2                    GammaTemp = UserData.ucGammaNum_Standard;break; 
3572   2      #if ENABLE_PICTURE_MODE_MBOOK == ON
3573   2                case PICTURE_MODE_MBOOK:
3574   2                    GammaTemp = UserData.ucGammaNum_MBOOK;break; 
3575   2      #endif
3576   2                case PICTURE_MODE_USER:
3577   2                    GammaTemp = UserData.ucGammaNum_USER;break; 
3578   2                    
3579   2                default:break;            
3580   2            }
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 60  

3581   1      #if 0  
                  if(UserData.ucBFMode == PICTURE_MODE_STANDARD){
                      GammaTemp = UserData.ucGammaNum_Standard;
                  }
                  else if(UserData.ucBFMode == PICTURE_MODE_USER){
                      GammaTemp = UserData.ucGammaNum_USER;
                  }
                  else{
                      GammaTemp = UserData.ucGammaNum;
                  }
                  //printf("-->Gamma %bx\r\n",GammaTemp);
              #endif    
3593   1          return GammaTemp;
3594   1      }
3595          
3596          void SetGammaNum(UCHAR GammaNum)
3597          {
3598   1          switch(UserData.ucBFMode){
3599   2              case PICTURE_MODE_STANDARD:
3600   2                  UserData.ucGammaNum_Standard = GammaNum;break;
3601   2      #if ENABLE_PICTURE_MODE_REC709== ON            
3602   2              case PICTURE_MODE_REC709:
3603   2                  UserData.ucGammaNum_Rec709 = GammaNum;break;
3604   2      #endif            
3605   2              case PICTURE_MODE_SRGB:
3606   2                  UserData.ucGammaNum_sRGB = GammaNum;break;
3607   2      #if ENABLE_PICTURE_MODE_CAD == ON
3608   2              case PICTURE_MODE_CAD:
3609   2                  UserData.ucGammaNum_CAD = GammaNum;break;
3610   2      #endif        
3611   2      #if ENABLE_PICTURE_MODE_ANIMATION == ON
3612   2              case PICTURE_MODE_ANIMATION:
3613   2                  UserData.ucGammaNum_Animation = GammaNum;break;
3614   2      #endif
3615   2      #if ENABLE_PRESENTATION_MODE == ON
                      case PICTURE_MODE_PRESENTATION:
                          UserData.ucGammaNum_Presentation = GammaNum;break;
              #endif        
3619   2              case PICTURE_MODE_LOW_BL:
3620   2                  switch(UserData.ucLBLMode){
3621   3                      case MULTIMEDIA:
3622   3                          UserData.ucGammaNum_LBL_Mult = GammaNum;break;
3623   3                      case WEB_SURFING:
3624   3                          UserData.ucGammaNum_LBL_Web = GammaNum;break;
3625   3                      case OFFICE:
3626   3                          UserData.ucGammaNum_LBL_Office = GammaNum;break;
3627   3                      case READING:
3628   3                          UserData.ucGammaNum_LBL_Read = GammaNum;break;
3629   3                      default:break;
3630   3                  }
3631   2                  break;
3632   2      #if ENABLE_PICTURE_MODE_MOVIE == ON           
3633   2              case PICTURE_MODE_MOVIE:
3634   2                  UserData.ucGammaNum_Movie = GammaNum;break;            
3635   2      #endif    
3636   2      #if ENABLE_PICTURE_MODE_GAME == ON    
3637   2              case PICTURE_MODE_GAME:
3638   2                  UserData.ucGammaNum_Game = GammaNum;break;            
3639   2      #endif    
3640   2      #if ENABLE_PICTURE_MODE_PHOTO== ON       
3641   2              case PICTURE_MODE_PHOTO:
3642   2                  UserData.ucGammaNum_Photo = GammaNum;break;            
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 61  

3643   2      #endif    
3644   2      #if ENABLE_PICTURE_MODE_DARKROOM == ON
3645   2              case PICTURE_MODE_DARKROOM:
3646   2                  UserData.ucGammaNum_DarkRoom = GammaNum;break;            
3647   2      #endif        
3648   2              case PICTURE_MODE_ECO:
3649   2                  UserData.ucGammaNum_Standard = GammaNum;break; 
3650   2      #if ENABLE_PICTURE_MODE_MBOOK == ON
3651   2              case PICTURE_MODE_MBOOK:
3652   2                  UserData.ucGammaNum_MBOOK = GammaNum;break; 
3653   2      #endif
3654   2              case PICTURE_MODE_USER:
3655   2                  UserData.ucGammaNum_USER = GammaNum;break; 
3656   2                  
3657   2              default:break;            
3658   2          }
3659   1          #if 0
                  if(UserData.ucBFMode == PICTURE_MODE_STANDARD){
                      UserData.ucGammaNum_Standard = GammaNum;
                  }
                  else if(UserData.ucBFMode == PICTURE_MODE_USER){
                      UserData.ucGammaNum_USER = GammaNum;
                  }
                  else{
                      UserData.ucGammaNum = GammaNum;
                  }
                  #endif
3670   1      }
3671          
3672          void SetPictureMode(UCHAR mode)
3673          {
3674   1          UCHAR  ContrastTemp,ColorTempTemp, DBCModeTemp;
3675   1        
3676   1          ContrastTemp = UserData.ucContrast;
3677   1          ColorTempTemp = UserData.ucColorTemp;
3678   1          DBCModeTemp = UserData.bDBCMode;
3679   1          
3680   1          if(UserData.ucBFMode != PICTURE_MODE_ECO){
3681   2              UserData.bDBCMode = OFF;
3682   2          }
3683   1        
3684   1          switch(mode) {
3685   2              case PICTURE_MODE_SRGB:
3686   2                  
3687   2                  if(Custom_System.bDualviewAdjust == TRUE){
3688   3                      UserData.ucContrast = UserData.ucContrast_sRGB;                
3689   3                      UserData.ucColorTemp = UserData.ucColorTemp_sRGB;            
3690   3                  }
3691   2                  else{
3692   3                      UserData.ucBrightness = UserData.ucBrightness_sRGB;
3693   3                      UserData.ucContrast = UserData.ucContrast_sRGB;
3694   3                      UserData.ucColorTemp = UserData.ucColorTemp_sRGB;            
3695   3                      UserData.ucSharpness = UserData.ucSharpness_sRGB;
3696   3                      UserData.ucODMode = UserData.ucODMode_sRGB;
3697   3                  }
3698   2                  //UserData.ucGammaNum = nGamma_22;
3699   2                  //SetGammaNum(nGamma_22);
3700   2                  Standard_Gamma = 1;
3701   2                  break;
3702   2      #if ENABLE_PICTURE_MODE_CAD == ON
3703   2              case PICTURE_MODE_CAD: 
3704   2                  if(Custom_System.bDualviewAdjust == TRUE){
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 62  

3705   3                      UserData.ucContrast = UserData.ucContrast_CAD;                
3706   3                      UserData.ucColorTemp = UserData.ucColorTemp_CAD;            
3707   3                  }
3708   2                  else{
3709   3                      UserData.ucBrightness = UserData.ucBrightness_CAD;
3710   3                      UserData.ucContrast = UserData.ucContrast_CAD;
3711   3                      UserData.ucColorTemp = UserData.ucColorTemp_CAD;            
3712   3                      UserData.ucSharpness = UserData.ucSharpness_CAD;
3713   3                      UserData.ucODMode = UserData.ucODMode_CAD;
3714   3                  }          
3715   2                  //UserData.ucGammaNum = nGamma_22;
3716   2                  //SetGammaNum(nGamma_22);
3717   2                  Standard_Gamma = 1; 
3718   2                  if(UserData.bSensEyeDemo == TRUE)
3719   2                  {
3720   3                       SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
3721   3                  }
3722   2                  break;
3723   2      #endif
3724   2      #if ENABLE_PICTURE_MODE_ANIMATION == ON
3725   2              case PICTURE_MODE_ANIMATION:            
3726   2                  if(Custom_System.bDualviewAdjust == TRUE){
3727   3                      UserData.ucContrast = UserData.ucContrast_Animation;                
3728   3                      UserData.ucColorTemp = UserData.ucColorTemp_Animation;            
3729   3                  }
3730   2                  else{
3731   3                      UserData.ucBrightness = UserData.ucBrightness_Animation;
3732   3                      UserData.ucContrast = UserData.ucContrast_Animation;
3733   3                      UserData.ucColorTemp = UserData.ucColorTemp_Animation;            
3734   3                      UserData.ucSharpness = UserData.ucSharpness_Animation;
3735   3                      UserData.ucODMode = UserData.ucODMode_Animation;
3736   3                  } 
3737   2                  //UserData.ucGammaNum = nGamma_22;
3738   2                  //SetGammaNum(nGamma_22);
3739   2                  Standard_Gamma = 1;
3740   2                  ////////////////////////////////////////
3741   2                  UserSetAnimation();
3742   2      
3743   2                  if(UserData.bSensEyeDemo == TRUE){
3744   3                       SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
3745   3                  }
3746   2                  break;
3747   2      #endif
3748   2      #if ENABLE_PRESENTATION_MODE == ON
                      case PICTURE_MODE_PRESENTATION:            
                          if(Custom_System.bDualviewAdjust == TRUE){
                              UserData.ucContrast = UserData.ucContrast_Presentation;
                              UserData.ucColorTemp = UserData.ucColorTemp_Presentation;            
                          }
                          else{
                              UserData.ucBrightness = UserData.ucBrightness_Presentation;
                              UserData.ucContrast = UserData.ucContrast_Presentation;
                              UserData.ucColorTemp = UserData.ucColorTemp_Presentation;            
                              UserData.ucSharpness = UserData.ucSharpness_Presentation;
                              UserData.ucODMode = UserData.ucODMode_Presentation;
                          }
                          //UserData.ucGammaNum = nGamma_20;
                          //SetGammaNum(nGamma_20);
                          Standard_Gamma = 0;         
                          break;
              #endif      
3766   2              case PICTURE_MODE_STANDARD:
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 63  

3767   2                  if(Custom_System.bDualviewAdjust == TRUE){
3768   3                      UserData.ucContrast = UserData.ucContrast_Standard;
3769   3                      UserData.ucColorTemp = UserData.ucColorTemp_Standard;            
3770   3                  }
3771   2                  else{
3772   3                      UserData.ucBrightness = UserData.ucBrightness_Standard;
3773   3                      UserData.ucContrast = UserData.ucContrast_Standard;
3774   3                      UserData.ucColorTemp = UserData.ucColorTemp_Standard;            
3775   3                      UserData.ucSharpness = UserData.ucSharpness_Standard;
3776   3                      UserData.ucODMode = UserData.ucODMode_Standard;
3777   3                  }
3778   2                  //SetGammaNum(UserData.ucGammaNum_Standard);
3779   2                  Standard_Gamma = 0;         
3780   2                  break;
3781   2              case PICTURE_MODE_LOW_BL:
3782   2                  // SetLBLMode();
3783   2                  break;
3784   2      #if ENABLE_PICTURE_MODE_MOVIE == ON                   
3785   2              case PICTURE_MODE_MOVIE:
3786   2                  if(Custom_System.bDualviewAdjust == TRUE){
3787   3                      UserData.ucContrast = UserData.ucContrast_Movie;
3788   3                      UserData.ucColorTemp = UserData.ucColorTemp_Movie;            
3789   3                  }
3790   2                  else{
3791   3                      UserData.ucBrightness = UserData.ucBrightness_Movie;
3792   3                      UserData.ucContrast = UserData.ucContrast_Movie;
3793   3                      UserData.ucColorTemp = UserData.ucColorTemp_Movie;            
3794   3                      UserData.ucSharpness = UserData.ucSharpness_Movie;
3795   3                      UserData.ucODMode = UserData.ucODMode_Movie;
3796   3                  }         
3797   2                  //SetGammaNum(nGamma_20);
3798   2                  Standard_Gamma = 0;         
3799   2                  if(UserData.bSensEyeDemo == TRUE)
3800   2                  {
3801   3                       SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
3802   3                  }
3803   2                  break;
3804   2      #endif
3805   2      #if ENABLE_PICTURE_MODE_PHOTO== ON       
3806   2              case PICTURE_MODE_PHOTO:
3807   2                          UserData.ucContrast = UserData.ucContrast_Photo;
3808   2                          UserData.ucColorTemp = UserData.ucColorTemp_Photo; 
3809   2                      if(Custom_System.bDualviewAdjust == FALSE){
3810   3                      UserData.ucBrightness = UserData.ucBrightness_Photo;
3811   3                      UserData.ucSharpness = UserData.ucSharpness_Photo;
3812   3                      UserData.ucODMode = UserData.ucODMode_Photo;
3813   3                      }
3814   2                  //SetGammaNum(nGamma_26);
3815   2                  Standard_Gamma = 0;
3816   2                  if(UserData.bSensEyeDemo == TRUE)
3817   2                  {
3818   3                       SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
3819   3                  }
3820   2                  break;
3821   2      #endif            
3822   2              case PICTURE_MODE_ECO:
3823   2                  UserData.bDBCMode = ON;
3824   2                      UserData.ucContrast = UserDataDefault.ucContrast_Standard;
3825   2                      UserData.ucColorTemp = UserData.ucColorTemp_Standard;  
3826   2                  if(Custom_System.bDualviewAdjust == FALSE){
3827   3                  UserData.ucBrightness = UserDataDefault.ucBrightness_Standard;
3828   3                  UserData.ucSharpness = UserDataDefault.ucSharpness_Standard;
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 64  

3829   3                  UserData.ucODMode = UserData.ucODMode_Standard;
3830   3                  }
3831   2                  //SetGammaNum(nGamma_22);
3832   2                  Standard_Gamma = 1;         
3833   2                 // UserData.ucDynamicContrast = 0;            
3834   2                  break;
3835   2      #if ENABLE_PICTURE_MODE_GAME == ON
3836   2              case PICTURE_MODE_GAME:
3837   2                      UserData.ucContrast = UserData.ucContrast_Game;
3838   2                      UserData.ucColorTemp = UserData.ucColorTemp_Game;  
3839   2                  if(Custom_System.bDualviewAdjust == FALSE){
3840   3                  UserData.ucBrightness = UserData.ucBrightness_Game;
3841   3                  UserData.ucSharpness = UserData.ucSharpness_Game;
3842   3                  UserData.ucODMode = UserData.ucODMode_Game;
3843   3                  }
3844   2                  //SetGammaNum(nGamma_22);
3845   2                  Standard_Gamma = 0;
3846   2                  if(UserData.bSensEyeDemo == TRUE)
3847   2                  {
3848   3                       SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
3849   3                  }            
3850   2                  break;            
3851   2      #endif            
3852   2      #if ENABLE_PICTURE_MODE_MBOOK == ON
3853   2              case PICTURE_MODE_MBOOK:
3854   2                          UserData.ucContrast = UserData.ucContrast_MBOOK;
3855   2                          UserData.ucColorTemp = UserData.ucColorTemp_MBOOK;  
3856   2                      if(Custom_System.bDualviewAdjust == FALSE){
3857   3                      UserData.ucBrightness = UserData.ucBrightness_MBOOK;
3858   3                      UserData.ucSharpness = UserData.ucSharpness_MBOOK;
3859   3                      UserData.ucODMode = UserData.ucODMode_MBOOK;
3860   3                      }
3861   2                  Standard_Gamma = 0;
3862   2                  if(UserData.bSensEyeDemo == TRUE)
3863   2                  {
3864   3                       SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
3865   3                  }
3866   2                  break;
3867   2      #endif
3868   2              case PICTURE_MODE_USER:
3869   2                      UserData.ucContrast = UserData.ucContrast_USER;
3870   2                      UserData.ucColorTemp = UserData.ucColorTemp_USER;            
3871   2                  if(Custom_System.bDualviewAdjust == FALSE){
3872   3                      UserData.ucBrightness = UserData.ucBrightness_USER;
3873   3                      UserData.ucSharpness = UserData.ucSharpness_USER;
3874   3                      UserData.ucODMode = UserData.ucODMode_USER;
3875   3                  }
3876   2                  Standard_Gamma = 0;
3877   2                  break;
3878   2      #if ENABLE_PICTURE_MODE_REC709 == ON       
3879   2              case PICTURE_MODE_REC709:
3880   2                          UserData.ucContrast = UserData.ucContrast_Rec709;
3881   2                          UserData.ucColorTemp = UserData.ucColorTemp_Rec709;            
3882   2                      if(Custom_System.bDualviewAdjust == FALSE){
3883   3                      UserData.ucBrightness = UserData.ucBrightness_Rec709;
3884   3                      UserData.ucSharpness = UserData.ucSharpness_Rec709;
3885   3                      UserData.ucODMode = UserData.ucODMode_Rec709;
3886   3                      }
3887   2                  Standard_Gamma = 0;
3888   2                  if(UserData.bSensEyeDemo == TRUE)
3889   2                  {
3890   3                       SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 65  

3891   3                  }
3892   2                  break;
3893   2      #endif            
3894   2      #if ENABLE_PICTURE_MODE_DARKROOM == ON       
3895   2              case PICTURE_MODE_DARKROOM:
3896   2                      UserData.ucContrast = UserData.ucContrast_DarkRoom;
3897   2                      UserData.ucColorTemp = UserData.ucColorTemp_DarkRoom;            
3898   2                      if(Custom_System.bDualviewAdjust == FALSE){
3899   3                      UserData.ucBrightness = UserData.ucBrightness_DarkRoom;
3900   3                      UserData.ucSharpness = UserData.ucSharpness_DarkRoom;
3901   3                      UserData.ucODMode = UserData.ucODMode_DarkRoom;
3902   3                      }
3903   2                  Standard_Gamma = 0;
3904   2                  if(UserData.bSensEyeDemo == TRUE)
3905   2                  {
3906   3                       SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
3907   3                  }
3908   2                  break;
3909   2      #endif
3910   2              default:
3911   2                  break;
3912   2          }
3913   1          SetDemo();
3914   1          if(mode == PICTURE_MODE_LOW_BL){
3915   2              SetLBLMode();
3916   2          }
3917   1          else{
3918   2              UserSetBrightness();
3919   2              UserSetContrast();        
3920   2              UserSetColorTemp();      
3921   2              UserSetGamma();
3922   2          }
3923   1          UserSetSharpness();
3924   1          
3925   1          if(DBCModeTemp != UserData.bDBCMode)
3926   1              UserSetDBC(); 
3927   1       
3928   1          UserSetDCR();  
3929   1          
3930   1          if(Custom_System.bDualviewAdjust == TRUE){
3931   2          UserData.ucContrast = ContrastTemp;
3932   2          UserData.ucColorTemp = ColorTempTemp;
3933   2          }
3934   1      }
3935          
3936          #else
              UCHAR GetGammaNum(void)
              {
                UCHAR GammaTemp;
                  if(UserData.ucBFMode == PICTURE_MODE_STANDARD){
                      GammaTemp = UserData.ucGammaNum_Standard;
                  }
                  else if(UserData.ucBFMode == PICTURE_MODE_USER){
                      GammaTemp = UserData.ucGammaNum_USER;
                  }
                  else{
                      GammaTemp = UserData.ucGammaNum;
                  }
                  //printf("-->Gamma %bx\r\n",GammaTemp);
                  return GammaTemp;
              }
              
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 66  

              void SetGammaNum(UCHAR GammaNum)
              {
                  if(UserData.ucBFMode == PICTURE_MODE_STANDARD){
                      UserData.ucGammaNum_Standard = GammaNum;
                  }
                  else if(UserData.ucBFMode == PICTURE_MODE_USER){
                      UserData.ucGammaNum_USER = GammaNum;
                  }
                  else{
                      UserData.ucGammaNum = GammaNum;
                  }
              }
              
              void SetPictureMode(UCHAR mode)
              {
                  UserData.bDBCMode = OFF;
                  //UserData.ucColorTemp = CLRTMP_6500K;
                  switch(mode) {
                      case PICTURE_MODE_SRGB:
                          UserData.ucBrightness = UserData.ucBrightness_sRGB;
                          UserData.ucContrast = UserData.ucContrast_sRGB;
                          UserData.ucSharpness = UserData.ucSharpness_sRGB;
                          //UserData.ucGammaNum = nGamma_22;
                          SetGammaNum(nGamma_22);
                          Standard_Gamma = 1;
                          break;
              #if ENABLE_PICTURE_MODE_CAD == ON
                      case PICTURE_MODE_CAD: 
                          UserData.ucBrightness = UserData.ucBrightness_CAD;
                          UserData.ucContrast = UserData.ucContrast_CAD;
                          //UserData.ucColorTemp = UserData.ucColorTemp_CAD;        
                          UserData.ucSharpness = UserData.ucSharpness_CAD;
                          //UserData.ucGammaNum = nGamma_22;
                          SetGammaNum(nGamma_22);
                          Standard_Gamma = 1; 
                          if(UserData.bSensEyeDemo == TRUE)
                          {
                               SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
                          }
                          break;
              #endif
              #if ENABLE_PICTURE_MODE_ANIMATION == ON
                      case PICTURE_MODE_ANIMATION:            
                          UserData.ucBrightness = UserData.ucBrightness_Animation;
                          UserData.ucContrast = UserData.ucContrast_Animation;
                          //UserData.ucColorTemp = UserData.ucColorTemp_Animation;        
                          UserData.ucSharpness = UserData.ucSharpness_Animation;
                          //UserData.ucGammaNum = nGamma_22;
                          SetGammaNum(nGamma_22);
                          Standard_Gamma = 1;
                          ////////////////////////////////////////
                          UserSetAnimation();
              
                          if(UserData.bSensEyeDemo == TRUE){
                               SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
                          }
                          break;
              #endif
              #if ENABLE_PRESENTATION_MODE == ON
                      case PICTURE_MODE_PRESENTATION:            
                          UserData.ucBrightness = UserData.ucBrightness_Presentation;
                          UserData.ucContrast = UserData.ucContrast_Presentation;
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 67  

                         // UserData.ucColorTemp = UserData.ucColorTemp_Presentation;        
                          UserData.ucSharpness = UserData.ucSharpness_Presentation;
                          //UserData.ucGammaNum = nGamma_20;
                          SetGammaNum(nGamma_20);
                          Standard_Gamma = 0;         
                          break;
              #endif      
                      case PICTURE_MODE_STANDARD:
                          UserData.ucBrightness = UserData.ucBrightness_Standard;
                          UserData.ucContrast = UserData.ucContrast_Standard;
                          UserData.ucColorTemp = UserData.ucColorTemp_Standard;        
                          UserData.ucSharpness = UserData.ucSharpness_Standard;
                          SetGammaNum(UserData.ucGammaNum_Standard);
                          Standard_Gamma = 0;         
                          break;
                      case PICTURE_MODE_LOW_BL:
                          // SetLBLMode();
                          break;
              #if ENABLE_PICTURE_MODE_MOVIE == ON                   
                      case PICTURE_MODE_MOVIE:
                          UserData.ucBrightness = UserData.ucBrightness_Movie;
                          UserData.ucContrast = UserData.ucContrast_Movie;
                          UserData.ucSharpness = UserData.ucSharpness_Movie;
                          SetGammaNum(nGamma_20);
                          Standard_Gamma = 0;         
                          if(UserData.bSensEyeDemo == TRUE)
                          {
                               SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
                          }
                          break;
              #endif
              #if ENABLE_PICTURE_MODE_PHOTO== ON       
                      case PICTURE_MODE_PHOTO:
                          UserData.ucBrightness = UserData.ucBrightness_Photo;
                          UserData.ucContrast = UserData.ucContrast_Photo;
                          UserData.ucSharpness = UserData.ucSharpness_Photo;
                          SetGammaNum(nGamma_26);
                          Standard_Gamma = 0;
                          if(UserData.bSensEyeDemo == TRUE)
                          {
                               SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
                          }
                          break;
              #endif            
                      case PICTURE_MODE_ECO:
                          UserData.bDBCMode = ON;
                          UserData.ucBrightness = UserDataDefault.ucBrightness_Standard;
                          UserData.ucContrast = UserDataDefault.ucContrast_Standard;
                          UserData.ucSharpness = UserDataDefault.ucSharpness_Standard;
                          SetGammaNum(nGamma_22);
                          Standard_Gamma = 1;         
                         // UserData.ucDynamicContrast = 0;            
                          break;
              #if ENABLE_PICTURE_MODE_GAME == ON
                      case PICTURE_MODE_GAME:
                          UserData.ucBrightness = UserData.ucBrightness_Game;
                          UserData.ucContrast = UserData.ucContrast_Game;
                          UserData.ucSharpness = UserData.ucSharpness_Game;
                          SetGammaNum(nGamma_22);
                          Standard_Gamma = 0;
                          if(UserData.bSensEyeDemo == TRUE)
                          {
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 68  

                               SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
                          }            
                          break;            
              #endif            
              #if ENABLE_PICTURE_MODE_MBOOK == ON
                      case PICTURE_MODE_MBOOK:
                          UserData.ucBrightness = UserData.ucBrightness_MBOOK;
                          UserData.ucContrast = UserData.ucContrast_MBOOK;
                          UserData.ucSharpness = UserData.ucSharpness_MBOOK;
                          SetGammaNum(nGamma_18);
                          Standard_Gamma = 0;
                          if(UserData.bSensEyeDemo == TRUE)
                          {
                               SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
                          }
                          break;
              #endif
                      case PICTURE_MODE_USER:
                          UserData.ucBrightness = UserData.ucBrightness_USER;
                          UserData.ucContrast = UserData.ucContrast_USER;
                          UserData.ucSharpness = UserData.ucSharpness_USER;
                          UserData.ucColorTemp = UserData.ucColorTemp_USER; 
                          //UserData.ucGammaNum = UserData.ucGammaNum_USER;
                          SetGammaNum(UserData.ucGammaNum_USER);
                          Standard_Gamma = 0;
                          break;
              #if ENABLE_PICTURE_MODE_REC709 == ON       
                      case PICTURE_MODE_REC709:
                          UserData.ucBrightness = UserData.ucBrightness_Rec709;
                          UserData.ucContrast = UserData.ucContrast_Rec709;
                          UserData.ucSharpness = UserData.ucSharpness_Rec709;
                          SetGammaNum(nGamma_26);
                          Standard_Gamma = 0;
                          if(UserData.bSensEyeDemo == TRUE)
                          {
                               SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
                          }
                          break;
              #endif            
              #if ENABLE_PICTURE_MODE_DARKROOM == ON       
                      case PICTURE_MODE_DARKROOM:
                          UserData.ucBrightness = UserData.ucBrightness_DarkRoom;
                          UserData.ucContrast = UserData.ucContrast_DarkRoom;
                          UserData.ucSharpness = UserData.ucSharpness_DarkRoom;
                          SetGammaNum(nGamma_26);
                          Standard_Gamma = 0;
                          if(UserData.bSensEyeDemo == TRUE)
                          {
                               SetSenseEyeLeftMode(PICTURE_MODE_STANDARD);
                          }
                          break;
              #endif
                      default:
                          break;
                  }
                  
                  SetDemo();
                  if(mode == PICTURE_MODE_LOW_BL){
                    SetLBLMode();
                  }
                  else{
                      UserSetBrightness();
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 69  

                      UserSetContrast();        
                      UserSetColorTemp();      
                      UserSetGamma();
                 }
                 
                 UserSetSharpness();
                 UserSetDBC(); 
                 UserSetDCR();        
              }
              
              #endif
4150          void SetLBLMode(void)
4151          {
4152   1          switch(UserData.ucLBLMode) {
4153   2              case MULTIMEDIA:
4154   2               if(Custom_System.bDualviewAdjust == FALSE){
4155   3                  UserData.ucBrightness = UserData.ucBrightness_LBL_Mult;
4156   3               }
4157   2               UserData.ucContrast = UserData.ucContrast_LBL_Mult;
4158   2               SetGammaNum(nGamma_22);
4159   2               Standard_Gamma = 1;
4160   2           break;
4161   2              case WEB_SURFING:
4162   2               if(Custom_System.bDualviewAdjust == FALSE){
4163   3                  UserData.ucBrightness = UserData.ucBrightness_LBL_Web;
4164   3               }
4165   2               UserData.ucContrast = UserData.ucContrast_LBL_Web;
4166   2               SetGammaNum(nGamma_22);
4167   2               Standard_Gamma = 1;
4168   2           break;
4169   2              case OFFICE:
4170   2               if(Custom_System.bDualviewAdjust == FALSE){
4171   3                  UserData.ucBrightness = UserData.ucBrightness_LBL_Office;
4172   3               }
4173   2               UserData.ucContrast = UserData.ucContrast_LBL_Office;
4174   2               SetGammaNum(nGamma_22);      
4175   2               Standard_Gamma = 1;
4176   2           break;
4177   2              case READING:
4178   2               if(Custom_System.bDualviewAdjust == FALSE){
4179   3                  UserData.ucBrightness = UserData.ucBrightness_LBL_Read;
4180   3               }
4181   2               UserData.ucContrast = UserData.ucContrast_LBL_Read;
4182   2               SetGammaNum(nGamma_22);
4183   2               Standard_Gamma = 1;
4184   2           break;     
4185   2              default:
4186   2                  break;     
4187   2          }
4188   1          UserSetBrightness(); 
4189   1          UserSetContrast();
4190   1          UserSetColorTemp();  
4191   1          UserSetGamma();    
4192   1      }
4193          
4194          #if ENABLE_NVT_FGA == ON
              void BFAPI_GetRGBGainDependOnGamma(UCHAR mode, UCHAR *r, UCHAR *g , UCHAR *b)
              {
              
                  USHRT GammaTemp;
                  UCHAR CTGain[3];  
                  GammaTemp = GetGammaNum();
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 70  

                  
                  switch (mode) {
                      /*case CLRTMP_5000K:
                          r = CalibData.uc5000KRGain;
                          g = CalibData.uc5000KGGain;
                          b = CalibData.uc5000KBGain;
                          break;*/
                      default:
                      case CLRTMP_6500K:
                      LG_FGA_LoadColorTemp(GammaTemp, CT_6500K,&CTGain[0],&CTGain[1],&CTGain[2]); 
                          *r = CTGain[0];
                          *g = CTGain[1];
                          *b = CTGain[2];    
                          break;
                      /*case CLRTMP_7500K:
                          r = CalibData.uc7500KRGain;
                          g = CalibData.uc7500KGGain;
                          b = CalibData.uc7500KBGain;
                          break;*/
                      /*case CLRTMP_8200K:
                          r = CalibData.uc8200KRGain;
                          g = CalibData.uc8200KGGain;
                          b = CalibData.uc8200KBGain;
                          break;*/
                      case CLRTMP_9300K:
                      LG_FGA_LoadColorTemp(GammaTemp, CT_9300K,&CTGain[0],&CTGain[1],&CTGain[2]); 
                          *r = CTGain[0];
                          *g = CTGain[1];
                          *b = CTGain[2];    
                          break;
                      case CLRTMP_5800K:
                      LG_FGA_LoadColorTemp(GammaTemp, CT_5800K,&CTGain[0],&CTGain[1],&CTGain[2]); 
                          *r = CTGain[0];
                          *g = CTGain[1];
                          *b = CTGain[2];    
                          break;
                          
                      /*case CLRTMP_11500K:
                          r = CalibData.uc11500KRGain;
                          g = CalibData.uc11500KGGain;
                          b = CalibData.uc11500KBGain;
                          break;*/
                      case CLRTMP_sRGB:
                      LG_FGA_LoadColorTemp(GammaTemp, CT_6500K,&CTGain[0],&CTGain[1],&CTGain[2]); 
                          *r = CTGain[0];
                          *g = CTGain[1];
                          *b = CTGain[2];    
                          break;
                      case CLRTMP_USER:
                          *r = (USHRT)GetRGain255();
                          *g = (USHRT)GetGGain255();
                          *b = (USHRT)GetBGain255();
                          break;
                  };  
              
                
              }
              
              void SetLocalMatrix(void)
              {
                  UCHAR Gain[3];  
              
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 71  

                  UCHAR ActiceMode;
              #if ENABLE_PICTURE_DUAL_MODE == ON
                  UCHAR tempBFMode;
                  tempBFMode = DualViewPointoBFMode(UserData.ucDualViewMode);
                  if(Custom_System.bDualviewAdjust == TRUE){
                      ActiceMode = tempBFMode;   
                      BFAPI_SetActiveWindow(BF_WINDOW_2);    
                  }
                  else
              #endif   
                {
                       ActiceMode = UserData.ucBFMode;
                       BFAPI_SetActiveWindow(BF_WINDOW_1);     
                  }
                
                  switch(ActiceMode) {
              #if ENABLE_PICTURE_MODE_MOVIE == ON               
                      case PICTURE_MODE_MOVIE:
                          MTXAPI_EnableLocalMatrix(TRUE);    
                        BFAPI_GetRGBGainDependOnGamma(CLRTMP_6500K, &Gain[0],&Gain[1],&Gain[2]);      
                          MTXAPI_SetRGBGain(Gain[0],Gain[1],Gain[2]);
                          break;
              #endif            
              #if ENABLE_PICTURE_MODE_CAD == ON
                      case PICTURE_MODE_CAD: 
                          MTXAPI_EnableLocalMatrix(TRUE);                      
                        BFAPI_GetRGBGainDependOnGamma(CLRTMP_5800K, &Gain[0],&Gain[1],&Gain[2]);      
                          MTXAPI_SetRGBGain(Gain[0],Gain[1],Gain[2]);
                          break;
              #endif
              #if ENABLE_PICTURE_MODE_ANIMATION == ON
                      case PICTURE_MODE_ANIMATION:            
                          MTXAPI_EnableLocalMatrix(TRUE);                      
                        BFAPI_GetRGBGainDependOnGamma(CLRTMP_6500K, &Gain[0],&Gain[1],&Gain[2]);      
                          MTXAPI_SetRGBGain(Gain[0],Gain[1],Gain[2]);
                          break;
              #endif
              #if ENABLE_PRESENTATION_MODE == ON
                      case PICTURE_MODE_PRESENTATION:            
                          MTXAPI_EnableLocalMatrix(TRUE);                      
                        BFAPI_GetRGBGainDependOnGamma(CLRTMP_5800K, &Gain[0],&Gain[1],&Gain[2]);      
                          MTXAPI_SetRGBGain(Gain[0],Gain[1],Gain[2]);
                          break;
              #endif            
                   
              #if ENABLE_PICTURE_MODE_GAME == ON
                      case PICTURE_MODE_GAME:    
                          MTXAPI_EnableLocalMatrix(TRUE);                      
                        BFAPI_GetRGBGainDependOnGamma(CLRTMP_6500K, &Gain[0],&Gain[1],&Gain[2]);      
                          MTXAPI_SetRGBGain(Gain[0],Gain[1],Gain[2]);
                          break;    
              #endif     
              #if ENABLE_PICTURE_MODE_MBOOK == ON 
                      case PICTURE_MODE_MBOOK:
                          MTXAPI_EnableLocalMatrix(TRUE);                      
                        BFAPI_GetRGBGainDependOnGamma(CLRTMP_6500K, &Gain[0],&Gain[1],&Gain[2]);      
                          MTXAPI_SetRGBGain(Gain[0],Gain[1],Gain[2]);
                          break;     
              #endif
              #if ENABLE_PICTURE_MODE_PHOTO== ON  
                      case PICTURE_MODE_PHOTO: 
                          MTXAPI_EnableLocalMatrix(TRUE);                      
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 72  

                        BFAPI_GetRGBGainDependOnGamma(CLRTMP_9300K, &Gain[0],&Gain[1],&Gain[2]);
                          MTXAPI_SetRGBGain(Gain[0],Gain[1],Gain[2]);
                          break;     
              #endif            
                      case PICTURE_MODE_LOW_BL:    
                          MTXAPI_EnableLocalMatrix(TRUE);                      
                          switch(UserData.ucLBLMode) {
              #if ENABLE_LBL_BASE_FGA == OFF
                              case MULTIMEDIA:
                                  MTXAPI_SetRGBGain(DEF_MULTIMEDIA_RGain + 1,DEF_MULTIMEDIA_GGain + 1,DEF_MULTIMEDIA_BGa
             -in + 1);
                                  break;
                              case WEB_SURFING:
                                  MTXAPI_SetRGBGain(DEF_WEB_SURFING_RGain + 1,DEF_WEB_SURFING_GGain + 1,DEF_WEB_SURFING_
             -BGain + 1);
                                  break;
                              case OFFICE:
                                  MTXAPI_SetRGBGain(DEF_OFFICE_RGain + 1,DEF_OFFICE_GGain + 1,DEF_OFFICE_BGain + 1);
                                  break;
                              case READING:
                                  MTXAPI_SetRGBGain(DEF_READING_RGain + 1,DEF_READING_GGain + 1,DEF_READING_BGain + 1);
                                  break;
              #else  
                              case MULTIMEDIA:                 
                                  BFAPI_GetRGBGainDependOnGamma(CLRTMP_6500K, &Gain[0],&Gain[1],&Gain[2]);  
                                  MTXAPI_SetRGBGain(Gain[0] + DEF_MULTIMEDIA_RGain_Shift + 1, Gain[1] + DEF_MULTIMEDIA_G
             -Gain_Shift + 1, Gain[2] + DEF_MULTIMEDIA_BGain_Shift + 1);
                                  break;
                              case WEB_SURFING:                
                                  BFAPI_GetRGBGainDependOnGamma(CLRTMP_6500K, &Gain[0],&Gain[1],&Gain[2]);      
                                  MTXAPI_SetRGBGain(Gain[0] + DEF_WEB_SURFING_RGain_Shift + 1, Gain[1] + DEF_WEB_SURFING
             -_GGain_Shift + 1, Gain[2] + DEF_WEB_SURFING_BGain_Shift + 1);
                                  break;
                              case OFFICE:                
                                  BFAPI_GetRGBGainDependOnGamma(CLRTMP_6500K, &Gain[0],&Gain[1],&Gain[2]);      
                                  MTXAPI_SetRGBGain(Gain[0] + DEF_OFFICE_RGain_Shift + 1, Gain[1] + DEF_OFFICE_GGain_Shi
             -ft + 1, Gain[2] + DEF_OFFICE_BGain_Shift + 1);
                                  break;
                              case READING:                
                                  BFAPI_GetRGBGainDependOnGamma(CLRTMP_6500K, &Gain[0],&Gain[1],&Gain[2]);      
                                  MTXAPI_SetRGBGain(Gain[0] + DEF_READING_RGain_Shift + 1, Gain[1] + DEF_READING_GGain_S
             -hift + 1, Gain[2] + DEF_READING_BGain_Shift + 1);
              #endif
                              default:
                                  break;     
                          }    
                          break;     
              #if ENABLE_PICTURE_MODE_REC709 == ON       
                      case PICTURE_MODE_REC709:
                          MTXAPI_EnableLocalMatrix(TRUE);                      
                          BFAPI_GetRGBGainDependOnGamma(CLRTMP_6500K, &Gain[0],&Gain[1],&Gain[2]);      
                          MTXAPI_SetRGBGain(Gain[0],Gain[1],Gain[2]);            
                          break;
              #endif            
              #if ENABLE_PICTURE_MODE_DARKROOM == ON       
                      case PICTURE_MODE_DARKROOM:
                          MTXAPI_EnableLocalMatrix(TRUE);                      
                          BFAPI_GetRGBGainDependOnGamma(CLRTMP_6500K, &Gain[0],&Gain[1],&Gain[2]);      
                          MTXAPI_SetRGBGain(Gain[0],Gain[1],Gain[2]);            
                          break;
              #endif     
                      case PICTURE_MODE_SRGB:
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 73  

                          MTXAPI_EnableLocalMatrix(TRUE);                      
                          BFAPI_GetRGBGainDependOnGamma(CLRTMP_6500K, &Gain[0],&Gain[1],&Gain[2]);      
                          MTXAPI_SetRGBGain(Gain[0],Gain[1],Gain[2]);            
                          break;
                      case PICTURE_MODE_USER:
                          Gain[0] = (USHRT)GetRGain255();
                          Gain[1] = (USHRT)GetGGain255();
                          Gain[2] = (USHRT)GetBGain255();
                          if(UserData.bSensEyeDemo==PICTURE_DUALMODE_ON){
                              MTXAPI_EnableLocalMatrix(TRUE);  
                              MTXAPI_SetRGBGain(Gain[0],Gain[1],Gain[2]);            
                          }
                          else{
                              BFAPI_SetLocalMatrix(0);     
                              MTXAPI_EnableLocalMatrix(FALSE); 
                              // MTXAPI_SetRGBGain(Gain[0], Gain[1], Gain[2]);
                          }
                          break;
              
                      case PICTURE_MODE_STANDARD:
                      case PICTURE_MODE_ECO:
                          if(UserData.bSensEyeDemo==PICTURE_DUALMODE_ON){
                              MTXAPI_EnableLocalMatrix(TRUE);  
                              SetColorTemperature(UserData.ucColorTemp);
                          }
                          else{
                              BFAPI_SetLocalMatrix(0);     
                              MTXAPI_EnableLocalMatrix(FALSE); 
                          }
                          break;            
                      default:        
                          BFAPI_SetLocalMatrix(0);            
                          MTXAPI_EnableLocalMatrix(FALSE);          
                          break;     
                  }            
              }
              
              #else
4419          void SetLocalMatrix(void)
4420          {
4421   1          BFAPI_SetActiveWindow(BF_WINDOW_1); 
4422   1          switch(UserData.ucBFMode) {
4423   2              case PICTURE_MODE_MOVIE:
4424   2                    MTXAPI_EnableLocalMatrix(TRUE);           
4425   2                    //MTXAPI_SetRGBGain(DEF_6500KRGain + 1,DEF_6500KGGain + 1,DEF_6500KBGain + 1);
4426   2                    MTXAPI_SetRGBGain(CalibData.uc6500KRGain,CalibData.uc6500KGGain,CalibData.uc6500KBGain);  
4427   2         break;
4428   2              case PICTURE_MODE_GAME: 
4429   2                    MTXAPI_EnableLocalMatrix(TRUE);           
4430   2                    MTXAPI_SetRGBGain(CalibData.uc9300KRGain, CalibData.uc9300KGGain, CalibData.uc9300KBGain);
4431   2         break; 
4432   2      #if ENABLE_PICTURE_MODE_MBOOK == ON 
4433   2              case PICTURE_MODE_MBOOK:
4434   2                    MTXAPI_EnableLocalMatrix(TRUE);           
4435   2                    MTXAPI_SetRGBGain(DEF_6500KRGain + 1,DEF_6500KGGain + 1,DEF_6500KBGain + 1);          
4436   2         break;  
4437   2      #endif
4438   2              case PICTURE_MODE_PHOTO:  
4439   2                    MTXAPI_EnableLocalMatrix(TRUE);           
4440   2                    MTXAPI_SetRGBGain(CalibData.uc9300KRGain ,CalibData.uc9300KGGain ,CalibData.uc9300KBGain ); 
             -             
4441   2         break;  
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 74  

4442   2              case PICTURE_MODE_LOW_BL: 
4443   2                    MTXAPI_EnableLocalMatrix(TRUE);           
4444   2                       switch(UserData.ucLBLMode) {
4445   3                           case MULTIMEDIA:
4446   3                         MTXAPI_SetRGBGain(DEF_MULTIMEDIA_RGain + 1,DEF_MULTIMEDIA_GGain + 1,DEF_MULTIMEDIA_BGain
             - + 1);
4447   3                     break;
4448   3                           case WEB_SURFING:
4449   3                         MTXAPI_SetRGBGain(DEF_WEB_SURFING_RGain + 1,DEF_WEB_SURFING_GGain + 1,DEF_WEB_SURFING_B
             -Gain + 1);
4450   3                     break;
4451   3                           case OFFICE:
4452   3                         MTXAPI_SetRGBGain(DEF_OFFICE_RGain + 1,DEF_OFFICE_GGain + 1,DEF_OFFICE_BGain + 1);
4453   3                     break;
4454   3                           case READING:
4455   3                         MTXAPI_SetRGBGain(DEF_READING_RGain + 1,DEF_READING_GGain + 1,DEF_READING_BGain + 1);
4456   3                     break;  
4457   3                           default:
4458   3                               break;  
4459   3                       }      
4460   2         break;  
4461   2              default:    
4462   2                    BFAPI_SetLocalMatrix(0);      
4463   2                    MTXAPI_EnableLocalMatrix(FALSE);      
4464   2                  break;   
4465   2          }            
4466   1      }
4467          
4468          
4469          #endif
4470          
4471          
4472          #if ENABLE_PICTURE_MODE_ANIMATION == ON
4473          void BFAPI_SetPreACEModeWithStep(IGBlock *ptr, UCHAR Step)
4474          {
4475   1          code IGBlock DefaultIG = {16, 0, 64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 
             -960,1024}; // 1:1 Linear
4476   1          code IGBlock Level10IG = {16, 0x20, 0x9c, 0xf8, 0x148, 0x18d, 0x1c5, 0x1f9, 0x229, 0x255, 0x285, 0x2B6
             -, 0x2e6, 0x316, 0x34a, 0x386, 0x3c2,1024}; // 1:1 Linear
4477   1      
4478   1          UCHAR i, tmpReg;
4479   1          IGBlock *pIG;
4480   1          IGBlock *MinpIG;
4481   1      
4482   1          tmpReg = SC_ACE_FUNC_CTRL2 & 0x0E;
4483   1          //if (CurBFWin() == BF_WINDOW_2)
4484   1              //tmpReg |= 0x20;
4485   1      
4486   1          tmpReg |= 0x50; // Write Gamma
4487   1          SC_ACE_FUNC_CTRL2 = tmpReg;
4488   1      
4489   1          if (ptr == 0)
4490   1              pIG = &DefaultIG;
4491   1          else
4492   1              pIG = ptr;
4493   1      
4494   1      #if OSDTYPE == OSD_BENQ_V2
4495   1          MinpIG = ptr;
4496   1          pIG = &Level10IG;
4497   1          
4498   1      for (i = 0; i <= pIG->NumIG; i++) {
4499   2          
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 75  

4500   2              if(abs(pIG->IGamma[i]-MinpIG->IGamma[i])<(MAXIMUM_ANIMATION_MODE-1)){
4501   3                 tmpReg = 1;
4502   3              }
4503   2              else{
4504   3                  tmpReg = (abs(pIG->IGamma[i]-MinpIG->IGamma[i])/(MAXIMUM_ANIMATION_MODE-1));
4505   3              }
4506   2      
4507   2              if(Step == 10){
4508   3                  SC_ACE_DATA_PORT = pIG->IGamma[i] & 0xFF;
4509   3                  SC_ACE_DATA_PORT = pIG->IGamma[i] >> 8;
4510   3              }
4511   2              else{
4512   3                  if(pIG->IGamma[i]>MinpIG->IGamma[i]){
4513   4                      if((MinpIG->IGamma[i]+ tmpReg*Step) > pIG->IGamma[i]){
4514   5                          SC_ACE_DATA_PORT = pIG->IGamma[i] & 0xFF;
4515   5                          SC_ACE_DATA_PORT = pIG->IGamma[i] >> 8;
4516   5                      }
4517   4                      else{
4518   5                          SC_ACE_DATA_PORT = (MinpIG->IGamma[i]+ tmpReg*Step) & 0xFF;
4519   5                          SC_ACE_DATA_PORT = (MinpIG->IGamma[i]+ tmpReg*Step) >> 8;
4520   5                      }
4521   4                  }
4522   3                  else{
4523   4                      if((MinpIG->IGamma[i]- tmpReg*Step) < pIG->IGamma[i]){
4524   5                          SC_ACE_DATA_PORT = pIG->IGamma[i] & 0xFF;
4525   5                          SC_ACE_DATA_PORT = pIG->IGamma[i] >> 8;
4526   5                      }
4527   4                      else{
4528   5                          SC_ACE_DATA_PORT = (MinpIG->IGamma[i]- tmpReg*Step) & 0xFF;
4529   5                          SC_ACE_DATA_PORT = (MinpIG->IGamma[i]- tmpReg*Step) >> 8;
4530   5                      }
4531   4      
4532   4                  }
4533   3              }
4534   2      }
4535   1      #else
                  for (i = 0; i <= pIG->NumIG; i++) {
                      if(i>0 && i<2){
                          SC_ACE_DATA_PORT = (pIG->IGamma[i]+(Step/3)) & 0xFF;
                          SC_ACE_DATA_PORT = (pIG->IGamma[i]+(Step/3)) >> 8;
                      }
                      else if(i==2){
                          SC_ACE_DATA_PORT = (pIG->IGamma[i]+(Step/2)) & 0xFF;
                          SC_ACE_DATA_PORT = (pIG->IGamma[i]+(Step/2)) >> 8;
                      }        
                      else if(i>=3 && i<=8){
                          SC_ACE_DATA_PORT = (pIG->IGamma[i]+(Step)) & 0xFF;
                          SC_ACE_DATA_PORT = (pIG->IGamma[i]+(Step)) >> 8;
                      }        
                      else if(i==9){
                          SC_ACE_DATA_PORT = (pIG->IGamma[i]+((Step/6)*5)) & 0xFF;
                          SC_ACE_DATA_PORT = (pIG->IGamma[i]+((Step/6)*5)) >> 8;
                      }
                      else if(i==10){
                          SC_ACE_DATA_PORT = (pIG->IGamma[i]+((Step/6)*4)) & 0xFF;
                          SC_ACE_DATA_PORT = (pIG->IGamma[i]+((Step/6)*4)) >> 8;
                      }
                      else if(i==11){
                          SC_ACE_DATA_PORT = (pIG->IGamma[i]+((Step/6)*3)) & 0xFF;
                          SC_ACE_DATA_PORT = (pIG->IGamma[i]+((Step/6)*3)) >> 8;
                      }
                      else{
C51 COMPILER V9.54   COLORCONFIG                                                           01/06/2017 14:56:57 PAGE 76  

                          SC_ACE_DATA_PORT = (pIG->IGamma[i]) & 0xFF;
                          SC_ACE_DATA_PORT = (pIG->IGamma[i]) >> 8;
                      }
                  }
              #endif
4567   1          // Update I-Gamma
4568   1          SC_ACE_FUNC_CTRL2 = tmpReg | 0x90;
4569   1          WaitDisVSync();
4570   1          BFAPI_EnableACEMode();
4571   1          SC_ACE_FUNC_CTRL2 &= ~BIT7;
4572   1      }
4573          #endif
4574          
4575          
4576          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4580    ----
   CONSTANT SIZE    =   1320    ----
   XDATA SIZE       =     15      30
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
