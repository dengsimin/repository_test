C51 COMPILER V9.54   SCALER_NR                                                             01/06/2017 14:57:09 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SCALER_NR
OBJECT MODULE PLACED IN .\Bin\Scaler_NR.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Lib\NT68810 Series\Scaler_NR.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\A
                    -pp;.\App\OSD;.\App\User;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component
                    -;.\Phy\SI\NVT\Keypad;.\Sys;.\Sys\SI\NVT;.\Phy\SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_MO
                    -DULE,LVIEW_2560X1440,FLASH_BANK=8) PRINT(.\Lst\Scaler_NR.lst) TABS(2) OBJECT(.\Bin\Scaler_NR.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          
  14          //******************************************************************************
  15          // M A C R O   D E F I N I T I O N S
  16          //******************************************************************************
  17          
  18          //******************************************************************************
  19          // S T A T I C   V A R I A B L E S
  20          //******************************************************************************
  21          
  22          //******************************************************************************
  23          // G L O B A L   V A R I A B L E S
  24          //******************************************************************************
  25          
  26          //******************************************************************************
  27          // S T A T I C   V A R I A B L E S
  28          //******************************************************************************
  29              
  30          //******************************************************************************
  31          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  32          //******************************************************************************
  33          
  34          //******************************************************************************
  35          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  36          //******************************************************************************
  37          
  38          //******************************************************************************
  39          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
  40          //******************************************************************************
  41          
  42          //******************************************************************************
  43          // F U N C T I O N   B O D Y S
  44          //******************************************************************************
  45          
  46          /**************************************************************************//**
  47           * Initialize NR-related registers.
  48           ******************************************************************************/
  49          void NRInit(void)
  50          {
  51   1          SC_NR_CTRL = 0x00;
  52   1          SC_NR_THR_CTRL1 = 0x00;
C51 COMPILER V9.54   SCALER_NR                                                             01/06/2017 14:57:09 PAGE 2   

  53   1          SC_JITTER_CTRL = 0x00;
  54   1          SC_NR_THR_CTRL2 = 0x00;
  55   1          SC_NR3_CTRL1 = 0x00;
  56   1          SC_NR3_CTRL2 = 0x00;
  57   1      }
  58          
  59          /**************************************************************************//**
  60           * Set NR type.
  61           * The type is one of 
  62           *     NR_MODE_OFF, 
  63           *     NR_MODE_1, 
  64           *     NR_MODE_2 and
  65           *     NR_MODE_3.
  66           * The configuration is multi-selection of
  67           *     NR_CFG_RDM_TP,
  68           *     NR_CFG_NR2_EN,
  69           *     NR_CFG_ROUND,
  70           *     NR_CFG_EDGE_DET,
  71           *     NR_CFG_NR_DITH_EN,
  72           *     NR_CFG_JC_EN and
  73           *     NR_CFG_GC_EN.
  74           * @param type NR type.
  75           * @param cfg NR configuration.
  76           ******************************************************************************/
  77          void NRSetNRType(NRType type, UCHAR cfg)
  78          {
  79   1          SC_NR_CTRL = type | (cfg & 0xF0);
  80   1      
  81   1          if (cfg & NR_CFG_NR_DITH_EN) {
  82   2              SC_NR_THR_CTRL2 |= BIT4;
  83   2          }
  84   1          else {
  85   2              SC_NR_THR_CTRL2 &= ~BIT4;
  86   2          }
  87   1      
  88   1          if (cfg & NR_CFG_JC_EN) {
  89   2              SC_JITTER_CTRL |= BIT4;
  90   2          }
  91   1          else {
  92   2              SC_JITTER_CTRL &= ~BIT4;
  93   2          }
  94   1      
  95   1          // APN resuests it
  96   1          SC_NR_THR_CTRL2 &= ~BIT5;
  97   1      }
  98          
  99          /**************************************************************************//**
 100           * Set the value of edge detection threshold.
 101           * @param value The value of edge detection threshold.
 102           ******************************************************************************/
 103          void NRSetEdgeThr(UCHAR value)
 104          {
 105   1          SC_NR_THR_CTRL1 &= 0x0F;
 106   1          SC_NR_THR_CTRL1 |= (value <<4);
 107   1      }
 108          
 109          /**************************************************************************//**
 110           * Set the threshold of filter adjustment.
 111           * @param value The threshold of filter adjustment.
 112           ******************************************************************************/
 113          void NRSetNRThr(UCHAR value)
 114          {
C51 COMPILER V9.54   SCALER_NR                                                             01/06/2017 14:57:09 PAGE 3   

 115   1          SC_NR_THR_CTRL1 &= 0xF0;
 116   1          SC_NR_THR_CTRL1 |= (value & 0x0F);
 117   1      }
 118          
 119          /**************************************************************************//**
 120           * Set the value of jitter correction level.
 121           * @param value The value of jitter correction level.
 122           ******************************************************************************/
 123          void NRSetJCLvl(UCHAR value)
 124          {
 125   1          SC_JITTER_CTRL &= 0xF0;
 126   1          SC_JITTER_CTRL |= (value & 0x0F);
 127   1      }
 128          
 129          /**************************************************************************//**
 130           * Set the threshold of NR2 filter adjustment.
 131           * @param value The threshold of NR2 filter adjustment.
 132           ******************************************************************************/
 133          void NRSetNR2Thr(UCHAR value)
 134          {
 135   1          SC_NR_THR_CTRL2 &= 0xF0;
 136   1          SC_NR_THR_CTRL2 |= (value & 0x0F);
 137   1      }
 138          
 139          /**************************************************************************//**
 140           * Configure ghost canceling filter.
 141           * @param win The active position of ghost canceling filter.
 142           * @param pk_thr The peak threshold.
 143           * @param lf_thr The low pass filter threshold.
 144           ******************************************************************************/
 145          void NRSetGCCfg(UCHAR win, UCHAR pk_thr, UCHAR lf_thr)
 146          {
 147   1          SC_NR3_CTRL1 = 0x98;
 148   1          SC_NR3_CTRL1 |= (win & 0x07);
 149   1      
 150   1          if (pk_thr > 60) {
 151   2              pk_thr = 60;
 152   2          }
 153   1      
 154   1          if (lf_thr > 60) {
 155   2              lf_thr = 60;
 156   2          }
 157   1      
 158   1          pk_thr = (pk_thr + 2) / 4;
 159   1          lf_thr = (lf_thr + 2) / 4;
 160   1      
 161   1          SC_NR3_CTRL2 = (pk_thr << 4) | lf_thr;
 162   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    214    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
