C51 COMPILER V9.54   SCALER_PWM                                                            01/06/2017 14:57:14 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SCALER_PWM
OBJECT MODULE PLACED IN .\Bin\Scaler_PWM.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Lib\NT68810 Series\Scaler_PWM.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\
                    -App;.\App\OSD;.\App\User;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Componen
                    -t;.\Phy\SI\NVT\Keypad;.\Sys;.\Sys\SI\NVT;.\Phy\SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_M
                    -ODULE,LVIEW_2560X1440,FLASH_BANK=8) PRINT(.\Lst\Scaler_PWM.lst) TABS(2) OBJECT(.\Bin\Scaler_PWM.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          #include "ScalerProfile.h"
  14          
  15          //******************************************************************************
  16          // M A C R O   D E F I N I T I O N S
  17          //******************************************************************************
  18          
  19          //******************************************************************************
  20          // G L O B A L   V A R I A B L E S
  21          //******************************************************************************
  22          
  23          //******************************************************************************
  24          // S T A T I C   V A R I A B L E S
  25          //******************************************************************************
  26          
  27          //******************************************************************************
  28          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  29          //******************************************************************************
  30          
  31          //******************************************************************************
  32          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  33          //******************************************************************************
  34          
  35          //******************************************************************************
  36          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
  37          //******************************************************************************
  38          
  39          //******************************************************************************
  40          // F U N C T I O N   B O D Y S
  41          //******************************************************************************
  42          
  43          #if ENABLE_PWM_SMOOTH == ON
  44          /**************************************************************************//**
  45           * Configure the smooth of the PWM duty.
  46           * @param port PWM output port.
  47           * @param step PWM value change step. (00=1 step, 01=2 steps, 10=4 steps, 11=8 steps)
  48           * @param repeat Repeat times of each step. (00=disable, 01=1 time, 10=2 times, 11=4 times)
  49           ******************************************************************************/
  50          void SmoothScalerPWM(UCHAR port, UCHAR step, UCHAR repeat)
  51          {
  52   1          UCHAR ch;
C51 COMPILER V9.54   SCALER_PWM                                                            01/06/2017 14:57:14 PAGE 2   

  53   1      
  54   1          if (step > 3) {
  55   2              step = 3;
  56   2          }
  57   1          if (repeat > 3) {
  58   2              repeat = 3;
  59   2          }
  60   1          if (port == PWM_A) {
  61   2              SC_PWMA_CTRL6 &= 0xF0;
  62   2              ch = (step << 2 | repeat);
  63   2              SC_PWMA_CTRL6 |= ch;
  64   2          }
  65   1          else if (port == PWM_B) {
  66   2              SC_PWMB_CTRL6 &= 0xF0;
  67   2              ch = (step << 2 | repeat);
  68   2              SC_PWMB_CTRL6 |= ch;
  69   2          }
  70   1          else if (port == PWM_C) {
  71   2              SC_PWMC_CTRL6 &= 0xF0;
  72   2              ch = (step << 2 | repeat);
  73   2              SC_PWMC_CTRL6 |= ch;
  74   2          }
  75   1          else if (port == PWM_D) {
  76   2              SC_PWMD_CTRL6 &= 0xF0;
  77   2              ch = (step << 2 | repeat);
  78   2              SC_PWMD_CTRL6 |= ch;
  79   2          }
  80   1      }
  81          #endif
  82          
  83          /**************************************************************************//**
  84           * Configure the PWM output frequency.
  85           * @param port PWM output port. (e.x. PWMA, PWMB etc...)
  86           * @param pin PWM output pin.
  87           * @param freq Output frequency of PWM.
  88           ******************************************************************************/
  89          void ConfigScalerPWM(UCHAR port, UCHAR pin, ULONG freq)
  90          {
  91   1          ULONG total_div;
  92   1          UCHAR div_hi, div_lo, pwm_ctrl;
  93   1          USHRT base_div;
  94   1          UCHAR reg = 0x00;
  95   1      
  96   1          //check freq
  97   1          total_div = (float)REF_CLK / freq - 0.5;
  98   1          if (total_div >= 1024) {
  99   2              pwm_ctrl = 10;
 100   2              base_div = 1024;
 101   2          }
 102   1          else if (total_div >= 256) {
 103   2              pwm_ctrl = 8;
 104   2              base_div = 256;
 105   2          }
 106   1          else {
 107   2              pwm_ctrl = 4;
 108   2              base_div = 16;
 109   2          }
 110   1          total_div = (float)REF_CLK / base_div / freq - 0.5;
 111   1          for (pwm_ctrl; pwm_ctrl<15; pwm_ctrl++) {
 112   2              if (total_div > 1023) {
 113   3                  total_div >>= 1;
 114   3              }
C51 COMPILER V9.54   SCALER_PWM                                                            01/06/2017 14:57:14 PAGE 3   

 115   2              else {
 116   3                  break;
 117   3              }
 118   2          }
 119   1      
 120   1          switch (port) {
 121   2              case PWM_A:
 122   2                  reg = SC_PWMA_CTRL2 & 0xC0;
 123   2                  break;
 124   2              case PWM_B:
 125   2                  reg = SC_PWMB_CTRL2 & 0xC0;
 126   2                  break;
 127   2              case PWM_C:
 128   2                  reg = SC_PWMC_CTRL2 & 0xC0;
 129   2                  break;
 130   2              case PWM_D:
 131   2                  reg = SC_PWMD_CTRL2 & 0xC0;
 132   2                  break;
 133   2              default:
 134   2                  reg = 0x00;//error
 135   2                  return;
 136   2                  break;
 137   2          }
 138   1      
 139   1          //if (total_div != 0)
 140   1              //total_div = total_div - 1; //00h->1, 01h->2,...
 141   1          
 142   1          div_hi = ((total_div >> 4) & 0x30);
 143   1          div_lo = (UCHAR)total_div;
 144   1          reg = reg | pwm_ctrl | div_hi; 
 145   1                  
 146   1          switch (port) {
 147   2              case PWM_A:
 148   2                  SC_PWMA_CTRL2 = reg;
 149   2                  SC_PWMA_CTRL3 = div_lo;
 150   2                  break;
 151   2              case PWM_B:
 152   2                  SC_PWMB_CTRL2 = reg;
 153   2                  SC_PWMB_CTRL3 = div_lo;
 154   2                  break;
 155   2              case PWM_C:
 156   2                  SC_PWMC_CTRL2 = reg;
 157   2                  SC_PWMC_CTRL3 = div_lo;
 158   2                  break;
 159   2              case PWM_D:
 160   2                  SC_PWMD_CTRL2 = reg;
 161   2                  SC_PWMD_CTRL3 = div_lo;
 162   2                  break;
 163   2              default:
 164   2                  //error
 165   2                  break;
 166   2          }
 167   1          switch (pin) {
 168   2              case PWMA_PIN_66:
 169   2                  SC_MCU_IO_CTRL4 &= ~(BIT7|BIT6);  // 0xc83
 170   2                  SC_MCU_IO_CTRL4 |= BIT6;
 171   2                  break;
 172   2              case PWMB_PIN_71:
 173   2                  SC_MCU_IO_CTRL3 &= ~(BIT7|BIT6);// 0xc82
 174   2                  SC_MCU_IO_CTRL3 |= BIT6;
 175   2                  break;
 176   2              case PWMB_PIN_63:
C51 COMPILER V9.54   SCALER_PWM                                                            01/06/2017 14:57:14 PAGE 4   

 177   2                  SC_MCU_IO_CTRL5 &= ~(BIT5|BIT4);// 0xc84
 178   2                  SC_MCU_IO_CTRL5 |= BIT5;
 179   2                  break;
 180   2              case PWMB_PIN_120:
 181   2                  SC_MCU_IO_CTRL3 &= ~(BIT5|BIT4);
 182   2                  SC_MCU_IO_CTRL3 |= BIT4;
 183   2                  break;
 184   2              case PWMC_PIN_116:
 185   2                  SC_MCU_IO_CTRL1 &= ~(BIT3|BIT2);// 0xc80
 186   2                  SC_MCU_IO_CTRL1 |= BIT2;
 187   2                  break;
 188   2              case PWMC_PIN_123:
 189   2                  SC_MCU_IO_CTRL4 &= ~(BIT1|BIT0);
 190   2                  SC_MCU_IO_CTRL4 |= BIT1;
 191   2                  break;
 192   2              case PWMD_PIN_59:
 193   2                  SC_MCU_IO_CTRL5 &= ~(BIT7|BIT6);
 194   2                  SC_MCU_IO_CTRL5 |= BIT6;
 195   2                  break;
 196   2              case PWMA_PIN_PC0:
 197   2                  SC_MCU_IO_CTRL5 &= ~(BIT7|BIT6);
 198   2                  SC_MCU_IO_CTRL5 |= BIT6;
 199   2                  break;
 200   2              case PWMA_PIN_PE0:
 201   2                  SC_MCU_IO_CTRL8 &= ~(BIT7|BIT6);// 0xc87
 202   2                  SC_MCU_IO_CTRL8 |= BIT6;
 203   2                  break;
 204   2              case PWMB_PIN_PC6:
 205   2                  SC_MCU_IO_CTRL0 &= ~(BIT4|BIT3|BIT2);// 0xc7f
 206   2                  SC_MCU_IO_CTRL0 |= BIT3;
 207   2                  break;
 208   2              case PWMB_PIN_PE1:
 209   2                  SC_MCU_IO_CTRL8 &= ~(BIT5|BIT4);
 210   2                  SC_MCU_IO_CTRL8 |= BIT4;
 211   2                  break;
 212   2              case PWMC_PIN_PA3:
 213   2                  SC_MCU_IO_CTRL2 &= ~(BIT1|BIT0);// 0xc81
 214   2                  SC_MCU_IO_CTRL2 |= BIT0;
 215   2                  break;
 216   2              case PWMC_PIN_PA4:
 217   2                  SC_MCU_IO_CTRL3 &= ~(BIT7|BIT6);
 218   2                  SC_MCU_IO_CTRL3 |= BIT6;
 219   2                  break;
 220   2              case PWMC_PIN_PC3:
 221   2                  SC_MCU_IO_CTRL5 &= ~(BIT1|BIT0);
 222   2                  SC_MCU_IO_CTRL5 |= BIT0;
 223   2                  break;
 224   2              case PWMD_PIN_PC5:
 225   2                  SC_MCU_IO_CTRL0 &= ~(BIT7|BIT6|BIT5);
 226   2                  SC_MCU_IO_CTRL0 |= BIT6;
 227   2                  break;
 228   2          }
 229   1      
 230   1          pin = 0; // Disable compile warning only.
 231   1      }
 232          
 233          /**************************************************************************//**
 234           * Set PWM duty.
 235           * @param port PWM output port. (e.x. PWMA, PWMB etc...)
 236           * @param value PWM duty.
 237           ******************************************************************************/
 238          void SetScalerPWM(UCHAR port, USHRT value)
C51 COMPILER V9.54   SCALER_PWM                                                            01/06/2017 14:57:14 PAGE 5   

 239          {
 240   1          switch (port) {
 241   2              case PWM_A:
 242   2                  SC_PWMA_CTRL5 = ((UCHAR)value & 0x03);
 243   2                  SC_PWMA_CTRL4 = (value >> 2);
 244   2                  break;
 245   2              case PWM_B:
 246   2                  SC_PWMB_CTRL5 = ((UCHAR)value & 0x03);
 247   2                  SC_PWMB_CTRL4 = (value >> 2);
 248   2                  break;
 249   2              case PWM_C:
 250   2                  SC_PWMC_CTRL5 = ((UCHAR)value & 0x03);
 251   2                  SC_PWMC_CTRL4 = (value >> 2);
 252   2                  break;
 253   2              case PWM_D:
 254   2                  SC_PWMD_CTRL5 = ((UCHAR)value & 0x03);
 255   2                  SC_PWMD_CTRL4 = (value >> 2);
 256   2                  break;  
 257   2          }
 258   1      }
 259          
 260          #if ENABLE_SET_PWM_MAX_BUFFER == ON
 261          /**************************************************************************//**
 262           * Get current PWM duty setting.
 263           * @return PWM duty setting.
 264           ******************************************************************************/
 265          USHRT GetScalerPWM(UCHAR port)
 266          {
 267   1          USHRT pwm;
 268   1          UCHAR ch;
 269   1      
 270   1          switch (port) {
 271   2              case PWM_A:
 272   2                  pwm = SC_PWMA_CTRL4;
 273   2                  ch = SC_PWMA_CTRL5 & 0x03;
 274   2                  pwm = (pwm << 2) | ch;
 275   2                  break;
 276   2              case PWM_B:
 277   2                  pwm = SC_PWMB_CTRL4;
 278   2                  ch = SC_PWMB_CTRL5 & 0x03;
 279   2                  pwm = (pwm << 2) | ch;
 280   2                  break;
 281   2              case PWM_C:
 282   2                  pwm = SC_PWMC_CTRL4;
 283   2                  ch = SC_PWMC_CTRL5 & 0x03;
 284   2                  pwm = (pwm << 2) | ch;
 285   2                  break;
 286   2              case PWM_D:
 287   2                  pwm = SC_PWMD_CTRL4;
 288   2                  ch = SC_PWMD_CTRL5 & 0x03;
 289   2                  pwm = (pwm << 2) | ch;
 290   2                  break;
 291   2              default:
 292   2                  pwm = 0;//error
 293   2                  break;
 294   2          }
 295   1      
 296   1          return pwm;
 297   1      }
 298          #endif
 299          
 300          /**************************************************************************//**
C51 COMPILER V9.54   SCALER_PWM                                                            01/06/2017 14:57:14 PAGE 6   

 301           * Enable PWM function.
 302           * @param port PWM output port. (e.x. PWMA, PWMB etc...)
 303           ******************************************************************************/
 304          void EnableScalerPWM(UCHAR port)
 305          {
 306   1          switch (port) {
 307   2              case PWM_A:
 308   2                  SC_PWMA_CTRL1 = (SC_PWMA_CTRL1 & 0xFC) | BIT7;
 309   2                  break;
 310   2              case PWM_B:
 311   2                  SC_PWMB_CTRL1 = (SC_PWMB_CTRL1 & 0xFC) | BIT7;
 312   2                  break;
 313   2              case PWM_C:
 314   2                  SC_PWMC_CTRL1 = (SC_PWMC_CTRL1 & 0xFC) | BIT7;
 315   2                  break;
 316   2              case PWM_D:
 317   2                  SC_PWMD_CTRL1 = (SC_PWMD_CTRL1 & 0xFC) | BIT7;
 318   2                  break;
 319   2              default:
 320   2              case PWM_ALL:
 321   2                  SC_PWMA_CTRL1 = (SC_PWMA_CTRL1 & 0xFC) | BIT7;
 322   2                  SC_PWMB_CTRL1 = (SC_PWMB_CTRL1 & 0xFC) | BIT7;
 323   2                  SC_PWMC_CTRL1 = (SC_PWMC_CTRL1 & 0xFC) | BIT7;
 324   2                  SC_PWMD_CTRL1 = (SC_PWMD_CTRL1 & 0xFC) | BIT7;
 325   2                  break;
 326   2          }
 327   1      }
 328          
 329          /**************************************************************************//**
 330           * Disable PWM function.
 331           * @param port PWM output port. (e.x. PWMA, PWMB etc...)
 332           ******************************************************************************/
 333          void DisableScalerPWM(UCHAR port)
 334          {
 335   1          switch (port) {
 336   2              case PWM_A:
 337   2                  SC_PWMA_CTRL1 = (SC_PWMA_CTRL1 & 0x7C) | 0x03; //clock off
 338   2                  break;
 339   2              case PWM_B:
 340   2                  SC_PWMB_CTRL1 = (SC_PWMB_CTRL1 & 0x7C) | 0x03; //clock off
 341   2                  break;
 342   2              case PWM_C:
 343   2                  SC_PWMC_CTRL1 = (SC_PWMC_CTRL1 & 0x7C) | 0x03; //clock off
 344   2                  break;
 345   2              case PWM_D:
 346   2                  SC_PWMD_CTRL1 = (SC_PWMD_CTRL1 & 0x7C) | 0x03; //clock off
 347   2                  break;
 348   2              default:
 349   2              case PWM_ALL:
 350   2                  SC_PWMA_CTRL1 = (SC_PWMA_CTRL1 & 0x7C) | 0x03; //clock off
 351   2                  SC_PWMB_CTRL1 = (SC_PWMB_CTRL1 & 0x7C) | 0x03; //clock off
 352   2                  SC_PWMC_CTRL1 = (SC_PWMC_CTRL1 & 0x7C) | 0x03; //clock off
 353   2                  SC_PWMD_CTRL1 = (SC_PWMD_CTRL1 & 0x7C) | 0x03; //clock off
 354   2                  break;
 355   2          }
 356   1      }
 357          
 358          /**************************************************************************//**
 359           * Set the function of VSync-reset PWM duty.
 360           * @param port PWM output port.
 361           * @param on TRUE to turn on VSync-reset function else FALSE.
 362           ******************************************************************************/
C51 COMPILER V9.54   SCALER_PWM                                                            01/06/2017 14:57:14 PAGE 7   

 363          void SetVSyncResetPWM(UCHAR port, UCHAR on)
 364          {
 365   1          on &= BIT0;
 366   1      
 367   1          switch (port) {
 368   2              case PWM_A:
 369   2                  SC_PWMA_CTRL1 = (SC_PWMA_CTRL1 & 0xDF) | (on << 5);
 370   2                  break;
 371   2              case PWM_B:
 372   2                  SC_PWMB_CTRL1 = (SC_PWMB_CTRL1 & 0xDF) | (on << 5);
 373   2                  break;
 374   2              case PWM_C:
 375   2                  SC_PWMC_CTRL1 = (SC_PWMC_CTRL1 & 0xDF) | (on << 5);
 376   2                  break;
 377   2              case PWM_D:
 378   2                  SC_PWMD_CTRL1 = (SC_PWMD_CTRL1 & 0xDF) | (on << 5);
 379   2                  break;
 380   2          }
 381   1      }
 382          #ifdef PWM_REF_DBC
 383          /**************************************************************************//**
 384           * Set the function of reference DBC Duty.
 385           * @param port PWM output port.
 386           * @param on TRUE to turn on reference DBC Duty else FALSE.
 387           ******************************************************************************/
 388          void SetReferenceDBCDuty(UCHAR port, UCHAR on)
 389          {
 390   1          on &= BIT0;
 391   1      
 392   1          switch (port) {
 393   2              case PWM_A:
 394   2                  SC_PWMA_CTRL1 = (SC_PWMA_CTRL1 & 0xF7) | (on << 3);
 395   2                  break;
 396   2              case PWM_B:
 397   2                  SC_PWMB_CTRL1 = (SC_PWMB_CTRL1 & 0xF7) | (on << 3);
 398   2                  break;
 399   2              case PWM_C:
 400   2                  SC_PWMC_CTRL1 = (SC_PWMC_CTRL1 & 0xF7) | (on << 3);
 401   2                  break;
 402   2              case PWM_D:
 403   2                  SC_PWMD_CTRL1 = (SC_PWMD_CTRL1 & 0xF7) | (on << 3);
 404   2                  break;
 405   2          }
 406   1      }
 407          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1193    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
