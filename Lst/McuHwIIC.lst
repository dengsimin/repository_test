C51 COMPILER V9.54   MCUHWIIC                                                              01/06/2017 14:56:44 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MCUHWIIC
OBJECT MODULE PLACED IN .\Bin\McuHwIIC.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Lib\McuHwIIC.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\App\OSD;.\A
                    -pp\User;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\Phy\SI\NVT\Ke
                    -ypad;.\Sys;.\Sys\SI\NVT;.\Phy\SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_MODULE,LVIEW_2560X
                    -1440,FLASH_BANK=8) PRINT(.\Lst\McuHwIIC.lst) TABS(2) OBJECT(.\Bin\McuHwIIC.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          
  14          //******************************************************************************
  15          // M A C R O   D E F I N I T I O N S
  16          //******************************************************************************
  17          
  18          //******************************************************************************
  19          // G L O B A L   V A R I A B L E S
  20          //******************************************************************************
  21          
  22          //******************************************************************************
  23          // S T A T I C   V A R I A B L E S
  24          //******************************************************************************
  25          
  26          //******************************************************************************
  27          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  28          //******************************************************************************
  29          
  30          //******************************************************************************
  31          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  32          //******************************************************************************
  33          
  34          //******************************************************************************
  35          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
  36          //******************************************************************************
  37          
  38          //******************************************************************************
  39          // F U N C T I O N   B O D Y S
  40          //******************************************************************************
  41          
  42          /**************************************************************************//**
  43           * Enable MCU IIC.
  44           * @param mask Each bit indicates one IIC channel, Bit 0: IIC0, Bit 1: IIC1, ..., Bit 3: IIC3.
  45           ******************************************************************************/
  46          void McuEnableIIC(UCHAR mask)
  47          {
  48   1      
  49   1          if ((mask & BIT0) && (MCU_UART_OUTPUT != 1)) {
  50   2              IIC0_ADDR |= BIT0;
  51   2              IIC0_INT_CLR = 0xFF;
  52   2              IIC0_INT_EN = 0xF8;
C51 COMPILER V9.54   MCUHWIIC                                                              01/06/2017 14:56:44 PAGE 2   

  53   2          }
  54   1          if ((mask & BIT1) && (MCU_UART_OUTPUT != 2)) {
  55   2              IIC1_ADDR |= BIT0;
  56   2              IIC1_INT_CLR = 0xFF;
  57   2              IIC1_INT_EN = 0xF8;
  58   2          }
  59   1          if ((mask & BIT2) && (MCU_UART_OUTPUT != 3)) {
  60   2              IIC2_ADDR |= BIT0;
  61   2              IIC2_INT_CLR = 0xFF;
  62   2              IIC2_INT_EN = 0xF8;
  63   2          }
  64   1          if ((mask & BIT3) && (MCU_UART_OUTPUT != 4)) {
  65   2              IIC3_ADDR |= BIT0;
  66   2              IIC3_INT_CLR = 0xFF;
  67   2              IIC3_INT_EN = 0xF8;
  68   2          }
  69   1      #if IS_NT68870_SERIES
  70   1          if ((mask & BIT4) && (MCU_UART_OUTPUT != 5)) {
  71   2              IIC4_ADDR |= BIT0;
  72   2              IIC4_INT_CLR = 0xFF;
  73   2              IIC4_INT_EN = 0xF8;
  74   2          }
  75   1      #endif
  76   1      }
  77          
  78          /**************************************************************************//**
  79           * Disable MCU IIC.
  80           * @param mask Each bit indicates one IIC channel, Bit 0: IIC0, Bit 1: IIC1, ..., Bit 3: IIC3.
  81           ******************************************************************************/
  82          void McuDisableIIC(UCHAR mask)
  83          {
  84   1          if (mask & BIT0) {
  85   2              IIC0_ADDR &= ~BIT0;
  86   2          }
  87   1          if (mask & BIT1) {
  88   2              IIC1_ADDR &= ~BIT0;
  89   2          }
  90   1          if (mask & BIT2) {
  91   2              IIC2_ADDR &= ~BIT0;
  92   2          }
  93   1          if (mask & BIT3) {
  94   2              IIC3_ADDR &= ~BIT0;
  95   2          }
  96   1      #if IS_NT68870_SERIES
  97   1          if (mask & BIT4) {
  98   2              IIC4_ADDR &= ~BIT0;
  99   2          }
 100   1      #endif
 101   1      }
 102          
 103          /**************************************************************************//**
 104           * Set the address of IIC channel.
 105           * @param channel IIC channel.
 106           * @param address IIC slave address.
 107           ******************************************************************************/
 108          void McuSetIIC(UCHAR channel, UCHAR address)
 109          {
 110   1          address &= ~BIT0;
 111   1      
 112   1          switch (channel) {
 113   2              case MCU_IIC_0:
 114   2                  IIC0_ADDR = (IIC0_ADDR&BIT0) | address;
C51 COMPILER V9.54   MCUHWIIC                                                              01/06/2017 14:56:44 PAGE 3   

 115   2                  break;
 116   2      
 117   2              case MCU_IIC_1:
 118   2                  IIC1_ADDR = (IIC1_ADDR&BIT0) | address;
 119   2                  break;
 120   2      
 121   2              case MCU_IIC_2:
 122   2                  IIC2_ADDR = (IIC2_ADDR&BIT0) | address;
 123   2                  break;
 124   2      
 125   2              case MCU_IIC_3:
 126   2                  IIC3_ADDR = (IIC3_ADDR&BIT0) | address;
 127   2                  break;
 128   2              
 129   2      #if IS_NT68870_SERIES
 130   2              case MCU_IIC_4:
 131   2                  IIC4_ADDR = (IIC4_ADDR&BIT0) | address;
 132   2                  break;
 133   2      #endif
 134   2          }
 135   1      }
 136          
 137          /**************************************************************************//**
 138           * Enable "send ACK" of IIC.
 139           * XXX This function has special history.
 140           * @param mask Each bit indicates one IIC channel, Bit 0: IIC0, Bit 1: IIC1, ..., Bit 3: IIC3.
 141           ******************************************************************************/
 142          void McuIICPreSendACK(UCHAR mask)
 143          {
 144   1          if ((mask & BIT0) && (MCU_UART_OUTPUT != 1)) {
 145   2              IIC0_CFG |= SEND_ACK;
 146   2          }
 147   1          if ((mask & BIT1) && (MCU_UART_OUTPUT != 2)) {
 148   2              IIC1_CFG |= SEND_ACK;
 149   2          }
 150   1          if ((mask & BIT2) && (MCU_UART_OUTPUT != 3)) {
 151   2              IIC2_CFG |= SEND_ACK;
 152   2          }
 153   1          if ((mask & BIT3) && (MCU_UART_OUTPUT != 4)) {
 154   2              IIC3_CFG |= SEND_ACK;
 155   2          }
 156   1      #if IS_NT68870_SERIES
 157   1          if ((mask & BIT4) && (MCU_UART_OUTPUT != 5)) {
 158   2              IIC4_CFG |= SEND_ACK;
 159   2          }
 160   1      #endif
 161   1      }
 162          
 163          /**************************************************************************//**
 164           * Release SCL by clearing NACK.
 165           * XXX This function has special history.
 166           * @param mask Each bit indicates one IIC channel, Bit 0: IIC0, Bit 1: IIC1, ..., Bit 3: IIC3.
 167           ******************************************************************************/
 168          void McuIICReleaseSCL(UCHAR mask)
 169          {
 170   1          if ((mask & BIT0) && (MCU_UART_OUTPUT != 1)) {
 171   2              IIC0_INT_CLR = INTNAK;
 172   2          }
 173   1          if ((mask & BIT1) && (MCU_UART_OUTPUT != 2)) {
 174   2              IIC1_INT_CLR = INTNAK;
 175   2          }
 176   1          if ((mask & BIT2) && (MCU_UART_OUTPUT != 3)) {
C51 COMPILER V9.54   MCUHWIIC                                                              01/06/2017 14:56:44 PAGE 4   

 177   2              IIC2_INT_CLR = INTNAK;
 178   2          }
 179   1          if ((mask & BIT3) && (MCU_UART_OUTPUT != 4)) {
 180   2              IIC3_INT_CLR = INTNAK;
 181   2          }
 182   1      #if IS_NT68870_SERIES
 183   1          if ((mask & BIT4) && (MCU_UART_OUTPUT != 5)) {
 184   2              IIC4_INT_CLR = INTNAK;
 185   2          }
 186   1      #endif
 187   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    336    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
