C51 COMPILER V9.54   SRAPI                                                                 01/06/2017 14:56:59 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SRAPI
OBJECT MODULE PLACED IN .\Bin\SRAPI.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Lib\NT68810 Series\SRAPI.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.
                    -\App\OSD;.\App\User;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\P
                    -hy\SI\NVT\Keypad;.\Sys;.\Sys\SI\NVT;.\Phy\SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_MODULE
                    -,LVIEW_2560X1440,FLASH_BANK=8) PRINT(.\Lst\SRAPI.lst) TABS(2) OBJECT(.\Bin\SRAPI.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          #include "ScalerProfile.h"
  14          
  15          #if ENABLE_SR == ON
  16          //******************************************************************************
  17          // M A C R O   D E F I N I T I O N S
  18          //******************************************************************************
  19          
  20          //******************************************************************************
  21          // G L O B A L   V A R I A B L E S
  22          //******************************************************************************
  23          
  24          //******************************************************************************
  25          // S T A T I C   V A R I A B L E S
  26          //******************************************************************************
  27          /*!
  28           * Default setting of SR.
  29           */
  30          static code UCHAR ucSuperResolutionTable[12] = {
  31          //    0x00, 0x00, 0x00, 0x01, 0x03, 0x06, 0x03, 0x0F, 0x19, 0x06, 0x19, 0x2C //Defualt
  32          //    0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x03, 0x0F, 0x19, 0x06, 0x19, 0x2C //Defualt
  33              0x0A, 0x00, 0x00, 0x00, 0x28, 0x0D, 0xE2, 0x14, 0x28, 0xAF, 0x00, 0x00 //Defualt
  34          };
  35          
  36          static code UCHAR ucSuperResolutionTable2[8] = {
  37              0x31, 0xD1, 0x10, 0x0D, 0x0D, 0x1E, 0x14, 0x0D
  38          };
  39          
  40          static code UCHAR ucSuperResolutionTable3[8] = {
  41              0x30, 0x11, 0x00, 0x08, 0x00, 0x06, 0x00, 0x04
  42          };
  43          
  44          //******************************************************************************
  45          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  46          //******************************************************************************
  47          
  48          //******************************************************************************
  49          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  50          //******************************************************************************
  51          
  52          //******************************************************************************
C51 COMPILER V9.54   SRAPI                                                                 01/06/2017 14:56:59 PAGE 2   

  53          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
  54          //******************************************************************************
  55          
  56          //******************************************************************************
  57          // F U N C T I O N   B O D Y S
  58          //******************************************************************************
  59          
  60          /**************************************************************************//**
  61           * Initialize SR-related registers.
  62           ******************************************************************************/
  63          void SRAPI_InitSR(void)
  64          {
  65   1          UCHAR i, *p;
  66   1      
  67   1          p = &FLT3_COEFFICENT;
  68   1          for (i = 0; i < sizeof(ucSuperResolutionTable); i++) {
  69   2              *p = ucSuperResolutionTable[i];
  70   2              p++;
  71   2          }
  72   1          p = &FLT1_CONTROL_THR;
  73   1          for (i = 0; i < sizeof(ucSuperResolutionTable2); i++) {
  74   2              *p = ucSuperResolutionTable2[i];
  75   2              p++;
  76   2          }
  77   1          p = &SC_SR_CONTROL;
  78   1          for (i = 0; i < sizeof(ucSuperResolutionTable3); i++) {
  79   2              *p = ucSuperResolutionTable3[i];
  80   2              p++;
  81   2          }
  82   1          
  83   1          SC_SR_CTRL = SCREG_EA0; //SR off
  84   1          FLT3_MAX_VAR_LO = 0xCC;
  85   1          FLT3_MAX_VAR_HI = 0x08;
  86   1          FLT3_MEAN_VAR_LO = 0x00;
  87   1          FLT3_MEAN_VAR_HI = 0x00;
  88   1          FLT3_ADD_SUB_SOURCE = 0x00;
  89   1          FLT3_BRIGHT_DARK_SOURCE = 0x00;
  90   1          FLT3_BRIGHT_DARK_SLOP = 0xC4; // For pattern 1 white line
  91   1          FLT3_CORING_SLOP = 0x07; // value : 6 ~ 8 is better
  92   1          FLT1_CONTROL1 = 0x23;
  93   1          FLT1_CONTROL2 = 0x44;
  94   1          
  95   1      }
  96          
  97          /**************************************************************************//**
  98           * Turn on/off SR.
  99           * @param on ON to turn on SR else OFF.
 100           ******************************************************************************/
 101          void SRAPI_TurnOnOff(UCHAR on)
 102          {
 103   1          //WaitDisVSync();
 104   1          if (on) {
 105   2              SC_SR_CTRL |= BIT0;
 106   2              SC_DIGITAL_CTRL |= BIT7;
 107   2          }
 108   1          else {
 109   2              SC_SR_CTRL &= ~BIT0;
 110   2      #if IS_NT68810_SERIES
                      if ((SC_ADC_IP_CTRL_1D80[_ADC_CLAMP_VMID_SEL] & 0xE0) == YPBPR_CLAMP) {
              #else
 113   2              if ((SC_ADC_IP_CTRL_1D80[_ADC_VREF_BIAS] & 0xE0) == YPBPR_CLAMP) {
 114   3      #endif
C51 COMPILER V9.54   SRAPI                                                                 01/06/2017 14:56:59 PAGE 3   

 115   3                  SC_DIGITAL_CTRL |= BIT7;  
 116   3              }
 117   2              else {
 118   3                  SC_DIGITAL_CTRL &= ~BIT7;  
 119   3              }
 120   2          }
 121   1      }
 122          
 123          /*
 124          BOOL SRAPI_IsTurnOn()
 125          {
 126              if ((SC_SR_CTRL & BIT0) != 0 ) {
 127                  return TRUE;
 128              }
 129              else {
 130                  return FALSE;
 131              }
 132          }
 133          */
 134          
 135          /**************************************************************************//**
 136           * Set median filter.
 137           * @param ptr Pointer to the median filter block.
 138           ******************************************************************************/
 139          void SRAPI_SetMDNFilter(MDNBlock *ptr)
 140          {
 141   1          USHRT tmp;
 142   1      
 143   1          FLT1_TH = ptr->ucCutOffTH;
 144   1          FLT1_CUT_SLOP = ptr->ucCutOffSlop;
 145   1      
 146   1          tmp = (((ptr->ucHiVarGain & 0x0F) << 4) | (ptr->ucLoVarGain & 0x0F));
 147   1          FLT1_SLOP_TH = tmp;
 148   1      
 149   1          tmp = ((ptr->usVarTH & 0x0FFF) | (0 << 12));
 150   1          WriteShortScaler(&FLT1_VAR_TH_LO, tmp);
 151   1      }
 152          
 153          /**************************************************************************//**
 154           * Set USM filter.
 155           * @param ptr_rgn Pointer to the USM region block.
 156           * @param ptr_gain Pointer to the USM gain block.
 157           ******************************************************************************/
 158          void SRAPI_SetUSMFilter(USMRegionBlock *ptr_rgn, USMGainBlock *ptr_gain)
 159          {
 160   1          USHRT tmp;
 161   1      
 162   1          FLT3_CORING_TH = ptr_rgn->ucCutOffTH;
 163   1      
 164   1          tmp = (((ptr_rgn->ucHiVarGain & 0x0F) << 4) | (ptr_rgn->ucLoVarGain & 0x0F));
 165   1          FLT3_CORING_UP_LOW_TH = tmp;
 166   1      
 167   1          tmp = ((ptr_rgn->usVarTH & 0x0FFF) | (5 << 12));
 168   1          WriteShortScaler(&FLT3_COR_VAR_TH_LO, tmp);
 169   1      
 170   1          FLT3_GAIN = ptr_gain->ucGain & 0x3F;
 171   1      
 172   1          tmp = (((ptr_gain->ucHiVarGain & 0x0F) << 4) | (ptr_gain->ucLoVarGain & 0x0F));
 173   1          FLT3_GAIN_UP_LOW_TH = tmp;
 174   1      
 175   1          tmp = ((ptr_gain->usVarTH & 0x0FFF) | (4 << 12));
 176   1          WriteShortScaler(&FLT3_GAIN_VAR_TH_LO, tmp);
C51 COMPILER V9.54   SRAPI                                                                 01/06/2017 14:56:59 PAGE 4   

 177   1      }
 178          
 179          /**************************************************************************//**
 180           * Set threshold of USM low pass filter.
 181           * @param threshold Threshold of USM low poass filter.
 182           ******************************************************************************/
 183          void SRAPI_SetUSMLPThreshold(USHRT threshold)
 184          {
 185   1          WriteShortScaler(&FLT3_LP_VAR_TH_LO, ((threshold & 0x0FFF) | (4 << 12)));
 186   1      }
 187          
 188          /**************************************************************************//**
 189           * Set Dark Limit enable
 190           * @param enable dark limit of USM.
 191           ******************************************************************************/
 192          void SRAPI_SetUSMDarkLimit(UCHAR darkLimit)
 193          {
 194   1          SC_SR_CONTROL = ((SC_SR_CONTROL & 0xDF) | (darkLimit<<5));
 195   1      }
 196          
 197          /**************************************************************************//**
 198           * Set demo area of SR.
 199           * @param on ON to turn on demo mode else OFF.
 200           * @param region Left side or right side.
 201           * @param value Width of demo area.
 202           ******************************************************************************/
 203          void SRAPI_SetDemoRegion(UCHAR on, SRDemoRegion region ,USHRT value)
 204          {
 205   1          USM_DEMO_MODE = (on & 0xFE) | (region << 1);
 206   1          WriteShortScaler(&USM_DEMO_WIDTH_LO, (value & 0x0FFF));
 207   1      }
 208          
 209          /**************************************************************************//**
 210           * Set Htotal (HPLL divider) pixel of SR.
 211           * @param htotal Horizontal pixel count of input timing.
 212           ******************************************************************************/
 213          void SRAPI_SetHtotal(USHRT htotal)
 214          {
 215   1          if (htotal < InputTiming.usCapHActive) {
 216   2              htotal = InputTiming.usCapHActive + 20;
 217   2          }
 218   1          htotal |= 0x8000;
 219   1          WriteShortScaler(&SC_SR_HTOTAL_LO, htotal);
 220   1      }
 221          
 222          /**************************************************************************//**
 223           * Set input timing width and input timing height area of SR.
 224           * @param width Capture width.
 225           * @param height Capture height.
 226           ******************************************************************************/
 227          void SRAPI_SetCaptureSize(USHRT width, USHRT height)
 228          {
 229   1          WriteShortScaler(&SC_SR_HACT_LO, (width& 0x0FFF));
 230   1          WriteShortScaler(&SC_SR_VACT_LO, (height& 0x0FFF));
 231   1          SC_SR_HBACKPORCH = 0x20;
 232   1      }
 233          
 234          /**************************************************************************//**
 235           * Enable SR Block
 236           ******************************************************************************/
 237          void SRAPI_SRBlockEnable(void)
 238          {
C51 COMPILER V9.54   SRAPI                                                                 01/06/2017 14:56:59 PAGE 5   

 239   1      #if IS_NT68870_SERIES  
 240   1          if(GetHCaptureSize() > 2560){// SR limitation
 241   2      #else
                  if(GetHCaptureSize() > 1920){// SR limitation
              #endif
 244   2              SC_ADC_BAND_GAP |= BIT0;
 245   2          }
 246   1          else {
 247   2              SC_ADC_BAND_GAP &= ~BIT0;
 248   2          }
 249   1      }
 250          
 251          /**************************************************************************//**
 252           * Disable SR Block
 253           ******************************************************************************/
 254          void SRAPI_SRBlockDisable(void)
 255          {
 256   1           SC_ADC_BAND_GAP |= BIT0;
 257   1      }
 258          
 259          #endif //ENABLE_SR == ON


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    518    ----
   CONSTANT SIZE    =     28    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
