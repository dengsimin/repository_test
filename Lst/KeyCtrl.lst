C51 COMPILER V9.54   KEYCTRL                                                               01/06/2017 14:56:54 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE KEYCTRL
OBJECT MODULE PLACED IN .\Bin\KeyCtrl.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE App\KeyCtrl.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\App\OSD;.\Ap
                    -p\User;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\Phy\SI\NVT\Key
                    -pad;.\Sys;.\Sys\SI\NVT;.\Phy\SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_MODULE,LVIEW_2560X1
                    -440,FLASH_BANK=8) PRINT(.\Lst\KeyCtrl.lst) TABS(2) OBJECT(.\Bin\KeyCtrl.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          
  14          //******************************************************************************
  15          // G L O B A L   D E F I N I T I O N S
  16          //******************************************************************************
  17          typedef enum _KEY_STATE_ {
  18              KEY_NML_STATE,
  19              KEY_REPEAT_STATE,
  20              KEY_HOLD_STATE,
  21              KEY_MULTIFUNC_STATE,
  22              KEY_LOCK_STATE
  23          } KeyState;
  24          
  25          #define KeyGetRepeatStatus(idx) ((usKeyRepeatFlags >> idx) & BIT0)
  26          #define KeySetRepeatStatus(idx) (usKeyRepeatFlags |= (BIT0 << idx))
  27          #define KeyClrRepeatStatus(idx) (usKeyRepeatFlags &= ~((USHRT)BIT0 << idx))
  28          #define KeySetAllRepeatStatus() (usKeyRepeatFlags = 0xFFFF)
  29          #define KeyClrAllRepeatStatus() (usKeyRepeatFlags = 0x0000)
  30          #define KeyGetHoldStatus(idx)   ((usKeyHoldFlags >> idx) & BIT0)
  31          #define KeySetHoldStatus(idx)   (usKeyHoldFlags |= (BIT0 << idx))
  32          #define KeyClrHoldStatus(idx)   (usKeyHoldFlags &= ~((USHRT)BIT0 << idx))
  33          #define KeySetAllHoldStatus()   (usKeyHoldFlags = 0xFFFF)
  34          #define KeyClrAllHoldStatus()   (usKeyHoldFlags = 0x0000)
  35          #define KeyGetMFuncStatus(idx)   ((usKeyMFuncFlags >> idx) & BIT0)
  36          #define KeySetMFuncStatus(idx)   (usKeyMFuncFlags |= (BIT0 << idx))
  37          #define KeyClrMFuncStatus(idx)   (usKeyMFuncFlags &= ~((USHRT)BIT0 << idx))
  38          #define KeySetAllMFuncStatus()   (usKeyMFuncFlags = 0xFFFF)
  39          #define KeyClrAllMFuncStatus()   (usKeyMFuncFlags = 0x0000)
  40          #define KeyGetLockStatus(idx)   ((usKeyLockFlags >> idx) & BIT0)
  41          #define KeySetLockStatus(idx)   (usKeyLockFlags |= (BIT0 << idx))
  42          #define KeyClrLockStatus(idx)   (usKeyLockFlags &= ~((USHRT)BIT0 << idx))
  43          #define KeySetAllLockStatus()   (usKeyLockFlags = 0xFFFF)
  44          #define KeyClrAllLockStatus()   (usKeyLockFlags = 0x0000)
  45          
  46          //******************************************************************************
  47          // G L O B A L   V A R I A B L E S
  48          //******************************************************************************
  49          
  50          //******************************************************************************
  51          // S T A T I C   V A R I A B L E S
  52          //******************************************************************************
C51 COMPILER V9.54   KEYCTRL                                                               01/06/2017 14:56:54 PAGE 2   

  53          static code UCHAR ucKeyEventMapTable[NUM_KEY_EVENTS][2] = {
  54                  0x00, KEYEVT_NONE,
  55                  KEYCODE_PWR, KEYEVT_PWR,
  56                  KEYCODE_MENU, KEYEVT_MENU,
  57                  KEYCODE_AUTO, KEYEVT_AUTO,
  58                  KEYCODE_INPUT, KEYEVT_INPUT,
  59                  KEYCODE_FUNC, KEYEVT_FUNC,
  60                  KEYCODE_UP, KEYEVT_UP,
  61                  KEYCODE_DOWN, KEYEVT_DOWN,
  62                  KEYCODE_LEFT, KEYEVT_LEFT,
  63                  KEYCODE_RIGHT, KEYEVT_RIGHT,
  64                  KEYCODE_FACT, KEYEVT_FACT,
  65                  KEYCODE_PWLOCK, KEYEVT_PWLOCK,
  66                  KEYCODE_OSDLOCK, KEYEVT_OSDLOCK,
  67                  KEYCODE_TMG_SW, KEYEVT_TIMING_SWITCH,
  68                  KEYCODE_DEMO, KEYEVT_DEMO,
  69          };
  70          
  71          static xdata UCHAR ucMultiFuncKeyEvtTable[NUM_KEY_EVENTS] = {0x00};
  72          static xdata USHRT usKeyRepeatFlags = 0x0000;
  73          static xdata USHRT usKeyHoldFlags = 0x0000;
  74          static xdata USHRT usKeyMFuncFlags = 0x0000;
  75          static xdata USHRT usKeyLockFlags = 0x0000;
  76          static xdata USHRT usKeyHoldTime = KEY_HOLD_TIME;
  77          static xdata USHRT usKeyRepeatTime = KEY_REPEAT_TIME;
  78          static xdata USHRT usKeyLongPressTime = KEY_LONG_PRESS_TIME;
  79          
  80          //******************************************************************************
  81          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  82          //******************************************************************************
  83          static UCHAR SearchKeyCodeIndex(UCHAR cd);
  84          static UCHAR SearchKeyEventIndex(UCHAR evt);
  85          static UCHAR KeyGetKeyEvent(void);
  86          
  87          //******************************************************************************
  88          // Prototype:
  89          //  void KeyActionDispatcher(UCHAR event)
  90          // Parameters:
  91          //  event   : event from system
  92          // Return:
  93          //  None
  94          // Purpose:
  95          //  Perform key action by event id
  96          // Notes:
  97          //  None
  98          //******************************************************************************
  99          void KeyActionDispatcher(UCHAR event)
 100          {
 101   1          switch (event) {
 102   2              default:
 103   2                  break;
 104   2          }
 105   1      }
 106          
 107          //******************************************************************************
 108          // Prototype:
 109          //  UCHAR KeyActionDemander(void)
 110          // Parameters:
 111          //  None
 112          // Return:
 113          //  key event
 114          // Purpose:
C51 COMPILER V9.54   KEYCTRL                                                               01/06/2017 14:56:54 PAGE 3   

 115          //  Return key event to system event handler
 116          // Notes:
 117          //  None
 118          //******************************************************************************
 119          UCHAR KeyActionDemander(void)
 120          {
 121   1          UCHAR evt;
 122   1      
 123   1          evt = KeyGetKeyEvent();
 124   1      
 125   1          return evt;
 126   1      }
 127          
 128          //******************************************************************************
 129          // Prototype:
 130          //  static UCHAR SearchKeyCodeIndex(UCHAR cd)
 131          // Parameters:
 132          //  code : Key code
 133          // Return:
 134          //  Index of key code
 135          // Purpose:
 136          //  Search index of key code
 137          // Notes:
 138          //  None
 139          //******************************************************************************
 140          static UCHAR SearchKeyCodeIndex(UCHAR cd)
 141          {
 142   1          UCHAR i;
 143   1          for (i = 0; i < NUM_KEY_EVENTS; i++) {
 144   2              if (cd == ucKeyEventMapTable[i][0]) {
 145   3                  break;
 146   3              }
 147   2          }
 148   1      
 149   1          // If no code is found, then zero the index.
 150   1          i = i % NUM_KEY_EVENTS;
 151   1      
 152   1          return i;
 153   1      }
 154          
 155          //******************************************************************************
 156          // Prototype:
 157          //  static UCHAR SearchKeyEventIndex(UCHAR evt)
 158          // Parameters:
 159          //  evt : Key event
 160          // Return:
 161          //  Index of key event
 162          // Purpose:
 163          //  Search index of key event
 164          // Notes:
 165          //  None
 166          //******************************************************************************
 167          static UCHAR SearchKeyEventIndex(UCHAR evt)
 168          {
 169   1          UCHAR i;
 170   1          for (i = 0; i < NUM_KEY_EVENTS; i++) {
 171   2              if (evt == ucKeyEventMapTable[i][1]) {
 172   3                  break;
 173   3              }
 174   2          }
 175   1      
 176   1          // If no evt is found, then zero the index.
C51 COMPILER V9.54   KEYCTRL                                                               01/06/2017 14:56:54 PAGE 4   

 177   1          i = i % NUM_KEY_EVENTS;
 178   1      
 179   1          return i;
 180   1      }
 181          
 182          //******************************************************************************
 183          // Prototype:
 184          //  static UCHAR KeyGetKeyEvent(void)
 185          // Parameters:
 186          //  None
 187          // Return:
 188          //  key event
 189          // Purpose:
 190          //  Return key event to system event handler
 191          // Notes:
 192          //  None
 193          //******************************************************************************
 194          static UCHAR KeyGetKeyEvent(void)
 195          {
 196   1          static USHRT localtimer, holdtime;
 197   1          static UCHAR prev_key_idx = 0x00;
 198   1          static KeyState key_state = KEY_NML_STATE;
 199   1          UCHAR cur_key_idx, evt;
 200   1      
 201   1          evt = ScanKeyPad();
 202   1      
 203   1          cur_key_idx = SearchKeyCodeIndex(evt);
 204   1      
 205   1          if (prev_key_idx != cur_key_idx) {
 206   2              if (cur_key_idx == 0x00) {
 207   3                  if (key_state == KEY_MULTIFUNC_STATE)  {
 208   4                      cur_key_idx = prev_key_idx;
 209   4                      prev_key_idx = 0x00;
 210   4                      key_state = KEY_NML_STATE;
 211   4                  }
 212   3                  else {
 213   4                      prev_key_idx = cur_key_idx;
 214   4                  }
 215   3              }
 216   2              else {
 217   3                  prev_key_idx = cur_key_idx;
 218   3                  key_state = KeyGetRepeatStatus(cur_key_idx) ? KEY_REPEAT_STATE : KEY_NML_STATE;
 219   3                  key_state = KeyGetHoldStatus(cur_key_idx) ? KEY_HOLD_STATE : key_state;
 220   3                  key_state = KeyGetMFuncStatus(cur_key_idx) ? KEY_MULTIFUNC_STATE : key_state;
 221   3                  key_state = KeyGetLockStatus(cur_key_idx) ? KEY_LOCK_STATE : key_state;
 222   3      
 223   3                  localtimer = GetTimerTick();
 224   3                  if (key_state == KEY_REPEAT_STATE) {
 225   4                      holdtime = usKeyHoldTime;
 226   4                  }
 227   3                  if (key_state == KEY_HOLD_STATE) {
 228   4                      holdtime = usKeyLongPressTime;
 229   4                      cur_key_idx = 0x00;
 230   4                  }
 231   3                  if (key_state == KEY_MULTIFUNC_STATE) {
 232   4                      holdtime = usKeyLongPressTime;
 233   4                      cur_key_idx = 0x00;
 234   4                  }
 235   3                  if (key_state == KEY_LOCK_STATE) {
 236   4                      prev_key_idx = 0x00;
 237   4                      cur_key_idx = 0x00;
 238   4                  }
C51 COMPILER V9.54   KEYCTRL                                                               01/06/2017 14:56:54 PAGE 5   

 239   3              }
 240   2          }
 241   1          else if ((cur_key_idx != 0x00) && (key_state == KEY_HOLD_STATE)) {
 242   2              if ((GetTimerTick() - localtimer) > holdtime) {
 243   3                  key_state = KEY_NML_STATE;
 244   3                  if(UserData.bOSDLock){
 245   4                  cur_key_idx = 12;
 246   4                  }
 247   3              }
 248   2              else {            
 249   3                  if(!UserData.bOSDLock){
 250   4                  cur_key_idx = 0x00;
 251   4                  }
 252   3              }
 253   2          }
 254   1          else if ((cur_key_idx != 0x00) && (key_state == KEY_MULTIFUNC_STATE)) {
 255   2              if ((GetTimerTick() - localtimer) > holdtime) {
 256   3                  key_state = KEY_NML_STATE;
 257   3                  cur_key_idx = SearchKeyEventIndex(ucMultiFuncKeyEvtTable[cur_key_idx]);
 258   3              }
 259   2              else {
 260   3                  cur_key_idx = 0x00;
 261   3              }
 262   2          }
 263   1          else if ((cur_key_idx != 0x00) && (key_state == KEY_REPEAT_STATE)) {   
 264   2              #if (OSDTYPE == OSD_BENQ_V2)
 265   2              OSDClearKeyColor(TRUE);
 266   2              #endif
 267   2              if ((GetTimerTick() - localtimer) > holdtime) {
 268   3                  localtimer = GetTimerTick();
 269   3                  holdtime = usKeyRepeatTime;
 270   3              }
 271   2              else {
 272   3                  cur_key_idx = 0x00;
 273   3              }
 274   2          }
 275   1          else {
 276   2              #if (OSDTYPE == OSD_BENQ_V2)
 277   2              OSDClearKeyColor(FALSE);
 278   2              #endif
 279   2              localtimer = GetTimerTick();
 280   2              key_state = KEY_NML_STATE;
 281   2              cur_key_idx = 0x00;
 282   2          }
 283   1      
 284   1          evt = ucKeyEventMapTable[cur_key_idx][1];
 285   1      
 286   1          return evt;
 287   1      }
 288          
 289          //******************************************************************************
 290          // Prototype:
 291          //  void KeySetRepeatEvent(UCHAR evt, UCHAR rpt)
 292          // Parameters:
 293          //  evt : Key event
 294          //  rpt : On/Off key repeating
 295          // Return:
 296          //  None
 297          // Purpose:
 298          //  Set key repeating by key event
 299          // Notes:
 300          //  None
C51 COMPILER V9.54   KEYCTRL                                                               01/06/2017 14:56:54 PAGE 6   

 301          //******************************************************************************
 302          void KeySetRepeatEvent(UCHAR evt, UCHAR rpt)
 303          {
 304   1          UCHAR i;
 305   1      
 306   1          if (evt == 0xFF) {
 307   2              // repeat all event
 308   2              if (rpt == ON) {
 309   3                  KeySetAllRepeatStatus();
 310   3              }
 311   2              else {
 312   3                  KeyClrAllRepeatStatus();
 313   3              }
 314   2          }
 315   1      
 316   1          i = SearchKeyEventIndex(evt);
 317   1          if (i) {
 318   2              if (rpt == ON) {
 319   3                  KeySetRepeatStatus(i);
 320   3              }
 321   2              else {
 322   3                  KeyClrRepeatStatus(i);
 323   3              }
 324   2          }
 325   1      }
 326          
 327          //******************************************************************************
 328          // Prototype:
 329          //  void KeySetHoldEvent(UCHAR evt, UCHAR hold)
 330          // Parameters:
 331          //  evt : Key event
 332          //  hold : On/off holding key
 333          // Return:
 334          //  None
 335          // Purpose:
 336          //  Enable / disable holding keys by key event
 337          // Notes:
 338          //  None
 339          //******************************************************************************
 340          void KeySetHoldEvent(UCHAR evt, UCHAR hold)
 341          {
 342   1          UCHAR i;
 343   1      
 344   1          if (evt == 0xFF) {
 345   2              // hold all event
 346   2              if (hold == ON) {
 347   3                  KeySetAllHoldStatus();
 348   3              }
 349   2              else {
 350   3                  KeyClrAllHoldStatus();
 351   3              }
 352   2          }
 353   1      
 354   1          i = SearchKeyEventIndex(evt);
 355   1          if (i) {
 356   2              if (hold == ON) {
 357   3                  KeySetHoldStatus(i);
 358   3              }
 359   2              else {
 360   3                  KeyClrHoldStatus(i);
 361   3              }
 362   2          }
C51 COMPILER V9.54   KEYCTRL                                                               01/06/2017 14:56:54 PAGE 7   

 363   1      }
 364          
 365          //******************************************************************************
 366          // Prototype:
 367          //  void KeySetMFuncEvent(UCHAR major, UCHAR minor)
 368          // Parameters:
 369          //  major : Major key event for short-term key press
 370          //  minor : Minor key event for long-term key press
 371          // Return:
 372          //  None
 373          // Purpose:
 374          //  Set multi-function key events
 375          // Notes:
 376          //  None
 377          //******************************************************************************
 378          void KeySetMFuncEvent(UCHAR major, UCHAR minor)
 379          {
 380   1          UCHAR i;
 381   1      
 382   1          if (major == 0xFF) {
 383   2              // lock all event
 384   2              if (minor == 0x00) {
 385   3                  KeyClrAllMFuncStatus();
 386   3              }
 387   2          }
 388   1      
 389   1          i = SearchKeyEventIndex(major);
 390   1          if (i) {
 391   2              ucMultiFuncKeyEvtTable[i] = minor;
 392   2              if (minor != 0x00) {
 393   3                  KeySetMFuncStatus(i);
 394   3              }
 395   2              else {
 396   3                  KeyClrMFuncStatus(i);
 397   3              }
 398   2          }
 399   1      }
 400          
 401          //******************************************************************************
 402          // Prototype:
 403          //  void KeySetLockEvent(UCHAR evt, UCHAR lock)
 404          // Parameters:
 405          //  evt : Key event
 406          //  lock : Lock / unlock key
 407          // Return:
 408          //  None
 409          // Purpose:
 410          //  Lock / unlock key by key event
 411          // Notes:
 412          //  None
 413          //******************************************************************************
 414          void KeySetLockEvent(UCHAR evt, UCHAR lock)
 415          {
 416   1          UCHAR i;
 417   1      
 418   1          if (evt == 0xFF) {
 419   2              // lock all event
 420   2              if (lock == ON) {
 421   3                  KeySetAllLockStatus();
 422   3              }
 423   2              else {
 424   3                  KeyClrAllLockStatus();
C51 COMPILER V9.54   KEYCTRL                                                               01/06/2017 14:56:54 PAGE 8   

 425   3              }
 426   2          }
 427   1      
 428   1          i = SearchKeyEventIndex(evt);
 429   1          if (i) {
 430   2              if (lock == ON) {
 431   3                  KeySetLockStatus(i);
 432   3              }
 433   2              else {
 434   3                  KeyClrLockStatus(i);
 435   3              }
 436   2          }
 437   1      }
 438          
 439          //******************************************************************************
 440          // Prototype:
 441          //  void KeySetHoldTime(USHRT time)
 442          // Parameters:
 443          //  time : Time to hold key
 444          // Return:
 445          //  None
 446          // Purpose:
 447          //  Set key hold time
 448          // Notes:
 449          //  None
 450          //******************************************************************************
 451          void KeySetHoldTime(USHRT time)
 452          {
 453   1          usKeyHoldTime = time;
 454   1      }
 455          
 456          //******************************************************************************
 457          // Prototype:
 458          //  void KeySetRepeatTime(USHRT time)
 459          // Parameters:
 460          //  time : Time to repeat key
 461          // Return:
 462          //  None
 463          // Purpose:
 464          //  Set key repeat time
 465          // Notes:
 466          //  None
 467          //******************************************************************************
 468          void KeySetRepeatTime(USHRT time)
 469          {
 470   1          usKeyRepeatTime = time;
 471   1      }
 472          
 473          //******************************************************************************
 474          // Prototype:
 475          //  void KeySetLongPressTime(USHRT time)
 476          // Parameters:
 477          //  time : Time to long press key
 478          // Return:
 479          //  None
 480          // Purpose:
 481          //  Set key long press time
 482          // Notes:
 483          //  None
 484          //******************************************************************************
 485          void KeySetLongPressTime(USHRT time)
 486          {
C51 COMPILER V9.54   KEYCTRL                                                               01/06/2017 14:56:54 PAGE 9   

 487   1          usKeyLongPressTime = time;
 488   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    965    ----
   CONSTANT SIZE    =     30    ----
   XDATA SIZE       =     35       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
