C51 COMPILER V9.54   MODESEARCH                                                            01/06/2017 14:56:40 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MODESEARCH
OBJECT MODULE PLACED IN .\Bin\ModeSearch.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Sys\ModeSearch.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\App\OSD;.
                    -\App\User;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\Phy\SI\NVT\
                    -Keypad;.\Sys;.\Sys\SI\NVT;.\Phy\SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_MODULE,LVIEW_256
                    -0X1440,FLASH_BANK=8) PRINT(.\Lst\ModeSearch.lst) TABS(2) OBJECT(.\Bin\ModeSearch.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          
  14          //******************************************************************************
  15          // M A C R O   D E F I N I T I O N S
  16          //******************************************************************************
  17          
  18          //******************************************************************************
  19          // G L O B A L   V A R I A B L E S
  20          //******************************************************************************
  21          
  22          //******************************************************************************
  23          // S T A T I C   V A R I A B L E S
  24          //******************************************************************************
  25          
  26          //******************************************************************************
  27          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  28          //******************************************************************************
  29          extern code ModeTableFormat ModeTable[];
  30          
  31          //******************************************************************************
  32          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  33          //******************************************************************************
  34          static UCHAR GetAverageInputVSyncWidth(void);
  35          static void CopyModeTable(UCHAR index);
  36          static UCHAR GetNextSimilarTiming(void);
  37          static BOOL IsNonSupportMode(USHRT mode);
  38          static UCHAR SearchModeIndex(USHRT mode);
  39          
  40          //******************************************************************************
  41          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
  42          //******************************************************************************
  43          
  44          //******************************************************************************
  45          // F U N C T I O N   B O D Y S
  46          //******************************************************************************
  47          
  48          /**************************************************************************//**
  49           * Search current timing in mode table and read back current timing information from NVRam.
  50           ******************************************************************************/
  51          void ModeSearch(void)
  52          {
C51 COMPILER V9.54   MODESEARCH                                                            01/06/2017 14:56:40 PAGE 2   

  53   1      #if ENABLE_FREESYNC_DEMO == ON
                  SetFreeSyncMode();
              #endif
  56   1          SetupInterlace();
  57   1      
  58   1      #if ENABLE_HDMI == ON
  59   1          // For HDMI model, we must set 0x6B5 in SetColorSpace before reading
  60   1          // 0x03C/0x03D for pixel repetition timing.
  61   1          SetCSCColorSpace(CSC_HDMI_AUTO_CLR_SPACE);
  62   1      #endif
  63   1      
  64   1          if (GetInputSyncMode() != DIG_SYNC) { //Analog Input
  65   2              BOOL found_in_mode_table;
  66   2              UCHAR i, j, k;
  67   2              UCHAR vsync_width;
  68   2              USHRT vtotal, vtotal_diff = 0xFFFF;
  69   2              ULONG weight, min_weight = 0xFFFFFFFF;
  70   2      
  71   2              vsync_width = GetAverageInputVSyncWidth();
  72   2              found_in_mode_table = FALSE;
  73   2      
  74   2              for (i=0; ModeTable[i].usHSyncFreq != 0xFFFF; i++) {
  75   3                  //If mode is not support, go to next mode.
  76   3                  if (IsNonSupportMode(ModeTable[i].usModeIndex)) {
  77   4                      continue;
  78   4                  }
  79   3                  //Compare interlaced.
  80   3                  if (IsInterlaced() != (ModeTable[i].usModeIndex & BIT0)) {
  81   4                      continue;
  82   4                  }
  83   3                  //Record the mode with nearest VTotal
  84   3                  if ((InputTiming.usVTotal>ModeTable[i].usModeVActive) && (abs(InputTiming.usVTotal-ModeTable[i
             -].usVTotal)<vtotal_diff)) {
  85   4                      vtotal_diff = abs(InputTiming.usVTotal-ModeTable[i].usVTotal);
  86   4                      j = i;
  87   4                  }
  88   3                  //Compare HSync Frequency
  89   3                  if (abs(InputTiming.usHSyncFreq-ModeTable[i].usHSyncFreq) > ModeTable[i].ucHSyncTolerance) {
  90   4                      continue;
  91   4                  }
  92   3                  //Compare VSync Frequency
  93   3                  if (abs(InputTiming.usVSyncFreq-ModeTable[i].usVSyncFreq) > ModeTable[i].ucVSyncTolerance) {
  94   4                      continue;
  95   4                  }
  96   3                  //Compare HSync/VSync Polarity
  97   3                  if ((GetInputSyncMode()==SEP_SYNC) && (InputTiming.ucHVPolarity&ModeTable[i].ucHVPolarity) == 
             -0x00) {
  98   4                      // Don't check sync polarity in composite/sog sync mode
  99   4                      continue;
 100   4                  }
 101   3                  //Compare VTotal
 102   3                  vtotal = InputTiming.usVTotal;
 103   3                  if (IsInterlaced() == TRUE) {
 104   4                      vtotal <<= 1;
 105   4                  }
 106   3                  if (vtotal <= ModeTable[i].usModeVActive) {
 107   4                      // Input vtotal must be larger than input vactive
 108   4                      continue;
 109   4                  }
 110   3      
 111   3                  found_in_mode_table = TRUE; //Found one timing that satisfies the constrain in mode table
 112   3                  weight = abs(InputTiming.usHSyncFreq-ModeTable[i].usHSyncFreq) + abs(InputTiming.usVSyncFreq-M
C51 COMPILER V9.54   MODESEARCH                                                            01/06/2017 14:56:40 PAGE 3   

             -odeTable[i].usVSyncFreq);
 113   3                  weight += abs(InputTiming.usVTotal-ModeTable[i].usVTotal) << 2;
 114   3                  weight = weight * 100 + abs(vsync_width-ModeTable[i].ucVSyncWidth);
 115   3      
 116   3                  if (weight < min_weight) {
 117   4                      min_weight = weight; //Record the min weight and mode table index
 118   4                      k = i;
 119   4                  }
 120   3              }
 121   2      
 122   2              //Found current timing in ModeTable
 123   2              if (found_in_mode_table == TRUE) {
 124   3                  CopyModeTable(k);
 125   3                  if (NvramReadTimingData(&InputTiming) == FALSE) { //can not find current timing in Nvram
 126   4                      NvramWriteTimingData(&InputTiming);
 127   4                  }
 128   3              }
 129   2              else { //Can not find current timing in ModeTable (It's a new timing)
 130   3                  CopyModeTable(j); //Copy the timing data from the mode with nearest VTotal
 131   3                  InputTiming.usModeIndex = _NEW_MODE | (InputTiming.usModeIndex>>8);
 132   3                  //Read current timing data from NVRAM. If the timing data doesn't exist, initialize the Nvram
 133   3                  if (NvramReadTimingData(&InputTiming) == FALSE) {
 134   4                      //Write the initialized nvram into Nvram
 135   4                      NvramWriteTimingData(&InputTiming);
 136   4                  }
 137   3              }
 138   2          }
 139   1          else { //Digital Input
 140   2              UCHAR i;
 141   2              USHRT vactive = GetDigInputVActive();
 142   2              if (IsInterlaced()) {
 143   3                  vactive = vactive * 2;
 144   3              }
 145   2      
 146   2              InputTiming.usModeHActive = GetDigInputHActive();
 147   2              InputTiming.usModeVActive = vactive;
 148   2              InputTiming.usCapHActive = InputTiming.usModeHActive;
 149   2              InputTiming.usCapVActive = InputTiming.usModeVActive;
 150   2              InputTiming.usHStart = 0;
 151   2              InputTiming.usVStart = 0x1E0;
 152   2              InputTiming.usHStart50 = InputTiming.usHStart;
 153   2              InputTiming.usVStart50 = InputTiming.usVStart;
 154   2              InputTiming.usModeIndex = _NEW_MODE;
 155   2              for (i = 0; ModeTable[i].usHSyncFreq != 0xFFFF; i++) {
 156   3                  if ((abs(InputTiming.usModeHActive - ModeTable[i].usCapHActive) <= 5) && // To distinguish 136
             -0x768 & 1366x768
 157   3                      (abs(InputTiming.usModeVActive - ModeTable[i].usCapVActive) <= 6) && // Force 720x486 to b
             -e recognized as 720x480
 158   3                      (abs(InputTiming.usHSyncFreq - ModeTable[i].usHSyncFreq) < 10) &&
 159   3                      (abs(InputTiming.usVSyncFreq - ModeTable[i].usVSyncFreq) < 10)) {
 160   4                      InputTiming.usModeHActive = ModeTable[i].usModeHActive;
 161   4                      InputTiming.usModeVActive = ModeTable[i].usModeVActive;
 162   4                      InputTiming.usModeIndex = ModeTable[i].usModeIndex;
 163   4                      break;
 164   4                  }
 165   3              }
 166   2          }
 167   1      }
 168          
 169          /**************************************************************************//**
 170           * Get average input VSync width.
 171           * @return VSync width.
C51 COMPILER V9.54   MODESEARCH                                                            01/06/2017 14:56:40 PAGE 4   

 172           ******************************************************************************/
 173          static UCHAR GetAverageInputVSyncWidth(void)
 174          {
 175   1          #define TOTAL_COUNT  20
 176   1          #define STABLE_COUNT 3
 177   1      
 178   1          USHRT sum_vsync_width;
 179   1          UCHAR tmp_vsync_width, prv_vsync_width;
 180   1          UCHAR counter;
 181   1          UCHAR stable_flag;
 182   1          UCHAR vsync_width_0, vsync_width_1;
 183   1      
 184   1          sum_vsync_width = 0;
 185   1          prv_vsync_width = GetInputVSyncWidth();
 186   1      
 187   1          stable_flag = TRUE;
 188   1          vsync_width_0 = 0xFF;
 189   1          vsync_width_1 = 0xFF;
 190   1      
 191   1          for (counter = 0; counter < TOTAL_COUNT; counter++) {
 192   2      
 193   2              tmp_vsync_width = GetInputVSyncWidth();
 194   2      
 195   2              if (tmp_vsync_width != prv_vsync_width) {
 196   3                  stable_flag = FALSE; //VSW stable
 197   3              }
 198   2      
 199   2              if ((TRUE == stable_flag) && (counter > STABLE_COUNT)) {
 200   3                  prv_vsync_width++;
 201   3                  return prv_vsync_width;
 202   3              }
 203   2      
 204   2              if (0xFF == vsync_width_0) {
 205   3                  vsync_width_0 = tmp_vsync_width;
 206   3              }
 207   2              else if (vsync_width_0 != tmp_vsync_width) {
 208   3                  if (0xFF == vsync_width_1) {
 209   4                      vsync_width_1 = tmp_vsync_width;
 210   4                  }
 211   3                  else if (vsync_width_1 != tmp_vsync_width) {
 212   4                      prv_vsync_width = ((vsync_width_0 + vsync_width_1 + tmp_vsync_width) / 3) + 1;
 213   4                      return prv_vsync_width;
 214   4                  }
 215   3                  else {
 216   4                      //tmp_vsync_width equal to  vsync_width_1
 217   4                  }
 218   3              }
 219   2              else {
 220   3                  //tmp_vsync_width equal to  vsync_width_0
 221   3              }
 222   2      
 223   2              sum_vsync_width += tmp_vsync_width;
 224   2              DelayVTime(1);
 225   2          }
 226   1      
 227   1          prv_vsync_width = (sum_vsync_width + (counter / 2)) / counter;
 228   1          prv_vsync_width++;
 229   1      
 230   1          return prv_vsync_width;
 231   1      
 232   1          #undef TOTAL_COUNT
 233   1          #undef STABLE_COUNT
C51 COMPILER V9.54   MODESEARCH                                                            01/06/2017 14:56:40 PAGE 5   

 234   1      }
 235          
 236          /**************************************************************************//**
 237           * Copy the timing information from NVRam to InputTiming.
 238           * @param index Timing index in mode table.
 239           ******************************************************************************/
 240          static void CopyModeTable(UCHAR index)
 241          {
 242   1          InputTiming.usModeHActive = ModeTable[index].usModeHActive;
 243   1          InputTiming.usModeVActive = ModeTable[index].usModeVActive;
 244   1          InputTiming.usCapHActive = ModeTable[index].usCapHActive;
 245   1          InputTiming.usCapVActive = ModeTable[index].usCapVActive;
 246   1          InputTiming.usHTotal = ModeTable[index].usHTotal;
 247   1          InputTiming.usHStart = ModeTable[index].usHStart;
 248   1          InputTiming.usVStart = ModeTable[index].usVStart;
 249   1          InputTiming.usHTotal50 = ModeTable[index].usHTotal;
 250   1          InputTiming.usHStart50 = ModeTable[index].usHStart;
 251   1          InputTiming.usVStart50 = ModeTable[index].usVStart;
 252   1          InputTiming.ucPhase = 0x20;
 253   1          InputTiming.ucAutoTune = 0;
 254   1          InputTiming.usModeIndex = ModeTable[index].usModeIndex;
 255   1      
 256   1          if (ModeTable[index].ucSampling != OFF) {
 257   2              InputTiming.usCapHActive = InputTiming.usCapHActive*ModeTable[index].ucSampling;
 258   2              InputTiming.usHTotal = InputTiming.usHTotal*ModeTable[index].ucSampling;
 259   2              InputTiming.usHStart = InputTiming.usHStart*ModeTable[index].ucSampling;
 260   2              InputTiming.usHTotal50 = InputTiming.usHTotal50*ModeTable[index].ucSampling;
 261   2              InputTiming.usHStart50 = InputTiming.usHStart50*ModeTable[index].ucSampling;
 262   2          }    
 263   1      }
 264          
 265          /**************************************************************************//**
 266           * Get the index of next similar timing in the mode table.
 267           * 0x00 ~ 0xFE: The index of next similar timing.
 268           * 0xFF: We can not find next similar timing in the mode table. There may be no similar timing or it's a n
             -ew timing.
 269           * @return Timing index in the mode table.
 270           ******************************************************************************/
 271          static UCHAR GetNextSimilarTiming(void)
 272          {
 273   1          BOOL found=FALSE;
 274   1          UCHAR i;
 275   1      
 276   1          for (i=0; ModeTable[i].usHSyncFreq != 0xFFFF; i++) {
 277   2              //Find current input timing first
 278   2              if (InputTiming.usModeIndex == ModeTable[i].usModeIndex) {
 279   3                  found = TRUE;
 280   3                  break;
 281   3              }
 282   2          }
 283   1      
 284   1          if (found == TRUE) {
 285   2              for (i++; ; i++) {
 286   3                  if (ModeTable[i].usHSyncFreq == 0xFFFF) { //End of the mode table
 287   4                      i = 0;
 288   4                  }
 289   3                  if (InputTiming.usModeIndex == ModeTable[i].usModeIndex) {
 290   4                      return 0xFF;
 291   4                  }
 292   3                  else if ((InputTiming.usModeIndex>>8) == (ModeTable[i].usModeIndex>>8)) {
 293   4                      return i;
 294   4                  }
C51 COMPILER V9.54   MODESEARCH                                                            01/06/2017 14:56:40 PAGE 6   

 295   3              }
 296   2          }
 297   1          else {
 298   2              return 0xFF;
 299   2          }
 300   1      }
 301          
 302          /**************************************************************************//**
 303           * Switch to next similar timing in the mode table.
 304           ******************************************************************************/
 305          void SimilarTimingSwitch(void)
 306          {
 307   1          UCHAR next_similar_timing;
 308   1      
 309   1          if (GetInputSyncMode() == DIG_SYNC) { 
 310   2              return;
 311   2          }
 312   1      
 313   1          next_similar_timing = GetNextSimilarTiming();
 314   1          if (next_similar_timing == 0xFF) {
 315   2              return;
 316   2          }
 317   1          else {
 318   2              CopyModeTable(next_similar_timing);
 319   2              NvramWriteTimingData(&InputTiming);
 320   2              SetInputInterface(GetCurrInputInterface());
 321   2          }
 322   1      }
 323          
 324          /**************************************************************************//**
 325           * Check the system can support the present timing or not.
 326           * @param mode Mode index.
 327           ******************************************************************************/
 328          static BOOL IsNonSupportMode(USHRT mode)
 329          {
 330   1          #define NUM_NONSPPRT_MODE (sizeof(NonSupportModeList)/sizeof(NonSupportMode))
 331   1      
 332   1          code NonSupportMode NonSupportModeList[] = {
 333   1              RES_1024X768_NONSUPPORT_LIST,
 334   1              RES_1280X1024_NONSUPPORT_LIST,
 335   1              RES_1366X768_NONSUPPORT_LIST,
 336   1              RES_1400X1050_NONSUPPORT_LIST,
 337   1              RES_1440X900_NONSUPPORT_LIST,
 338   1              RES_1600X900_NONSUPPORT_LIST,
 339   1              RES_1680X1050_NONSUPPORT_LIST,
 340   1              RES_1920X1080_NONSUPPORT_LIST,
 341   1              RES_1920X1200_NONSUPPORT_LIST
 342   1          };
 343   1      
 344   1          UCHAR i;
 345   1      
 346   1          for (i = 0; i < NUM_NONSPPRT_MODE; i++) {
 347   2              if (PANEL_RESOLUTION == NonSupportModeList[i].ucResolution) {
 348   3                  if (mode == NonSupportModeList[i].usNonSupportMode) {
 349   4                      return TRUE;
 350   4                  }
 351   3              }
 352   2          }
 353   1      
 354   1          return FALSE;
 355   1      
 356   1          #undef NUM_NONSPPRT_MODE
C51 COMPILER V9.54   MODESEARCH                                                            01/06/2017 14:56:40 PAGE 7   

 357   1      }
 358          
 359          #if 0
              /**************************************************************************//**
               * Search the timing index in the mode table with a given mode index.
               * @mode Mode index.
               ******************************************************************************/
              static UCHAR SearchModeIndex(USHRT mode)
              {
                  UCHAR i;
                  for (i = 0; ModeTable[i].usHSyncFreq != 0xFFFF; i++) {
                      if (mode == ModeTable[i].usModeIndex) {
                          break;
                      }
                  }
              
                  if (ModeTable[i].usHSyncFreq == 0xFFFF) {
                      i = 0xFF;
                  }
              
                  return i;
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1996    ----
   CONSTANT SIZE    =     39    ----
   XDATA SIZE       =   ----      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
