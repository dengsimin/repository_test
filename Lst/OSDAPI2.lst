C51 COMPILER V9.54   OSDAPI2                                                               01/06/2017 14:57:13 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OSDAPI2
OBJECT MODULE PLACED IN .\Bin\OSDAPI2.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Lib\NT68810 Series\OSDAPI2.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App
                    -;.\App\OSD;.\App\User;.\Lib;.\Lib\NT68810 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.
                    -\Phy\SI\NVT\Keypad;.\Sys;.\Sys\SI\NVT;.\Phy\SI\NVT\Keypad\NT68870_MODULE_KEYPAD) DEFINE(SCALER_TYPE=NT68870,NT68870_MODU
                    -LE,LVIEW_2560X1440,FLASH_BANK=8) PRINT(.\Lst\OSDAPI2.lst) TABS(2) OBJECT(.\Bin\OSDAPI2.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          
  14          //******************************************************************************
  15          // G L O B A L   D E F I N I T I O N S
  16          //******************************************************************************
  17          
  18          //******************************************************************************
  19          // G L O B A L   V A R I A B L E S
  20          //******************************************************************************
  21          
  22          
  23          //******************************************************************************
  24          // S T A T I C   V A R I A B L E S
  25          //******************************************************************************
  26          
  27          
  28          
  29          //******************************************************************************
  30          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  31          //******************************************************************************
  32          
  33          //******************************************************************************
  34          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
  35          //******************************************************************************
  36          
  37          //******************************************************************************
  38          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  39          //******************************************************************************
  40          
  41          
  42          /**************************************************************************//**
  43           * Set OSD position on screen.
  44           * @param x x position of OSD on screen. Step unit is font width.
  45           * @param y y position of OSD on screen. Step unit is font height.
  46           ******************************************************************************/
  47          #if !lrd_dis_benq
              void OSDAPI_SetPosition(USHRT x, USHRT y)
              {
              #define OSDPOS_BOUNDRY(a,b,c) ((a < (b * c)) ? 0 : (a - b * c))
              
                  USHRT fw, fh, ow, oh;
C51 COMPILER V9.54   OSDAPI2                                                               01/06/2017 14:57:13 PAGE 2   

                  USHRT xy; 
                  //printf("OSD position =%x,%x,%x\r\n",(USHRT)x,(USHRT)y,(USHRT)bOSDAdjust);
                  if(!bOSDAdjust){ 
                      OSDAPI_OSDPowerOn(); 
                  }
                  
                  fw = OSDAPI_GetOSDFontWidth();
                  fh = OSDAPI_GetOSDFontHeight();
                  ow = OSDAPI_GetOSDWidth();
                  oh = OSDAPI_GetOSDHeight();
                  x = x/2*2;   
                  
                  switch(GetOSDPosRot()) {
                      //case OSD_POS_ROT_90: // 90
                      //    break;
                      //case OSD_POS_ROT_180: //180
                      //    break;
                      case OSD_POS_ROT_270: //270
                          xy = UserPanelData.usWidth - OSD_YPOS_TOP_OFFSET - OSD_YPOS_BOTTOM_OFFSET;
                          xy = (ULONG) OSDPOS_BOUNDRY(xy, fh, oh) * (OSD_POS_STEPS - y) / OSD_POS_STEPS;
                          xy += OSD_YPOS_TOP_OFFSET;
                          SC_OSD_HS_LO = (xy & 0x00FF);
                          SC_OSD_HS_HI = (xy & 0xFF00) >> 8;
                          SC_OSD_HW = ow - 1;
              
                          xy = UserPanelData.usHeight - OSD_XPOS_LEFT_OFFSET - OSD_XPOS_RIGHT_OFFSET;
                          xy = (ULONG) OSDPOS_BOUNDRY(xy, fw, ow) * x / OSD_POS_STEPS;
                          xy += OSD_XPOS_RIGHT_OFFSET;
                          SC_OSD_VS_LO = (xy & 0x00FF);
                          SC_OSD_VS_HI = (xy & 0xFF00) >> 8;
                          SC_OSD_VH = oh - 1;
                          break;
                      default:
                          xy = UserPanelData.usWidth - OSD_XPOS_LEFT_OFFSET - OSD_XPOS_RIGHT_OFFSET;
                          xy = (ULONG) OSDPOS_BOUNDRY(xy, fw, ow) * x / OSD_POS_STEPS;
                          xy += OSD_XPOS_LEFT_OFFSET;
                          SC_OSD_HS_LO = (xy & 0x00FF);
                          SC_OSD_HS_HI = (xy & 0xFF00) >> 8;
                          SC_OSD_HW = ow - 1;
              
                          xy = UserPanelData.usHeight - OSD_YPOS_TOP_OFFSET - OSD_YPOS_BOTTOM_OFFSET;
                          xy = (ULONG) OSDPOS_BOUNDRY(xy, fh, (oh*(OSDtimes+1))) * (OSD_POS_STEPS - y) / OSD_POS_STEPS;
                          xy += OSD_YPOS_TOP_OFFSET;
                          SC_OSD_VS_LO = (xy & 0x00FF);
                          SC_OSD_VS_HI = (xy & 0xFF00) >> 8;
                          SC_OSD_VH = oh - 1;
                          break;
                  }
                  
              #if ENABLE_POSTFRC == ON //2012/1/22 v=15hz
                  WaitDisVSync();
                  WaitDisVSync();
              #endif
                  WaitDisVSync();  // Always waiting display VSync to insure OSD H/V has been
                                   // loaded into scaler.
                                   // Jude 2010/10/08
                  bOSDAdjust = FALSE;                 
              #undef OSDPOS_BOUNDRY
              }
              #endif
 113          #if 0 //  lrd :“∆∂ØµΩ¡Àcommom
              //******************************************************************************
C51 COMPILER V9.54   OSDAPI2                                                               01/06/2017 14:57:13 PAGE 3   

              // Prototype: 
              //  void OSDAPI_SetIndentString(UCHAR *ptr) small
              // Parameters:
              //  *ptr  : pointer to font index of indent string
              // Return:
              //  None
              // Purpose:
              //  Pre-load font data of indent string in scaler.
              // Notes:
              //  None
              //******************************************************************************
              void OSDAPI_SetIndentString(UCHAR *ptr) small
              {
                  UCHAR i, l, w, Row, wd_point, height;
                  USHRT tmp_state;
                  USHRT m,k;//k type AOC ID2009
                  tFontTable LoadFontTable;
                  ResetWDTimer();
                  tmp_state=GetOSDState();
              
                  ucIndentStringLen = 0;
                  //string width
                  m = 0;
                  l = ptr[0] + 1;
                  for (i=1; i<l; i++) {
                      k = ptr[i];// - 0x20; offset
              
                  //== ======== AOC ID2009 ====================================
                      if (Custom_System.bForceLanguage == TRUE) {
                          InitFont_Europe();
                      }
                      else {
                          InitFontTableByLang(k,&LoadFontTable);
                          if(UserData.ucLanguage == OSDLANG_JAPANESE) {
                          }
                          else if(UserData.ucLanguage == OSDLANG_CHINESE_T) {
                          }
                          else if(UserData.ucLanguage == OSDLANG_CHINESE_S) {
                          }
                          else{
                              if( k >= OSDCOMMONEFONT ) {
                                  k -= OSDCOMMONEFONT;
                              }
                          }
                          }
              
                      m += pIndentWidthBase[k];
                  }
                  //Alignment
                  if (OSDAPI_GetAlignType() == 0) { //Left
                      wd_point = 0;
                  }
                  else if (OSDAPI_GetAlignType() == 1) { //Right
                      m = (USHRT)ucIndentWidth * 12 - m;
                      wd_point = m % 12;
                  }
                  else if (OSDAPI_GetAlignType() == 2) { //Center
                      m = (USHRT)ucIndentWidth * 12 - m;
                      k = m / 12;
                      wd_point = m % 12;
                      if ((k & BIT0) != 0) {
                          wd_point += 12;
C51 COMPILER V9.54   OSDAPI2                                                               01/06/2017 14:57:13 PAGE 4   

                      }
                      wd_point >>= 1;
                  }
              
                  height = OSDAPI_GetOSDFontHeight();
                  for (Row=0; Row<height; Row++) {
                      usIndentFontBuffer[Row] = 0;
                  }
                  //write font
                  for (i=1; i<l; i++) {
                      k = ptr[i];// - 0x20;        //get font and font width
              
              //== ======== AOC ID2009 ====================================
                      if (Custom_System.bForceLanguage == FALSE)
                      {
                          InitFontTableByLang(k,&LoadFontTable);
                                  
                           if (UserData.ucLanguage == OSDLANG_CHINESE_T ) {
                              if(bSelectTable == OSDFontTble1){
                                  InitFont_TC_Table1();
                               }
                               else{
                                  InitFont_TC_Table2();
                               }
                          }
                          else if (UserData.ucLanguage == OSDLANG_CHINESE_S) {
                              if(bSelectTable == OSDFontTble1){
                                  InitFont_SC_Table1();
                               }
                               else{
                                   InitFont_SC_Table2();
                               }
                          }
                          else if (UserData.ucLanguage == OSDLANG_JAPANESE) {
                              if(bSelectTable == OSDFontTble1){
                                  InitFont_Japan_Table1();
                               }
                               else{
                                   InitFont_Japan_Table2();
                               }
                          }
                          else if(UserData.ucLanguage == OSDLANG_FRENCH && k >= OSDCOMMONEFONT){
                              InitFont_Franais();
                          }
                          else if(UserData.ucLanguage == OSDLANG_GERMAN && k >= OSDCOMMONEFONT){
                              InitFont_Deutsch();
                          }
                          else if(UserData.ucLanguage == OSDLANG_ITALIAN&& k >= OSDCOMMONEFONT){
                              InitFont_Italiano();
                          }
                          else if(UserData.ucLanguage == OSDLANG_SPANISH && k >= OSDCOMMONEFONT){
                              InitFont_Espanol();
                          }
                          
                          else if(UserData.ucLanguage == OSDLANG_SPANISH && k >= OSDCOMMONEFONT){
                              InitFont_Espanol();
                          }        
                          else if(UserData.ucLanguage == OSDLANG_POLISH && k >= OSDCOMMONEFONT){
                              InitFont_Polski();
                          }
                          
                          else if(UserData.ucLanguage == OSDLANG_CZECH && k >= OSDCOMMONEFONT){
C51 COMPILER V9.54   OSDAPI2                                                               01/06/2017 14:57:13 PAGE 5   

                              InitFont_Cesky();
                          }
                          else if(UserData.ucLanguage == OSDLANG_HUNGARIAN && k >= OSDCOMMONEFONT){
                              InitFont_Magyar();
                          }
                          
                          else if(UserData.ucLanguage == OSDLANG_SERBO&& k >= OSDCOMMONEFONT){
                              InitFont_SiCG();
                          }
                          else if(UserData.ucLanguage == OSDLANG_ROMANA && k >= OSDCOMMONEFONT){
                              InitFont_Romana();
                          }
                         else if(UserData.ucLanguage == OSDLANG_RUSSIAN && k >= OSDCOMMONEFONT){
                              InitFont_Pyccknn();
                          }
                          else if(UserData.ucLanguage == OSDLANG_SWEDISH && k >= OSDCOMMONEFONT){
                              InitFont_Svenska();
                          }
                          else if(UserData.ucLanguage == OSDLANG_PORTUGUESE && k >= OSDCOMMONEFONT){
                              InitFont_Portugus();
                          }
              #if OSDLANG_ARAB != OSDLANG_NONE
                          else if(UserData.ucLanguage == OSDLANG_ARAB&& k >= OSDCOMMONEFONT){
                              InitFont_ARAB();
                          }    
              #endif        
                          else {    
                              InitFont_Europe();
                          }
                          
                          if(UserData.ucLanguage == OSDLANG_JAPANESE) {
                          }
                          else if(UserData.ucLanguage == OSDLANG_CHINESE_T) {
                          }
                          else if(UserData.ucLanguage == OSDLANG_CHINESE_S) {
                          }
                          else{
                            if( k >= OSDCOMMONEFONT ) {
                                k -= OSDCOMMONEFONT;
                            }
                          }            
                      }
                      else{
                            InitFontTableByLang(k,&LoadFontTable);
                      }
              //=======================================================
                  
                      w = pIndentWidthBase[k]; //get font font width
              
                      m = k * (LoadFontTable.height);
              
                      if (wd_point == 0) {
                          for (Row=0; Row<LoadFontTable.height; Row++) {
                                usIndentFontBuffer[Row+LoadFontTable.head] = pIndentFontBase[m+Row];
                          }
                      }
                      else {
                          for (Row=0; Row<LoadFontTable.height; Row++) {
                                usIndentFontBuffer[Row+LoadFontTable.head] |= (pIndentFontBase[m+Row] >> wd_point);
                          }
                      }
                      wd_point += w;
C51 COMPILER V9.54   OSDAPI2                                                               01/06/2017 14:57:13 PAGE 6   

                      do {
              
                          if (wd_point == 12) { //buffer full?
                              OSDAPI_LoadIndentFont();
                              wd_point = 0;
                          }
                          else if (wd_point> 12) {
                              OSDAPI_LoadIndentFont();
                              wd_point -= 12;
                              for (Row=0; Row<LoadFontTable.height; Row++) {
                                      usIndentFontBuffer[Row+LoadFontTable.head] =
                                      (pIndentFontBase[m+Row] << (w - wd_point));
                              }
                          }
                      }while(wd_point>11);
                  }
                  ResetWDTimer();
                  //write back space
                  if (wd_point != 0) {
                      OSDAPI_LoadIndentFont();
                      wd_point = 0;
                  }
              }
              #endif
 325          
 326          #if ENABLE_OSD_ROTATION == ON
 327          #if !lrd_dis_benq
              /**************************************************************************//**
               * Rotate selected OSD window.
               * @param id Window ID.
               * @param rot Rotation degree.
               ******************************************************************************/
              void OSDAPI_RotateOSDWin(OSDWindow id, OSDPosRotation rot)
              {
                  USHRT sx, sy, ex, ey, tmp;
                  UCHAR dir;
                  OSDPosRotation prev_rot;
                  OSDWinDegree degree;
              
                  if (id > OSD_WINDOW8) {
                      return;
                  }
              
                  OSDAPI_SelOSDWin(id);
              
                  tmp = (USHRT)SC_OSD_WIN_HOR_HI;
                  sx = ((tmp & 0x0F) << 8) + SC_OSD_WIN_HOR_START_LO;
                  ex = ((tmp & 0xF0) << 4) + SC_OSD_WIN_HOR_END_LO;
                  tmp = (USHRT)SC_OSD_WIN_VER_HI;
                  sy = ((tmp & 0x0F) << 8) + SC_OSD_WIN_VER_START_LO;
                  ey = ((tmp & 0xF0) << 4) + SC_OSD_WIN_VER_END_LO;
              
                  prev_rot = GetOSDWinRotStatus(id);
                  degree = (NUM_OSD_WIN_DEGREE + rot - prev_rot) % NUM_OSD_WIN_DEGREE;
              
                  if ((prev_rot == OSD_POS_ROT_90) || (prev_rot == OSD_POS_ROT_270)) {
                      dir = TRUE;
                  }
                  else {
                      dir = FALSE;
                  }
                  OSDAPI_RotateOSDWinPosition(sx, sy, ex, ey, degree, dir);
C51 COMPILER V9.54   OSDAPI2                                                               01/06/2017 14:57:13 PAGE 7   

              
                  if ((degree == OSD_WIN_DEGREE_90) || (degree == OSD_WIN_DEGREE_270)) {
                      dir = !(SC_OSD_WIN_GRADIENT_CTRL & BIT4);
                      SC_OSD_WIN_GRADIENT_CTRL &= ~BIT4;
                      SC_OSD_WIN_GRADIENT_CTRL |= (dir << 4);
                  }
              
              //    SC_OSD_WIN_GRADIENT_RED_COLOR = ((pixel&0x1F) | ((inc&BIT0) << 7));
              //    SC_OSD_WIN_GRADIENT_GREEN_COLOR = ((pixel&0x1F) | ((inc&BIT0) << 7));
              //    SC_OSD_WIN_GRADIENT_BLUE_COLOR = ((pixel&0x1F) | ((inc&BIT0) << 7));
              
                  SetOSDWinRotStatus(id, rot);
              }
              #endif
 377          /**************************************************************************//**
 378           * Set the position of OSD window with rotation.
 379           * @param sx Start position of x.
 380           * @param sy Start position of y.
 381           * @param ex End position of x.
 382           * @param ey End position of y.
 383           * @param degree Rotation degree.
 384           * @param rot TRUE if OSD has been rotated 90/270 degree. Otherwise FALSE.
 385           ******************************************************************************/
 386          //static void OSDAPI_RotateOSDWinPosition(USHRT sx, USHRT sy, USHRT ex, USHRT ey, OSDWinDegree degree, UCH
             -AR rot)
 387          void OSDAPI_RotateOSDWinPosition(USHRT sx, USHRT sy, USHRT ex, USHRT ey, OSDWinDegree degree, UCHAR rot)
 388          {
 389   1          USHRT fw, fh, ow, oh;
 390   1          USHRT tmp1, tmp2;
 391   1          UCHAR border;
 392   1      
 393   1          if (rot) {
 394   2              fh = OSDAPI_GetOSDFontWidth();
 395   2              fw = OSDAPI_GetOSDFontHeight();
 396   2              oh = OSDAPI_GetOSDWidth();
 397   2              ow = OSDAPI_GetOSDHeight();        
 398   2          }
 399   1          else {
 400   2              fw = OSDAPI_GetOSDFontWidth();
 401   2              fh = OSDAPI_GetOSDFontHeight();
 402   2              ow = OSDAPI_GetOSDWidth();
 403   2              oh = OSDAPI_GetOSDHeight();
 404   2           fh = fh*(OSDtimes+1);
 405   2           fw = fw*(OSDtimes+1);
 406   2           oh = oh*(OSDtimes+1);
 407   2           ow = ow*(OSDtimes+1);    
 408   2          }
 409   1          //printf("->OSDAPI_RotateOSDWinPosition\r\n");
 410   1          //printf("fw=%x,fh=%x,ow=%x,oh=%x,OSDtimes=%x\r\n",(USHRT)fw,(USHRT)fh,(USHRT)ow,(USHRT)oh,(USHRT)OSDt
             -imes);
 411   1          
 412   1          border = 0;
 413   1          if (SC_OSD_WIN_ATTRIBUTE & BIT7) {
 414   2              border = (SC_OSD_WIN_BEVEL_WIDTH & 0x07) + 1;
 415   2          }
 416   1      
 417   1          switch (degree) {
 418   2              case OSD_WIN_DEGREE_90 :
 419   2                  tmp1 = sx;
 420   2                  tmp2 = ex;
 421   2                  sx = fh * oh - ey;
 422   2                  if (sx >= border) {
C51 COMPILER V9.54   OSDAPI2                                                               01/06/2017 14:57:13 PAGE 8   

 423   3                      sx -= border;
 424   3                  }
 425   2                  ex = fh * oh - sy - border;
 426   2                  sy = tmp1;
 427   2                  ey = tmp2;
 428   2                  break;
 429   2              case OSD_WIN_DEGREE_180 :
 430   2                  tmp1 = sx;
 431   2                  tmp2 = ex;
 432   2                  sx = fw * ow - tmp2;
 433   2                  if (sx >= border) {
 434   3                      sx -= border;
 435   3                  }
 436   2                  ex = fw * ow - tmp1 - border;
 437   2                  tmp1 = sy;
 438   2                  tmp2 = ey;
 439   2                  sy = fh * oh - tmp2;
 440   2                  if (sy >= border) {
 441   3                      sy -= border;
 442   3                  }
 443   2                  ey = fh * oh - tmp1 - border;
 444   2                  break;
 445   2              case OSD_WIN_DEGREE_270 :
 446   2                  tmp1 = sx;
 447   2                  tmp2 = ex;
 448   2                  sx = sy;
 449   2                  ex = ey;
 450   2               if((fw * ow) >tmp2)    
 451   2                      sy = fw * ow - tmp2;
 452   2               else
 453   2              sy =tmp2 -fw * ow;       
 454   2          
 455   2                  if (sy >= border) {
 456   3                      sy -= border;
 457   3                  }
 458   2                  ey = fw * ow - tmp1 - border;
 459   2                  break;
 460   2              default :
 461   2                  break;
 462   2          }
 463   1      
 464   1          SC_OSD_WIN_HOR_START_LO = (UCHAR)sx;
 465   1          SC_OSD_WIN_HOR_END_LO = (UCHAR)ex;
 466   1          tmp1 = ((sx >> 8) & 0x000F) | ((ex >> 4) & 0x00F0);
 467   1          SC_OSD_WIN_HOR_HI = (UCHAR)tmp1;
 468   1          SC_OSD_WIN_VER_START_LO = (UCHAR)sy;
 469   1          SC_OSD_WIN_VER_END_LO = (UCHAR)ey;
 470   1          tmp1 = ((sy >> 8) & 0x000F) | ((ey >> 4) & 0x00F0);
 471   1          SC_OSD_WIN_VER_HI = (UCHAR)tmp1;
 472   1          
 473   1          //printf("->OSDAPI_RotateOSDWinPosition\r\n");
 474   1          //printf("->sx=%x,ex=%x,sy=%x,ey=%x\r\n",(USHRT)sx,(USHRT)ex,(USHRT)sy,(USHRT)ey);
 475   1          
 476   1          WaitDisVSync();
 477   1      }
 478          #endif //ENABLE_OSD_ROTATION == ON
 479          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    734    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.54   OSDAPI2                                                               01/06/2017 14:57:13 PAGE 9   

   XDATA SIZE       =   ----      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
